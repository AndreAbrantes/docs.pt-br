<Type Name="WorkflowApplication" FullName="System.Activities.WorkflowApplication">
  <TypeSignature Language="C#" Value="public sealed class WorkflowApplication : System.Activities.Hosting.WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowApplication extends System.Activities.Hosting.WorkflowInstance" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowApplication" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Hosting.WorkflowInstance</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um host para uma única instância de um fluxo de trabalho.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Activities.WorkflowApplication> classe fornece um host para uma instância de fluxo de trabalho único. É um proxy para a instância de fluxo de trabalho real que é gerenciado pelo tempo de execução do fluxo de trabalho. Os usuários do <xref:System.Activities.WorkflowApplication> pode instruir o tempo de execução do fluxo de trabalho para executar ações em uma instância de fluxo de trabalho chamando os métodos apropriados em um <xref:System.Activities.WorkflowApplication> objeto. Se uma ação solicitada não é válida, uma exceção será lançada.  
  
 Usando <xref:System.Activities.WorkflowApplication> você pode executar as seguintes tarefas:  
  
1.  Criar uma nova instância de fluxo de trabalho ou carregar uma instância de fluxo de trabalho de um repositório de instância.  
  
2.  Fornece extensões para ser usado por atividades dentro de uma instância de fluxo de trabalho.  
  
3.  Controle a execução de uma instância de fluxo de trabalho.  
  
4.  Retome um marcador criado por uma atividade dentro de uma instância de fluxo de trabalho.  
  
5.  Persistir ou descarregar uma instância de fluxo de trabalho.  
  
6.  Ser notificado sobre eventos de ciclo de vida de instância de fluxo de trabalho.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Quando o fluxo de trabalho for concluído, a saída a seguir são exibidas no console.  
  
```Output  
Starting the workflow.   
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Idle.   
Ending the workflow.   
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Completed  
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#9](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#9)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">A definição de fluxo de trabalho.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Activities.WorkflowApplication" /> classe com a definição de fluxo de trabalho especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Uma instância de <xref:System.Activities.WorkflowApplication> é usar construída usando uma definição de fluxo de trabalho que consiste em uma única atividade de `DiceRoll` . A atividade de `DiceRoll` tem dois argumentos de saída que representam os resultados da operação de rolagem de dados. Quando o fluxo de trabalho for concluído, as saídas são recuperadas a <xref:System.Activities.WorkflowApplication.Completed%2A> manipulador e a seguinte saída é exibido no console.  
  
```Output  
Workflow aae3fb48-7229-4737-b969-d63e131b96b3 Completed.   
The two dice are 1 and 5.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition, System.Activities.WorkflowIdentity definitionIdentity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition, class System.Activities.WorkflowIdentity definitionIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">A definição de fluxo de trabalho.</param>
        <param name="definitionIdentity">A identidade de definição.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Activities.WorkflowApplication" /> classe com a definição de fluxo de trabalho especificado e a identidade de definição.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">A definição de fluxo de trabalho.</param>
        <param name="inputs">Os valores para argumentos definidos na atividade raiz da definição de fluxo de trabalho, chaveada segundo o nome do argumento.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Activities.WorkflowApplication" /> classe que usa os valores de definição e o argumento de fluxo de trabalho especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando uma definição de fluxo de trabalho consiste em um único `Divide` atividade que leva dois argumentos de entrada e um dicionário de argumentos de entrada que contém os dois valores passados, chaveado segundo o nome do argumento. Os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Quando o fluxo de trabalho for concluído, a saída a seguir são exibidas no console.  
  
```Output  
Workflow 8dc844c1-bbf8-4b21-a9a2-05f89e416055 Completed  
500 / 36 = 13 Remainder 32  
Workflow 8dc844c1-bbf8-4b21-a9a2-05f89e416055 Unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, System.Activities.WorkflowIdentity definitionIdentity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.Activities.WorkflowIdentity definitionIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">A definição de fluxo de trabalho.</param>
        <param name="inputs">A identidade de definição.</param>
        <param name="definitionIdentity">Os valores para argumentos definidos na atividade raiz da definição de fluxo de trabalho, chaveada segundo o nome do argumento.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Activities.WorkflowApplication" /> classe que usa a definição de fluxo de trabalho especificado e os valores de argumento e identidade de definição.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Notifica o tempo de execução do fluxo de trabalho deve anular esta instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um fluxo de trabalho é hospedado por um <xref:System.Activities.WorkflowApplication> for cancelada, o <xref:System.Activities.WorkflowApplication.Aborted%2A> manipulador é chamado e o <xref:System.Activities.WorkflowApplication.Completed%2A> manipulador não é invocado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifica o tempo de execução do fluxo de trabalho deve anular esta instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um fluxo de trabalho é hospedado por um <xref:System.Activities.WorkflowApplication> for cancelada, o <xref:System.Activities.WorkflowApplication.Aborted%2A> manipulador é chamado e o <xref:System.Activities.WorkflowApplication.Completed%2A> manipulador não é invocado.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Abort%2A> é chamado. Quando o fluxo de trabalho é anulado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow 3b76d562-516a-4a52-b17c-0f2ce531ad93 Idle.   
Workflow 3b76d562-516a-4a52-b17c-0f2ce531ad93 Aborted  
Exception: System.Activities.WorkflowApplicationAbortedException  
The workflow has been aborted.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#11](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Abort(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para a solicitação para anular.</param>
        <summary>Notifica o tempo de execução do fluxo de trabalho que esta instância de fluxo de trabalho deve anular o motivo especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um fluxo de trabalho é hospedado por um <xref:System.Activities.WorkflowApplication> for cancelada, o <xref:System.Activities.WorkflowApplication.Aborted%2A> manipulador é chamado e o <xref:System.Activities.WorkflowApplication.Completed%2A> manipulador não é invocado.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Abort%2A> é chamado. Quando o fluxo de trabalho é anulado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow 607b042e-98db-4bbe-abe8-f4d750feec41 Idle.   
Workflow 607b042e-98db-4bbe-abe8-f4d750feec41 Aborted  
Exception: System.Activities.WorkflowApplicationAbortedException  
The reason for aborting the workflow.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#11](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Aborted">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationAbortedEventArgs&gt; Aborted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationAbortedEventArgs&gt; Aborted" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Aborted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationAbortedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Action`1" /> que é invocado quando a instância de fluxo de trabalho foi anulada.</summary>
        <value>A ação que é invocada quando a instância de fluxo de trabalho foi anulada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um fluxo de trabalho é hospedado por um <xref:System.Activities.WorkflowApplication> for cancelada, o <xref:System.Activities.WorkflowApplication.Aborted%2A> manipulador é chamado e o <xref:System.Activities.WorkflowApplication.Completed%2A> manipulador não é invocado.  
  
   
  
## Examples  
 Verifica se o exemplo de código a seguir a <xref:System.Activities.WorkflowApplicationAbortedEventArgs> passado para o <xref:System.Activities.WorkflowApplication.Aborted%2A> manipulador de um <xref:System.Activities.WorkflowApplication> de instância e exibe informações sobre por que o fluxo de trabalho foi anulado.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#5](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInitialInstanceValues">
      <MemberSignature Language="C#" Value="public void AddInitialInstanceValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInitialInstanceValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="writeOnlyValues">Os valores de metadados a serem incluídos com a persistência primeiro.</param>
        <summary>Especifica valores de metadados de instância que são incluídos com a persistência primeiro uma nova instância.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginCancel">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cancela um fluxo de trabalho de forma assíncrona usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginCancel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCancel (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCancel(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">O método a ser chamado quando a operação de cancelamento foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Cancela uma instância de fluxo de trabalho assincronamente usando especificado <see cref="T:System.AsyncCallback" /> e estado fornecido pelo usuário.</summary>
        <returns>Uma referência para a operação de cancelamento assíncrono.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de cancelamento foi bem-sucedido, chame <xref:System.Activities.WorkflowApplication.EndCancel%2A>. <xref:System.Activities.WorkflowApplication.EndCancel%2A>pode ser chamado de dentro ou fora do `callback` método. Se <xref:System.Activities.WorkflowApplication.EndCancel%2A> é chamado antes de concluir a operação de cancelamento, ele bloqueia até que a operação de cancelamento seja concluída. Por padrão, a operação de cancelamento deve concluir em 30 segundos ou uma <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndCancel%2A>.  
  
 Esse método cancela um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCancel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCancel (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCancel(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação de cancelamento deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de cancelamento foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Cancela uma instância de fluxo de trabalho usando o intervalo de tempo limite especificado, de forma assíncrona <see cref="T:System.AsyncCallback" />e o estado fornecido pelo usuário.</summary>
        <returns>Uma referência para a operação de cancelamento assíncrono.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de cancelamento foi bem-sucedido, chame <xref:System.Activities.WorkflowApplication.EndCancel%2A>. <xref:System.Activities.WorkflowApplication.EndCancel%2A>pode ser chamado de dentro ou fora do método especificado no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndCancel%2A> é chamado antes de concluir a operação de cancelamento, ele bloqueia até que a operação de cancelamento seja concluída. Se a operação de cancelamento não for concluída no intervalo especificado pelo `timeOut` parâmetro, um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndCancel%2A>.  
  
 Esse método cancela um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginCreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginCreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="definitionIdentity">A identidade de definição.</param>
        <param name="identityFilter">O filtro de identidade.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Cria um proprietário de instância padrão usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncronos com armazenamento de instância especificada, identidade de definição, o filtro de identidade, retorno de chamada e estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginCreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginCreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="definitionIdentity">A identidade de definição.</param>
        <param name="identityFilter">O filtro de identidade.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Cria um proprietário de instância padrão usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncronos com armazenamento de instância especificada, identidade de definição, o filtro de identidade, intervalo de tempo limite, retorno de chamada e estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginDeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginDeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Exclui um proprietário de instância padrão usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono com armazenamento de instância especificada, o retorno de chamada e o estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginDeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginDeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Exclui um proprietário de instância padrão usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncronos com armazenamento de instância especificado, o intervalo de tempo limite, retorno de chamada e estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">O identificador de instância.</param>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Recupera um proprietário de instância usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono com o identificador de instância especificado, o armazenamento de instância, retorno de chamada e estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">O identificador de instância.</param>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Recupera um proprietário de instância usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono com o identificador de instância especificado, o armazenamento de instância, intervalo de tempo limite, retorno de chamada e estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRunnableInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Recupera um proprietário de instância executável usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono com armazenamento de instância especificada, o retorno de chamada e o estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRunnableInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Recupera um proprietário de instância executável usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncronos com armazenamento de instância especificado, o intervalo de tempo limite, retorno de chamada e estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginLoad">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carrega um fluxo de trabalho de forma assíncrona de um repositório de instância usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Carrega um fluxo de trabalho de forma assíncrona de um repositório de instância usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono com a instância especificada, o retorno de chamada e o estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (Guid instanceId, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(valuetype System.Guid instanceId, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">Um identificador global exclusivo de 128 bits para a instância de fluxo de trabalho.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Carrega um fluxo de trabalho de forma assíncrona de um repositório de instância usando o identificador de instância especificado, o método de retorno de chamada e o estado fornecido pelo usuário.</summary>
        <returns>O status de uma operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <param name="updateMap">O mapa de atualização.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Carrega um fluxo de trabalho de forma assíncrona de um repositório de instância usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncronos com a instância especificada, o mapa de atualização, o retorno de chamada e o estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Carrega um fluxo de trabalho de forma assíncrona de um repositório de instância usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncronos com a instância especificada, o intervalo de tempo limite, o retorno de chamada e o estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (Guid instanceId, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(valuetype System.Guid instanceId, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">Um identificador global exclusivo de 128 bits para a instância de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Carrega um fluxo de trabalho de forma assíncrona de um repositório de instância usando o identificador de instância especificado, o período de tempo limite, o método de retorno de chamada e estado fornecido pelo usuário.</summary>
        <returns>O status de uma operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <param name="updateMap">O mapa de atualização.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de carregamento inicial foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Carrega um fluxo de trabalho de forma assíncrona de um repositório de instância usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono com a instância especificada, o mapa de atualização, intervalo de tempo limite, retorno de chamada e estado.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginLoadRunnableInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia o processo assíncrono do carregamento de uma instância de fluxo de trabalho executável do <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma instância executável é uma instância para o qual um bloqueio de instância ou de timer expirou.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginLoadRunnableInstance">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoadRunnableInstance (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoadRunnableInstance(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">O método a ser chamado quando a operação for concluída.</param>
        <param name="state">Um objeto opcional específico do aplicativo que contém informações sobre a operação assíncrona.</param>
        <summary>Inicia uma operação para carregar uma instância de fluxo de trabalho executável do <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
        <returns>Uma referência para a operação assíncrona</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma instância executável é uma instância para o qual um bloqueio de instância ou de timer expirou.  
  
 Para determinar se a operação de carregamento foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A>. <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A>pode ser chamado de dentro ou fora do `callback` método. Se <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> é chamado antes de concluir a operação de retomada, ele bloqueia até a conclusão da operação de retomada. Por padrão, a operação de retomada deve concluir em 30 segundos ou então um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A>.  
  
 Esse método carrega um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadRunnableInstance">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoadRunnableInstance (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoadRunnableInstance(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação de carregamento deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação for concluída.</param>
        <param name="state">Um objeto opcional específico do aplicativo que contém informações sobre a operação assíncrona.</param>
        <summary>Inicia uma operação para carregar uma instância de fluxo de trabalho executável do <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> usando o intervalo de tempo limite especificado.</summary>
        <returns>Uma referência para a operação assíncrona</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma instância executável é uma instância para o qual um bloqueio de instância ou de timer expirou.  
  
 Para determinar se a operação de carregamento foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A>. <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A>pode ser chamado de dentro ou fora do `callback` método. Se <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> é chamado antes de concluir a operação de retomada, ele bloqueia até a conclusão da operação de retomada. Se a operação de carregamento não for concluída dentro do intervalo de tempo limite especificado um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A>.  
  
 Esse método carrega um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginPersist">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Persistir uma instância de fluxo de trabalho para um repositório de instâncias usando de forma assíncrona o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginPersist">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPersist (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPersist(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">O método a ser chamado quando a operação de persistência foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Persistir uma instância de fluxo de trabalho para um armazenamento de instância usando o método de retorno de chamada especificada e o estado fornecido pelo usuário de forma assíncrona.</summary>
        <returns>Uma referência para o assíncrona mantêm a operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de persistência foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndPersist%2A>. <xref:System.Activities.WorkflowApplication.EndPersist%2A>pode ser chamado de dentro ou fora do método referenciado no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndPersist%2A> é chamado antes da conclusão da operação de persistência, ele bloqueia até que a operação de persistência é concluída. Se a operação de persistência não for concluída dentro de 30 segundos, uma <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndPersist%2A>.  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 Esse método persiste um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginPersist">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPersist (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPersist(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação de persistência deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de persistência foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Persistir uma instância de fluxo de trabalho para um repositório de instâncias usando de forma assíncrona o intervalo de tempo limite especificado, o método de retorno de chamada e o estado fornecido pelo usuário.</summary>
        <returns>Uma referência para o assíncrona mantêm a operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de persistência foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndPersist%2A>. <xref:System.Activities.WorkflowApplication.EndPersist%2A>pode ser chamado de dentro ou fora do método referenciado no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndPersist%2A> é chamado antes da conclusão da operação de persistência, ele bloqueia até que a operação de persistência é concluída. Se a operação de persistência não for concluída dentro do intervalo de tempo limite especificado, um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndPersist%2A>.  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 Esse método persiste uma instância de fluxo de trabalho assincronamente usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (System.Activities.Bookmark bookmark, object value, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(class System.Activities.Bookmark bookmark, object value, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">O indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <param name="callback">O método a ser chamado quando a operação de retomada foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Inicia uma operação para retomar um indicador usando o valor especificado, o método de retorno de chamada e o estado.</summary>
        <returns>Uma referência para o indicador assíncrona retomar a operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de retomada foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A>. <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A>pode ser chamado de dentro ou fora do `callback` método. Se <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> é chamado antes de concluir a operação de retomada, ele bloqueia até a conclusão da operação de retomada. Por padrão, a operação de retomada deve concluir em 30 segundos ou então um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A>.  
  
 Esse método retoma um indicador de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (string bookmarkName, object value, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(string bookmarkName, object value, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">O nome do indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <param name="callback">O método é chamado quando a operação assíncrona for concluída.</param>
        <param name="state">O estado de execução de um fluxo de trabalho que foi preservado por thread de chamada antes de uma operação assíncrona foi iniciado.</param>
        <summary>Inicia uma operação assíncrona para retomar o indicador com o nome especificado, usando o valor especificado, o método de retorno de chamada e o estado. O indicador a ser continuado é criado anteriormente por uma atividade dentro da instância do fluxo de trabalho.</summary>
        <returns>O resultado da operação de continuação do indicador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O resultado do indicador indica se a operação de retomada foi bem-sucedida ou falhou.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(class System.Activities.Bookmark bookmark, object value, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">O indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <param name="timeout">O intervalo no qual a operação de retomada deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de retomada foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Inicia uma operação para retomar um indicador usando o valor especificado, o intervalo de tempo limite, o método de retorno de chamada e o estado.</summary>
        <returns>Uma referência para o indicador assíncrona retomar a operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de retomada foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A>. <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A>pode ser chamado de dentro ou fora do `callback` método. Se <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> é chamado antes de concluir a operação de retomada, ele bloqueia até a conclusão da operação de retomada. Se a operação de retomada não for concluída dentro do intervalo de tempo limite especificado um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A>.  
  
 Esse método retoma um indicador de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (string bookmarkName, object value, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(string bookmarkName, object value, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">O nome do indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <param name="timeout">O intervalo de tempo durante o qual o indicador deve ser retomado.</param>
        <param name="callback">O método é chamado quando a operação assíncrona for concluída.</param>
        <param name="state">O estado de execução de um fluxo de trabalho que foi salvo pelo thread de chamada antes de uma operação assíncrona foi iniciado.</param>
        <summary>Inicia uma operação assíncrona para retomar o indicador com o nome especificado, usando o valor especificado, o intervalo de tempo limite, o método de retorno de chamada e o estado. O indicador a ser continuado é criado anteriormente por uma atividade dentro da instância do fluxo de trabalho.</summary>
        <returns>O resultado da operação de continuação do indicador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O resultado do indicador indica se a operação de retomada foi bem-sucedida ou falhou.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginRun">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia ou retoma uma instância de fluxo de trabalho assincronamente usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginRun">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRun (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginRun(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">O método a ser chamado quando a operação de retomada foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Inicia ou retoma uma instância de fluxo de trabalho usando o método de retorno de chamada especificada e o estado fornecido pelo usuário de forma assíncrona.</summary>
        <returns>Uma referência para a operação de execução assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de execução foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndRun%2A>. <xref:System.Activities.WorkflowApplication.EndRun%2A>pode ser chamado de dentro ou fora do método referenciado no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndRun%2A> é chamado antes de concluir a operação de retomada, ele bloqueia até a conclusão da operação de retomada. Por padrão, a operação de retomada deve concluir em 30 segundos ou uma <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndRun%2A>.  
  
 Esse método inicia ou retoma um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRun">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRun (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginRun(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação de retomada deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando a operação de retomada foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Inicia ou retoma uma instância de fluxo de trabalho assincronamente usando o intervalo de tempo limite especificado, o método de retorno de chamada e o estado fornecido pelo usuário.</summary>
        <returns>Uma referência para a operação de execução assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se a operação de execução foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndRun%2A>. <xref:System.Activities.WorkflowApplication.EndRun%2A>pode ser chamado de dentro ou fora da referência do método no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndRun%2A> é chamado antes de concluir a operação de retomada, ele bloqueia até a conclusão da operação de retomada. Se a operação de retomada não for concluída dentro do intervalo de tempo limite especificado um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndRun%2A>.  
  
 Esse método inicia ou retoma um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTerminate">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Finaliza uma instância de fluxo de trabalho assincronamente usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (Exception reason, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(class System.Exception reason, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo pelo qual a instância de fluxo de trabalho é encerrado.</param>
        <param name="callback">O método a ser chamado quando o <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando de forma assíncrona a exceção especificada, o método de retorno de chamada e o estado fornecido pelo usuário.</summary>
        <returns>Uma referência ao atual <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término da instância do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
 Para determinar se o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> a operação foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndTerminate%2A>. <xref:System.Activities.WorkflowApplication.EndTerminate%2A>pode ser chamado de dentro ou fora do método referenciado no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndTerminate%2A> é chamado antes de <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída, ele bloqueia até que o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída. Por padrão, o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação deve ser concluída em 30 segundos ou uma <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndTerminate%2A>.  
  
 Esse método encerra um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (string reason, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(string reason, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para encerrar a instância de fluxo de trabalho.</param>
        <param name="callback">O método a ser chamado quando o <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando a mensagem de erro especificada, o método de retorno de chamada e o estado fornecido pelo usuário de forma assíncrona.</summary>
        <returns>Uma referência ao atual <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término da instância do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
 Para determinar se o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> a operação foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndTerminate%2A>. <xref:System.Activities.WorkflowApplication.EndTerminate%2A>pode ser chamado de dentro ou fora da referência do método no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndTerminate%2A> é chamado antes de <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída, ele bloqueia até que o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída. Por padrão, o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação deve ser concluída em 30 segundos ou uma <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndTerminate%2A>.  
  
 Esse método Finaliza uma instância de fluxo de trabalho assincronamente usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (Exception reason, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(class System.Exception reason, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para encerrar a instância de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual o <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação deve ser concluída antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando o <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando de forma assíncrona a exceção especificada, intervalo de tempo limite, o método de retorno de chamada e estado fornecido pelo usuário.</summary>
        <returns>Uma referência ao atual <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término da instância do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
 Para determinar se o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> a operação foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndTerminate%2A>. <xref:System.Activities.WorkflowApplication.EndTerminate%2A>pode ser chamado de dentro ou fora do `callback` método. Se <xref:System.Activities.WorkflowApplication.EndTerminate%2A> é chamado antes de <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída, ele bloqueia até que o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída. Se o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação não for concluída dentro do intervalo de tempo limite especificado um <xref:System.TimeoutException> é gerada. Isso ou todas as exceções que ocorrem durante o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> processo é gerado de <xref:System.Activities.WorkflowApplication.EndTerminate%2A>.  
  
 Esse método encerra um fluxo de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (string reason, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(string reason, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para encerrar a instância de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual o <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação deve ser concluída antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando o <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando a mensagem de erro especificada, intervalo de tempo limite, o método de retorno de chamada e estado fornecido pelo usuário de forma assíncrona.</summary>
        <returns>Uma referência para o assíncrona <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término da instância do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
 Para determinar se o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> a operação foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndTerminate%2A>. <xref:System.Activities.WorkflowApplication.EndTerminate%2A>pode ser chamado de dentro ou fora da referência do método no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndTerminate%2A> é chamado antes de <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída, ele bloqueia até que o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação for concluída. Se o <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação não for concluída dentro do intervalo de tempo limite especificado um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndTerminate%2A>.  
  
 Esse método Finaliza uma instância de fluxo de trabalho assincronamente usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginUnload">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Persistir e dispõe de uma instância de fluxo de trabalho assincronamente usando o <see cref="T:System.IAsyncResult" /> padrão de design assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginUnload">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginUnload (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginUnload(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">O método a ser chamado quando o <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operação foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Persistir e dispõe de uma instância de fluxo de trabalho usando o método de retorno de chamada especificada e o estado fornecido pelo usuário de forma assíncrona.</summary>
        <returns>Uma referência para o assíncrona <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se o <xref:System.Activities.WorkflowApplication.BeginUnload%2A> a operação foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndUnload%2A>. <xref:System.Activities.WorkflowApplication.EndUnload%2A>pode ser chamado de dentro ou fora da referência do método no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndUnload%2A> é chamado antes de <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operação for concluída, ele bloqueia até que o <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operação for concluída. Por padrão, o <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operação deve ser concluída em 30 segundos ou uma <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndUnload%2A>.  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 Esse método persistir e dispõe de uma instância de fluxo de trabalho assincronamente usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUnload">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginUnload (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginUnload(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual o <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> operação deve ser concluída antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <param name="callback">O método a ser chamado quando o <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operação foi concluída.</param>
        <param name="state">Um objeto específico do aplicativo opcional que contém informações sobre a operação assíncrona.</param>
        <summary>Persistir e dispõe de uma instância de fluxo de trabalho assincronamente usando o intervalo de tempo limite especificado, o método de retorno de chamada e o estado fornecido pelo usuário.</summary>
        <returns>Uma referência para o assíncrona <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para determinar se o <xref:System.Activities.WorkflowApplication.BeginUnload%2A> a operação foi bem-sucedida, chame <xref:System.Activities.WorkflowApplication.EndUnload%2A>. <xref:System.Activities.WorkflowApplication.EndUnload%2A>pode ser chamado de dentro ou fora da referência do método no `callback` parâmetro. Se <xref:System.Activities.WorkflowApplication.EndUnload%2A> é chamado antes de <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operação for concluída, ele bloqueia até que o <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operação for concluída. Se o <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operação não for concluída dentro do intervalo de tempo limite especificado um <xref:System.TimeoutException> é gerada de <xref:System.Activities.WorkflowApplication.EndUnload%2A>.  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 Esse método persistir e descarrega uma instância de fluxo de trabalho assincronamente usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Cancel">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cancela a instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o cancelamento da instância do fluxo de trabalho. Para ser notificado quando o cancelamento foi concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
 Por padrão, a operação de cancelamento deve concluir em 30 segundos ou um <xref:System.TimeoutException> é gerada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Cancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancela a instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o cancelamento da instância do fluxo de trabalho. Para ser notificado quando o cancelamento foi concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> manipulador.  
  
 Por padrão, a operação de cancelamento deve concluir em 30 segundos ou um <xref:System.TimeoutException> é gerada.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Cancel%2A> é chamado. Quando o fluxo de trabalho é cancelado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow bcce00c2-d323-42c2-8c25-19ff0c4b6dac Idle.   
Workflow bcce00c2-d323-42c2-8c25-19ff0c4b6dac Canceled  
Workflow bcce00c2-d323-42c2-8c25-19ff0c4b6dac Unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#13](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação de cancelamento deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Cancela a instância de fluxo de trabalho usando o intervalo de tempo limite especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o cancelamento da instância do fluxo de trabalho. Para ser notificado quando o cancelamento foi concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> manipulador.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Cancel%2A> é chamado. Quando o fluxo de trabalho é cancelado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow bcce00c2-d323-42c2-8c25-19ff0c4b6dac Idle.   
Workflow bcce00c2-d323-42c2-8c25-19ff0c4b6dac Canceled  
Workflow bcce00c2-d323-42c2-8c25-19ff0c4b6dac Unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#13](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationCompletedEventArgs&gt; Completed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Completed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Action`1" /> invocado quando a instância de fluxo de trabalho é concluída.</summary>
        <value>A ação invocada quando a instância de fluxo de trabalho é concluída.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Verifica se o exemplo de código a seguir a <xref:System.Activities.WorkflowApplicationCompletedEventArgs> passado para o <xref:System.Activities.WorkflowApplication.Completed%2A> manipulador de um <xref:System.Activities.WorkflowApplication> instância e exibe informações sobre como o fluxo de trabalho é concluído.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#4](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void CreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="definitionIdentity">A identidade de definição do fluxo de trabalho.</param>
        <param name="identityFilter">O filtro de identidade.</param>
        <summary>Cria um proprietário de instância padrão do fluxo de trabalho usando o armazenamento de instância especificada, identidade de definição e filtro de identidade.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void CreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="definitionIdentity">A identidade de definição do fluxo de trabalho.</param>
        <param name="identityFilter">O filtro de identidade.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação foi cancelada.</param>
        <summary>Cria um proprietário de instância padrão do fluxo de trabalho usando o repositório de instância especificada, a identidade de definição e o filtro e tempo limite de intervalo de identidade.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void DeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <summary>Exclui um proprietário de instância padrão do fluxo de trabalho com o repositório de instância especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void DeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação foi cancelada.</param>
        <summary>Exclui um proprietário de instância padrão do fluxo de trabalho com intervalo de tempo limite e de armazenamento de instância especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCancel">
      <MemberSignature Language="C#" Value="public void EndCancel (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndCancel(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">A operação de cancelamento assíncrono.</param>
        <summary>Aguarda a conclusão da operação de cancelamento assíncrono pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina se um <xref:System.Activities.WorkflowApplication.BeginCancel%2A> a operação foi bem-sucedida. Se for chamado antes de concluir a operação de cancelamento, ele bloqueia até que a operação de cancelamento seja concluída.  
  
 Esse método é concluído para a operação de cancelamento assíncrono usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void EndCreateDefaultInstanceOwner (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCreateDefaultInstanceOwner(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndCreateDefaultInstanceOwner(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">O resultado assíncrono.</param>
        <summary>Espera para a criação de proprietário de instância padrão para concluir.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void EndDeleteDefaultInstanceOwner (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndDeleteDefaultInstanceOwner(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndDeleteDefaultInstanceOwner(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">O resultado assíncrono.</param>
        <summary>Aguarda a exclusão do proprietário da instância padrão para concluir.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance EndGetInstance (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance EndGetInstance(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">O resultado assíncrono.</param>
        <summary>Aguarda a conclusão da recuperação de instância.</summary>
        <returns>O resultado da operação.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetRunnableInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance EndGetRunnableInstance (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance EndGetRunnableInstance(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">O resultado assíncrono.</param>
        <summary>Aguarda a recuperação assíncrona de conclusão da operação de instância executável.</summary>
        <returns>O resultado da operação.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoad">
      <MemberSignature Language="C#" Value="public void EndLoad (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndLoad(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">A operação de carregamento assíncrono.</param>
        <summary>Aguarda a conclusão da operação de carregamento assíncrono pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se esse método é chamado antes da operação de carregamento for concluído, ele fica bloqueado até que a operação de carregamento é concluída.  
  
 Esse método é concluído para a operação de carregamento assíncrono usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadRunnableInstance">
      <MemberSignature Language="C#" Value="public void EndLoadRunnableInstance (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndLoadRunnableInstance(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Uma referência para a operação de carregamento assíncrono.</param>
        <summary>Aguarda a conclusão da operação de instância executável carregamento assíncrono.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina se um <xref:System.Activities.WorkflowApplication.BeginLoadRunnableInstance%2A> a operação foi bem-sucedida. Se for chamado antes da operação de carregamento for concluído, ele bloqueia até que a operação seja concluída.  
  
 Esse método carrega fluxos de trabalho de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndPersist">
      <MemberSignature Language="C#" Value="public void EndPersist (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndPersist(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Assíncrona mantêm a operação.</param>
        <summary>Aguarda o pendentes assíncrona persistir a conclusão da operação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina se um <xref:System.Activities.WorkflowApplication.BeginPersist%2A> a operação foi bem-sucedida. Se for chamado antes da conclusão da operação de persistência, ele bloqueia até que a operação de persistência é concluída.  
  
 Esse método é concluído assíncrona persistir a operação usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult EndResumeBookmark (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult EndResumeBookmark(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Uma referência para o indicador assíncrona retomar a operação.</param>
        <summary>Aguarda um indicador retomar a operação seja concluída.</summary>
        <returns>Um dos valores de enumeração que indica os resultados de uma operação de retomada do indicador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina se um <xref:System.Activities.WorkflowApplication.BeginResumeBookmark%2A> a operação foi bem-sucedida. Se for chamado antes da operação de carregamento for concluído, ele bloqueia até que a operação seja concluída.  
  
 Esse método retoma um indicador de forma assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRun">
      <MemberSignature Language="C#" Value="public void EndRun (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndRun(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">A operação de execução assíncrona.</param>
        <summary>Aguarda até que a operação de execução assíncrona pendente seja concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método determina se um <xref:System.Activities.WorkflowApplication.BeginRun%2A> a operação foi bem-sucedida. Se for chamado antes de concluir a operação de retomada, ele bloqueia até que a operação de retomada seja concluída.  
  
 Esse método é concluído uma operação de execução assíncrona usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTerminate">
      <MemberSignature Language="C#" Value="public void EndTerminate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndTerminate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">O assíncrona encerrar a operação.</param>
        <summary>Aguarda o pendentes assíncrona encerrar a operação seja concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser chamado para determinar se um <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> a operação foi bem-sucedida. Se for chamado antes de concluir a operação de término, ele bloqueia até que a operação seja concluída.  
  
 Esse método é concluído assíncrona <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operação usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUnload">
      <MemberSignature Language="C#" Value="public void EndUnload (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUnload(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">A operação assíncrona.</param>
        <summary>Aguarda a conclusão da operação de descarregamento pendente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser chamado para determinar se um <xref:System.Activities.WorkflowApplication.BeginUnload%2A> a operação foi bem-sucedida. Se for chamado antes da operação ser concluída, ele bloqueia até que a operação seja concluída.  
  
 Esse método é concluído assíncrona <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operação usando o <xref:System.IAsyncResult> padrão de design assíncrono. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Visão geral da programação assíncrona](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a coleção de extensões para a instância de fluxo de trabalho atual.</summary>
        <value>Uma coleção de objetos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBookmarks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetBookmarks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna a coleção de indicadores para a instância de fluxo de trabalho.</summary>
        <returns>Uma coleção somente leitura de indicadores para a instância de fluxo de trabalho.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se essa operação não for concluída dentro de 30 segundos, um <xref:System.TimeoutException> é gerada.  
  
   
  
## Examples  
 O exemplo a seguir cria um fluxo de trabalho que usa um `ReadLine` atividade cria um <xref:System.Activities.Bookmark>. O fluxo de trabalho é iniciado, e depois que <xref:System.Activities.Bookmark> é criado e fluxo de trabalho aparece ociosa, <xref:System.Activities.WorkflowApplication.GetBookmarks%2A> é chamado. Quando o fluxo de trabalho for concluído, a saída a seguir são exibidas no console.  
  
```Output  
What is your name?   
BookmarkName: UserName - OwnerDisplayName: ReadLine  
Steve  
Hello, Steve  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#14](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBookmarks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual esse método deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Retorna a coleção de indicadores para a instância de fluxo de trabalho usando o intervalo de tempo limite especificado.</summary>
        <returns>Uma coleção somente leitura de indicadores para a instância de fluxo de trabalho.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir cria um fluxo de trabalho que usa um `ReadLine` atividade cria um <xref:System.Activities.Bookmark>. O fluxo de trabalho é iniciado, e depois que <xref:System.Activities.Bookmark> é criado e fluxo de trabalho aparece ociosa, <xref:System.Activities.WorkflowApplication.GetBookmarks%2A> é chamado. Quando o fluxo de trabalho for concluído, a saída a seguir são exibidas no console.  
  
```Output  
What is your name?   
BookmarkName: UserName - OwnerDisplayName: ReadLine  
Steve  
Hello, Steve  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#14](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
      </Parameters>
      <Docs>
        <param name="instanceId">O identificador de instância.</param>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <summary>Recupera a instância de fluxo de trabalho usando o identificador de instância especificado e o repositório de instância.</summary>
        <returns>A instância recuperada.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceId">O identificador de instância.</param>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação foi cancelada.</param>
        <summary>Recupera a instância de fluxo de trabalho usando o identificador de instância especificado, o armazenamento de instância e tempo limite de intervalo.</summary>
        <returns>Uma referência para a operação assíncrona.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunnableInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho</param>
        <summary>Recupera a instância de execução do fluxo de trabalho com o repositório de instância especificada.</summary>
        <returns>A instância do executável.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunnableInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceStore">O acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação foi cancelada.</param>
        <summary>Recupera a instância de execução do fluxo de trabalho com intervalo de tempo limite e de armazenamento de instância especificada.</summary>
        <returns>A instância do executável.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public override Guid Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Id" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o identificador GUID de 128 bits da instância do aplicativo de fluxo de trabalho atual.</summary>
        <value>Um identificador GUID de 128 bits.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir cria um <xref:System.Activities.WorkflowApplication> instância e, em seguida, exibe o <xref:System.Activities.WorkflowApplication.Id%2A> valor no console.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#28](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Idle">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationIdleEventArgs&gt; Idle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationIdleEventArgs&gt; Idle" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Idle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationIdleEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Action`1" /> que é invocado quando a instância de fluxo de trabalho atual ficar ociosa.</summary>
        <value>Uma ação que é executado quando uma instância de fluxo de trabalho se torna ociosa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código inspeciona <xref:System.Activities.WorkflowApplicationIdleEventArgs> passado para o manipulador de <xref:System.Activities.WorkflowApplication.Idle%2A> de uma instância de <xref:System.Activities.WorkflowApplication> . Nesse exemplo a ociosa indo de fluxo de trabalho tem um <xref:System.Activities.Bookmark> com um nome de `EnterGuess`, possuídas por uma atividade chamada `ReadInt`. Este exemplo de código baseia-se da [como: executar um fluxo de trabalho](~/docs/framework/windows-workflow-foundation/how-to-run-a-workflow.md), que faz parte do [Tutorial de Introdução &#91;. NET Framework 4.5 &#93; ](~/docs/framework/windows-workflow-foundation/getting-started-tutorial.md). Se o manipulador de <xref:System.Activities.WorkflowApplication.Idle%2A> nessa etapa é alterado para conter o código deste exemplo, a seguinte saída são exibidas.  
  
```Output  
BookmarkName: EnterGuess - OwnerDisplayName: ReadInt  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceStore">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceStore InstanceStore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceStore InstanceStore" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.InstanceStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um objeto que fornece acesso para o estado persistido da instância atual do aplicativo de fluxo de trabalho.</summary>
        <value>Um repositório de instâncias.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir cria uma instância de WorkflowApplication e, em seguida, configura o <xref:System.Activities.WorkflowApplication.InstanceStore%2A> usando um <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore>. Este exemplo de código é parte de [como: criar e executar um fluxo de trabalho de execução longa](~/docs/framework/windows-workflow-foundation/how-to-create-and-run-a-long-running-workflow.md), que faz parte do [Tutorial de Introdução &#91;. NET Framework 4.5 &#93; ](~/docs/framework/windows-workflow-foundation/getting-started-tutorial.md).  
  
 [!code-csharp[CFX_WorkflowApplicationExample#28](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <summary>Carrega uma instância de fluxo de trabalho de um repositório de instância com a instância especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">Um identificador global exclusivo de 128 bits para a instância de fluxo de trabalho.</param>
        <summary>Carrega a instância de fluxo de trabalho especificado na memória de um repositório de instância.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 A exemplo a seguir chama <xref:System.Activities.WorkflowApplication.Load%2A> ao carregar a instância de fluxo de trabalho persistentes de um <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore>. Este exemplo é do `LoadAndCompleteInstance` método o [persistência de um aplicativo de fluxo de trabalho](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md) exemplo.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#27](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <param name="updateMap">O mapa de atualização.</param>
        <summary>Carrega uma instância de fluxo de trabalho de um repositório de instância com o mapa de instância e de atualização especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação foi cancelada.</param>
        <summary>Carrega uma instância de fluxo de trabalho de um repositório de instâncias com intervalo de instância e o tempo limite especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Guid instanceId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(valuetype System.Guid instanceId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceId">Um identificador global exclusivo de 128 bits para a instância de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento deve concluir antes da operação de carregamento é cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Carrega a instância de fluxo de trabalho especificado na memória de um repositório de instância usando o intervalo de tempo limite especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 A exemplo a seguir chama <xref:System.Activities.WorkflowApplication.Load%2A> ao carregar a instância de fluxo de trabalho persistentes de um <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore>. Este exemplo é do `LoadAndCompleteInstance` método o [persistência de um aplicativo de fluxo de trabalho](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md) exemplo.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#27](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">A instância.</param>
        <param name="updateMap">O mapa de atualização.</param>
        <param name="timeout">O intervalo no qual a operação de carregamento inicial deve concluir antes da operação foi cancelada.</param>
        <summary>Carrega uma instância de fluxo de trabalho de um repositório de instância com a instância especificada, o intervalo de mapa e o tempo limite de atualização.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadRunnableInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carrega uma instância de fluxo de trabalho executável do <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma instância executável é uma instância para o qual um bloqueio de instância ou de timer expirou.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadRunnableInstance">
      <MemberSignature Language="C#" Value="public void LoadRunnableInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadRunnableInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.LoadRunnableInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Carrega uma instância de fluxo de trabalho executável do <see cref="P:System.Activities.WorkflowApplication.InstanceStore" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma instância executável é uma instância para o qual um bloqueio de instância ou de timer expirou.  
  
 Por padrão, a operação de carregamento deve concluir em 30 segundos ou um <xref:System.TimeoutException> é gerada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRunnableInstance">
      <MemberSignature Language="C#" Value="public void LoadRunnableInstance (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadRunnableInstance(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação de carregamento deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Carrega uma instância de fluxo de trabalho executável do <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> usando o intervalo de tempo limite especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma instância executável é uma instância para o qual um bloqueio de instância ou de timer expirou.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginAssociateKeys">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginAssociateKeys (System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt; keys, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.IAsyncResult OnBeginAssociateKeys(class System.Collections.Generic.ICollection`1&lt;class System.Runtime.DurableInstancing.InstanceKey&gt; keys, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keys">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginPersist">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginPersist (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.IAsyncResult OnBeginPersist(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnBeginPersist(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginResumeBookmark">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.IAsyncResult OnBeginResumeBookmark(class System.Activities.Bookmark bookmark, object value, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">To be added.</param>
        <param name="value">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisassociateKeys">
      <MemberSignature Language="C#" Value="protected override void OnDisassociateKeys (System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt; keys);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnDisassociateKeys(class System.Collections.Generic.ICollection`1&lt;class System.Runtime.DurableInstancing.InstanceKey&gt; keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt;" />
      </Parameters>
      <Docs>
        <param name="keys">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndAssociateKeys">
      <MemberSignature Language="C#" Value="protected override void OnEndAssociateKeys (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnEndAssociateKeys(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnEndAssociateKeys(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndPersist">
      <MemberSignature Language="C#" Value="protected override void OnEndPersist (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnEndPersist(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnEndPersist(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndResumeBookmark">
      <MemberSignature Language="C#" Value="protected override System.Activities.BookmarkResumptionResult OnEndResumeBookmark (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance valuetype System.Activities.BookmarkResumptionResult OnEndResumeBookmark(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnEndResumeBookmark(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNotifyPaused">
      <MemberSignature Language="C#" Value="protected override void OnNotifyPaused ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnNotifyPaused() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnNotifyPaused" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNotifyUnhandledException">
      <MemberSignature Language="C#" Value="protected override void OnNotifyUnhandledException (Exception exception, System.Activities.Activity exceptionSource, string exceptionSourceInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnNotifyUnhandledException(class System.Exception exception, class System.Activities.Activity exceptionSource, string exceptionSourceInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="exceptionSource" Type="System.Activities.Activity" />
        <Parameter Name="exceptionSourceInstanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="exception">To be added.</param>
        <param name="exceptionSource">To be added.</param>
        <param name="exceptionSourceInstanceId">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRequestAbort">
      <MemberSignature Language="C#" Value="protected override void OnRequestAbort (Exception reason);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRequestAbort(class System.Exception reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnRequestAbort(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="reason">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="public Func&lt;System.Activities.WorkflowApplicationUnhandledExceptionEventArgs,System.Activities.UnhandledExceptionAction&gt; OnUnhandledException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Activities.WorkflowApplicationUnhandledExceptionEventArgs, valuetype System.Activities.UnhandledExceptionAction&gt; OnUnhandledException" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.OnUnhandledException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Activities.WorkflowApplicationUnhandledExceptionEventArgs,System.Activities.UnhandledExceptionAction&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Func`2" /> invocado quando a instância de fluxo de trabalho atual encontra uma exceção sem tratamento.</summary>
        <value>O delegado invocado quando uma instância de fluxo de trabalho encontra uma exceção sem tratamento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ambos <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> e <xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior> determinam o comportamento de tempo de execução quando uma exceção não é tratada no fluxo de trabalho; no entanto, <xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior> tem a opção de deixar um fluxo de trabalho no repositório de persistência, enquanto <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> não. A razão para isso é o que acontece com um fluxo de trabalho específico do host, e <xref:System.Activities.WorkflowApplication> não é. Para implementar essa funcionalidade usando <xref:System.Activities.WorkflowApplication>, criar um personalizado <xref:System.Activities.Persistence.PersistenceParticipant> com esse comportamento.  
  
   
  
## Examples  
 O exemplo a seguir chama um fluxo de trabalho que gerencia uma exceção. A exceção é não tratados pelo fluxo de trabalho e o manipulador de <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> é chamado. <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> é inspecionado para fornecer informações sobre a exceção, e fluxo de trabalho é encerrado.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Persist">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Persistir uma instância de fluxo de trabalho para um repositório de instâncias.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="public void Persist ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Persist() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Persist" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Persistir uma instância de fluxo de trabalho para um repositório de instâncias.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a operação de persistência não for concluída dentro de 30 segundos, um <xref:System.TimeoutException> é gerada.  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
   
  
## Examples  
 A exemplo a seguir chama <xref:System.Activities.WorkflowApplication.Persist%2A> para persistir uma instância de fluxo de trabalho antes do fluxo de trabalho é iniciado. Este exemplo é parte do `StartAndUnloadInstance` método o [persistência de um aplicativo de fluxo de trabalho](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md) exemplo.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="public void Persist (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Persist(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação de persistência deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Persistir uma instância de fluxo de trabalho para um armazenamento de instância usando o intervalo de tempo limite especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
   
  
## Examples  
 A exemplo a seguir chama <xref:System.Activities.WorkflowApplication.Persist%2A> para persistir uma instância de fluxo de trabalho antes do fluxo de trabalho é iniciado. Este exemplo é do `StartAndUnloadInstance` método o [persistência de um aplicativo de fluxo de trabalho](~/docs/framework/windows-workflow-foundation/samples/persisting-a-workflow-application.md) exemplo.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistableIdle">
      <MemberSignature Language="C#" Value="public Func&lt;System.Activities.WorkflowApplicationIdleEventArgs,System.Activities.PersistableIdleAction&gt; PersistableIdle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Activities.WorkflowApplicationIdleEventArgs, valuetype System.Activities.PersistableIdleAction&gt; PersistableIdle" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.PersistableIdle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Activities.WorkflowApplicationIdleEventArgs,System.Activities.PersistableIdleAction&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Activities.ActivityFunc" /> invocado quando a instância de fluxo de trabalho atual está ociosa e pode ser persistente.</summary>
        <value>O <see cref="T:System.Activities.ActivityFunc" /> invocado quando a instância de fluxo de trabalho atual está ociosa e pode ser persistente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um fluxo de trabalho se torna ocioso e podem ser persistentes, ambos <xref:System.Activities.WorkflowApplication.Idle%2A> e <xref:System.Activities.WorkflowApplication.PersistableIdle%2A> são chamados, nessa ordem. O <xref:System.Activities.WorkflowApplication.PersistableIdle%2A> manipulador retorna um do <xref:System.Activities.PersistableIdleAction> valores de enumeração <xref:System.Activities.PersistableIdleAction.None>, <xref:System.Activities.PersistableIdleAction.Persist>, ou <xref:System.Activities.PersistableIdleAction.Unload>.  
  
   
  
## Examples  
 A exemplo a seguir trata o <xref:System.Activities.WorkflowApplication.PersistableIdle%2A> manipulador e instrui o tempo de execução para persistir e descarregar o fluxo de trabalho.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#26](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (System.Activities.Bookmark bookmark, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(class System.Activities.Bookmark bookmark, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">O indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <summary>Inicia uma operação para retomar o indicador fornecido, usando o valor especificado. O indicador a ser continuado é criado anteriormente por uma atividade dentro da instância do fluxo de trabalho.</summary>
        <returns>O resultado da operação de continuação do indicador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O resultado do indicador indica se a operação de retomada foi bem-sucedida ou falhou.  
  
   
  
## Examples  
 O exemplo a seguir cria um fluxo de trabalho que usa um `ReadLine` atividade cria um <xref:System.Activities.Bookmark>. O fluxo de trabalho é iniciado e uma vez a <xref:System.Activities.Bookmark> é criado e o fluxo de trabalho fica ocioso, a entrada do usuário é coletada e o indicador é retomado.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#24](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (string bookmarkName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(string bookmarkName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">O nome do indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <summary>Inicia uma operação para retomar o indicador com o nome especificado, usando o valor especificado. O indicador a ser continuado é criado anteriormente por uma atividade dentro da instância do fluxo de trabalho.</summary>
        <returns>O resultado da operação de continuação do indicador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O resultado do indicador indica se a operação de retomada foi bem-sucedida ou falhou.  
  
   
  
## Examples  
 O exemplo a seguir cria um fluxo de trabalho que usa um `ReadLine` atividade cria um <xref:System.Activities.Bookmark>. O fluxo de trabalho é iniciado e uma vez a <xref:System.Activities.Bookmark> é criado e o fluxo de trabalho fica ocioso, a entrada do usuário é coletada e o indicador é retomado.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(class System.Activities.Bookmark bookmark, object value, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="bookmark">O indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <param name="timeout">O intervalo de tempo durante o qual o indicador deve ser retomado.</param>
        <summary>Inicia uma operação para retomar o indicador especificado, usando o valor especificado e o intervalo de tempo limite. O indicador a ser continuado é criado anteriormente por uma atividade dentro da instância do fluxo de trabalho.</summary>
        <returns>O resultado da operação de continuação do indicador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O resultado do indicador indica se a operação de retomada foi bem-sucedida ou falhou.  
  
   
  
## Examples  
 O exemplo a seguir cria um fluxo de trabalho que usa um `ReadLine` atividade cria um <xref:System.Activities.Bookmark>. O fluxo de trabalho é iniciado e uma vez a <xref:System.Activities.Bookmark> é criado e o fluxo de trabalho fica ocioso, a entrada do usuário é coletada e o indicador é retomado.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#25](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (string bookmarkName, object value, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(string bookmarkName, object value, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">O nome do indicador a ser retomado.</param>
        <param name="value">Um objeto é passado como um parâmetro para o método é chamado quando o indicador é retomado.</param>
        <param name="timeout">O intervalo de tempo durante o qual o indicador deve ser retomado.</param>
        <summary>Inicia uma operação para retomar o indicador com o nome especificado, usando o intervalo de tempo limite e o valor especificado. O indicador a ser continuado é criado anteriormente por uma atividade dentro da instância do fluxo de trabalho.</summary>
        <returns>O resultado da operação de continuação do indicador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O resultado do indicador indica se a operação de retomada foi bem-sucedida ou falhou.  
  
   
  
## Examples  
 O exemplo a seguir cria um fluxo de trabalho que usa um `ReadLine` atividade cria um <xref:System.Activities.Bookmark>. O fluxo de trabalho é iniciado e uma vez a <xref:System.Activities.Bookmark> é criado e o fluxo de trabalho fica ocioso, a entrada do usuário é coletada e o indicador é retomado.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX_WorkflowApplicationExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicia ou retoma a execução de uma instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame este método para iniciar a execução de uma instância de fluxo de trabalho criado recentemente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Run" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia ou retoma a execução de uma instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame este método para iniciar a execução de uma instância de fluxo de trabalho criado recentemente.  
  
 Se a operação de execução não for concluída dentro de 30 segundos, um <xref:System.TimeoutException> é gerada.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Quando o fluxo de trabalho for concluído, a saída a seguir são exibidas no console.  
  
```Output  
Starting the workflow.   
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Idle.   
Ending the workflow.   
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Completed  
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#9](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Run(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Chame este método para iniciar a execução de uma instância de fluxo de trabalho criado recentemente.  
  
 O intervalo no qual a operação de execução deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Inicia ou retoma a execução de uma instância de fluxo de trabalho usando o intervalo de tempo limite especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Observe que, ao contrário de <xref:System.Activities.WorkflowInvoker.Invoke%2A>, esse método atingirá o tempo limite somente se o fluxo de trabalho não for iniciado na quantidade especificada de tempo, e não é necessário para concluir o período de tempo especificado. A razão para isso é que <xref:System.Activities.WorkflowInvoker.Invoke%2A> executa o fluxo de trabalho de forma síncrona (bloquear o thread de host), enquanto <xref:System.Activities.WorkflowApplication.Run%2A> executa de forma assíncrona, somente o bloqueio do thread do host para a quantidade de tempo que leva para iniciar o fluxo de trabalho.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Quando o fluxo de trabalho for concluído, a saída a seguir são exibidas no console.  
  
```Output  
Starting the workflow.   
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Idle.   
Ending the workflow.   
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Completed  
Workflow 593976e8-558d-4989-94d6-50a14b34fd7b Unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#9](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsInstanceKeys">
      <MemberSignature Language="C#" Value="protected override bool SupportsInstanceKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsInstanceKeys" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.SupportsInstanceKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (Exception reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(class System.Exception reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para encerrar a instância de fluxo de trabalho.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando a exceção especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término da instância do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
 Por padrão, o <xref:System.Activities.WorkflowApplication.Terminate%2A> operação deve ser concluída em 30 segundos ou um <xref:System.TimeoutException> é gerada.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Terminate%2A> é chamado. Quando o fluxo de trabalho é encerrado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow e6b33409-f010-49f1-82ce-56f8baabe5e5 Terminated.  
Exception: System.ApplicationException  
Terminating the workflow.   
Workflow e6b33409-f010-49f1-82ce-56f8baabe5e5 unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#16](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para encerrar a instância de fluxo de trabalho.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando a mensagem de erro especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término da instância do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
 Por padrão, o <xref:System.Activities.WorkflowApplication.Terminate%2A> operação deve ser concluída em 30 segundos ou um <xref:System.TimeoutException> é gerada.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Terminate%2A> é chamado. Quando o fluxo de trabalho é encerrado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow f87c6f91-4fe4-40b9-b7cb-4f1bd071bf84 Terminated.   
Exception: System.Activities.WorkflowApplicationTerminatedException  
Terminating the workflow.   
Workflow f87c6f91-4fe4-40b9-b7cb-4f1bd071bf84 unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#18](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (Exception reason, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(class System.Exception reason, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para encerrar a instância de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual o <see cref="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" /> operação deve ser concluída antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando o intervalo de tempo limite e a exceção especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Terminate%2A> é chamado. Quando o fluxo de trabalho é encerrado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow de28efe5-9057-472b-8d95-899c249893c5 Terminated.  
Exception: System.ApplicationException  
Terminating the workflow.   
Workflow de28efe5-9057-472b-8d95-899c249893c5 unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#17](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string reason, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string reason, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="reason">O motivo para encerrar a instância de fluxo de trabalho.</param>
        <param name="timeout">O intervalo no qual o <see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" /> operação deve ser concluída antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Finaliza uma instância de fluxo de trabalho usando o intervalo de tempo limite e a mensagem de erro especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método agenda o término da instância do fluxo de trabalho. Para ser notificado quando o encerramento estiver concluído, use o <xref:System.Activities.WorkflowApplication.OnCompleted%2A> tratar.  
  
   
  
## Examples  
 O exemplo a seguir hospeda um fluxo de trabalho usando <xref:System.Activities.WorkflowApplication>. Um <xref:System.Activities.WorkflowApplication> instância é criada usando a definição de fluxo de trabalho especificado, os eventos de ciclo de vida de fluxo de trabalho desejado são tratados, e o fluxo de trabalho é invocado com uma chamada para <xref:System.Activities.WorkflowApplication.Run%2A>. Depois de iniciado o fluxo de trabalho, <xref:System.Activities.WorkflowApplication.Terminate%2A> é chamado. Quando o fluxo de trabalho é encerrado, a seguinte saída é exibida no console.  
  
```Output  
Starting the workflow.   
Workflow 2897d2ef-377e-4224-ae93-5c19b38f487c Terminated.   
Exception: System.Activities.WorkflowApplicationTerminatedException  
Terminating the workflow.   
Workflow 2897d2ef-377e-4224-ae93-5c19b38f487c unloaded.  
  
```  
  
 [!code-csharp[CFX_WorkflowApplicationExample#19](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unload">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Persiste e descarrega uma instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, a operação deve concluir em 30 segundos ou um <xref:System.TimeoutException> é gerada.  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Unload" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Persiste e descarrega uma instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, a operação deve concluir em 30 segundos ou um <xref:System.TimeoutException> é gerada.  
  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
   
  
## Examples  
 O exemplo de código a seguir é parte do [atividade NoPersistScope](~/docs/framework/windows-workflow-foundation/samples/nopersistscope-activity.md) exemplo. Neste exemplo, o fluxo de trabalho está ocioso e o aplicativo de host está aguardando a entrada do usuário. Se o usuário opta por descarregar, <xref:System.Activities.WorkflowApplication.Unload%2A> é chamado. Se for bem-sucedido, o fluxo de trabalho é mantido e descarregado da memória.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">O intervalo no qual a operação deve concluir antes da operação será cancelada e um <see cref="T:System.TimeoutException" /> é gerada.</param>
        <summary>Persistir e descarrega uma instância de fluxo de trabalho usando o intervalo de tempo limite especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a instância de fluxo de trabalho foi previamente carregada da persistência, o mesmo <xref:System.Runtime.DurableInstancing.InstanceStore> usado para carregar o fluxo de trabalho é usado para persistência. Se o fluxo de trabalho foi criado e tem ainda não foram persistido, então um <xref:System.Activities.WorkflowApplication.InstanceStore%2A> deve ser configurado antes de chamar este método ou outro um <xref:System.InvalidOperationException> é lançada quando este método é chamado.  
  
   
  
## Examples  
 O exemplo de código a seguir é parte do [atividade NoPersistScope](~/docs/framework/windows-workflow-foundation/samples/nopersistscope-activity.md) exemplo. Neste exemplo, o fluxo de trabalho está ocioso e o aplicativo de host está aguardando a entrada do usuário. Se o usuário opta por descarregar, <xref:System.Activities.WorkflowApplication.Unload%2A> é chamado. Se for bem-sucedido, o fluxo de trabalho é mantido e descarregado da memória.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationEventArgs&gt; Unloaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationEventArgs&gt; Unloaded" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Unloaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Action`1" /> que é invocado quando descarrega o fluxo de trabalho atual.</summary>
        <value>Uma ação que é invocada quando uma instância de fluxo de trabalho é descarregada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Verifica se o exemplo de código a seguir a <xref:System.Activities.WorkflowApplicationEventArgs> passado para o <xref:System.Activities.WorkflowApplication.Unloaded%2A> manipulador de um <xref:System.Activities.WorkflowApplication> instância e exibe o <xref:System.Activities.WorkflowApplicationEventArgs.InstanceId%2A> do fluxo de trabalho foi descarregado.  
  
 [!code-csharp[CFX_WorkflowApplicationExample#3](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
