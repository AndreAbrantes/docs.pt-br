<Type Name="Bookmark" FullName="System.Activities.Bookmark">
  <TypeSignature Language="C#" Value="public class Bookmark : IEquatable&lt;System.Activities.Bookmark&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Bookmark extends System.Object implements class System.IEquatable`1&lt;class System.Activities.Bookmark&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Bookmark" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Activities.Bookmark&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa um ponto em que um fluxo de trabalho ou uma atividade pode aguardar passivamente para ser retomado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando uma atividade cria um <xref:System.Activities.Bookmark>, ele se torna ocioso e aguarda o <xref:System.Activities.Bookmark> ser retomado. Se há outras atividades em paralelo com a atividade que criou o <xref:System.Activities.Bookmark>, serão agendados para execução.  
  
 Indicadores podem ser retomados pelo aplicativo host usando uma da <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> sobrecargas.  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]indicadores, consulte [usando WorkflowInvoker e WorkflowApplication](~/docs/framework/windows-workflow-foundation/using-workflowinvoker-and-workflowapplication.md), [indicadores](~/docs/framework/windows-workflow-foundation/bookmarks.md)e o [indicadores &#91; Exemplos de WF &#93; ](~/docs/framework/windows-workflow-foundation/samples/bookmarks.md) e [espera para atividades de entrada &#91; Exemplos de WF &#93; ](~/docs/framework/windows-workflow-foundation/samples/wait-for-input-activity.md) exemplos.  
  
   
  
## Examples  
 No exemplo a seguir, um `ReadLine` atividade é criada. Quando executada, a atividade de `ReadLine` cria <xref:System.Activities.Bookmark>, registra um retorno de chamada, e espera em <xref:System.Activities.Bookmark> a ser continuado. Quando é continuada, a atividade de `ReadLine` atribui os dados que foram passados com <xref:System.Activities.Bookmark> ao seu argumento de <xref:System.Activities.Activity%601.Result%2A> .  
  
```csharp  
public sealed class ReadLine : NativeActivity<string>  
{  
    [RequiredArgument]  
    public  InArgument<string> BookmarkName { get; set; }  
  
    protected override void Execute(NativeActivityContext context)  
    {  
        // Create a Bookmark and wait for it to be resumed.  
        context.CreateBookmark(BookmarkName.Get(context),   
            new BookmarkCallback(OnResumeBookmark));  
    }  
  
    // NativeActivity derived activities that do asynchronous operations by calling   
    // one of the CreateBookmark overloads defined on System.Activities.NativeActivityContext   
    // must override the CanInduceIdle property and return true.  
    protected override bool CanInduceIdle  
    {  
        get { return true; }  
    }  
  
    public void OnResumeBookmark(NativeActivityContext context, Bookmark bookmark, object obj)  
    {  
        // When the Bookmark is resumed, assign its value to  
        // the Result argument.  
        Result.Set(context, (string)obj);  
    }  
}  
```  
  
 No exemplo a seguir, um fluxo de trabalho é criado que usa o `ReadLine` atividade para obter o nome do usuário e exibi-lo para a janela do console. O aplicativo host executa o trabalho real de coletar entrada e passá-lo para o fluxo de trabalho continuando <xref:System.Activities.Bookmark>.  
  
```csharp  
Variable<string> name = new Variable<string>  
{  
    Name = "name"  
};  
  
Activity wf = new Sequence  
{  
    Variables =  
    {  
        name  
    },  
    Activities =  
    {  
        new WriteLine()  
        {  
            Text = "What is your name?"  
        },  
        new ReadLine()  
        {  
            BookmarkName = "UserName",  
            Result = name  
        },  
        new WriteLine()  
        {  
            Text = new InArgument<string>((env) => "Hello, " + name.Get(env))  
        }  
    }  
};  
  
AutoResetEvent syncEvent = new AutoResetEvent(false);  
  
// Create the WorkflowApplication using the desired  
// workflow definition.  
WorkflowApplication wfApp = new WorkflowApplication(wf);  
  
// Handle the desired lifecycle events.  
wfApp.Completed = delegate(WorkflowApplicationCompletedEventArgs e)  
{  
    // Signal the host that the workflow is complete.  
    syncEvent.Set();  
};  
  
// Start the workflow.  
wfApp.Run();  
  
// Collect the user's name and resume the bookmark.  
// Bookmark resumption only occurs when the workflow  
// is idle. If a call to ResumeBookmark is made and the workflow  
// is not idle, ResumeBookmark blocks until the workflow becomes  
// idle before resuming the bookmark.  
wfApp.ResumeBookmark("UserName", Console.ReadLine());  
  
// Wait for Completed to arrive and signal that  
// the workflow is complete.  
syncEvent.WaitOne();  
```  
  
 Quando a atividade de `ReadLine` é executada, cria <xref:System.Activities.Bookmark> chamado `UserName` e espera no indexador a ser continuado. O host reúne os dados desejados e depois <xref:System.Activities.Bookmark>. Retoma de fluxo de trabalho, exibe o nome, e então usa. Observe que nenhum código de sincronização é necessário em relação ao indexador continuar. <xref:System.Activities.Bookmark> só pode ser que quando o fluxo de trabalho estiver ocioso, e se o fluxo de trabalho não estiver ocioso, a chamada para blocos de <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> até que o fluxo de trabalho se torne ocioso.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bookmark (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Bookmark.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Um nome que identifica o indicador.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Activities.Bookmark" /> classe usando o nome especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Activities.Bookmark other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Activities.Bookmark other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Bookmark.Equals(System.Activities.Bookmark)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Activities.Bookmark" />
      </Parameters>
      <Docs>
        <param name="other">O indicador a ser comparado.</param>
        <summary>Determina se o atual <see cref="T:System.Activities.Bookmark" /> e especificado <see cref="T:System.Activities.Bookmark" /> se referirem ao mesmo ponto de continuação em um fluxo de trabalho.</summary>
        <returns>
          <see langword="true" />Se o <see cref="T:System.Activities.Bookmark" /> objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Bookmark.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">O objeto a ser comparado.</param>
        <summary>Determina se o atual <see cref="T:System.Activities.Bookmark" /> e consulte o objeto especificado para o mesmo ponto de continuação em um fluxo de trabalho.</summary>
        <returns>
          <see langword="true" />Se o <see cref="T:System.Activities.Bookmark" /> objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Bookmark.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um identificador exclusivo para este <see cref="T:System.Activities.Bookmark" /> instância.</summary>
        <returns>O identificador exclusivo deste <see cref="T:System.Activities.Bookmark" /> instância.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Bookmark.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome do indicador.</summary>
        <value>O nome do indicador.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Bookmark.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o nome do indicador para um indicador de nome ou a ID de indicador para um indicador não nomeado.</summary>
        <returns>O nome do indicador ou ID.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
