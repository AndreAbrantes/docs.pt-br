<Type Name="ManagementKeyAttribute" FullName="System.Management.Instrumentation.ManagementKeyAttribute">
  <TypeSignature Language="C#" Value="public sealed class ManagementKeyAttribute : System.Management.Instrumentation.ManagementMemberAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementKeyAttribute extends System.Management.Instrumentation.ManagementMemberAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementKeyAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Instrumentation.ManagementMemberAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>O atributo ManagementKey identifica as propriedades de chave de uma classe WMI.  
  
 Observação: as bibliotecas do .NET no WMI agora são consideradas em estado final e nenhum desenvolvimento, melhorias ou atualizações adicionais estarão disponíveis para problemas não relacionados à segurança que afetarem essas bibliotecas. O [MI APIs](https://msdn.microsoft.com/en-us/library/jj152383%28v=vs.80%29.aspx) deve ser usado para todos os novos desenvolvimentos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A menos que uma classe WMI é um singleton, ele pode ter várias instâncias correspondentes. Os clientes da classe devem ser capazes de identificar a instância específica estão interessados. Assim, como um gravador de provedor, você deve escolher uma propriedade ou um conjunto de propriedades que identificam exclusivamente uma instância de cada uma de suas classes WMI. Você usa o <xref:System.Management.Instrumentation.ManagementKeyAttribute> atributo para identificar as propriedades de chave. Propriedades identificadas como chaves têm o mesmo comportamento de tempo de execução como propriedades somente leitura indicado pelo <xref:System.Management.Instrumentation.ManagementProbeAttribute> atributo.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o <xref:System.Management.Instrumentation.ManagementKeyAttribute> para marcar um campo como uma propriedade de chave de uma classe WMI.  
  
```csharp  
[ManagementKey]  
public int id;  
```  
  
 O exemplo a seguir mostra como usar o <xref:System.Management.Instrumentation.ManagementKeyAttribute> atributo para marcar uma propriedade de chave de uma classe WMI.  
  
```csharp  
// Use the ManagementKey attribute to specify that this property   
// is used as the key identifier of this class and for the WMI  
// instances of this class.  This property must be unique for each  
// class instance.  
[ManagementKey]  
public int Id  
{  
    get { return System.Diagnostics.Process.GetCurrentProcess().Id; }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementKeyAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementKeyAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Management.ManagementKeyAttribute" />. Esse é o construtor padrão.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
