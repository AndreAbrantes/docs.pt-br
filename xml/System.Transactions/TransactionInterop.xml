<Type Name="TransactionInterop" FullName="System.Transactions.TransactionInterop">
  <TypeSignature Language="C#" Value="public static class TransactionInterop" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TransactionInterop extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.TransactionInterop" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Facilita a interação entre <see cref="N:System.Transactions" /> e componentes que foram escritos previamente para interagir com o MSDTC, COM+, ou <see cref="N:System.EnterpriseServices" />. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe fornece métodos de propagação de transações. Para obter mais informações sobre como esse processo funciona, consulte [propagação de transação](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/b09541e6-4baf-4e37-b879-62884fbb0969.asp).  
  
 Usando os métodos fornecidos por essa classe, você pode participar de dois tipos de propagação de transações, importação e exportação (modelo de push) e transmissor/receptor (modelo de pull).  
  
 A propagação de importação/exportação (modelo de push) envolve estas etapas  
  
1.  No computador remoto, obter o "locais" do Gerenciador de transações da máquina ao chamar o <xref:System.Transactions.TransactionInterop.GetWhereabouts%2A> método. Em seguida, você pode armazenar essa informação no computador cliente para uso futuro.  
  
2.  Enviar os dados que contém os locais para o computador cliente usando qualquer método preferencial  
  
3.  No computador cliente, use os locais para "Exportar" a transação para a máquina remota e gerar uma transação de "cookies".  Isso é feito chamando <xref:System.Transactions.TransactionInterop.GetExportCookie%2A> e passar na localização do computador remoto.  
  
4.  Enviar os dados que contém a transação "cookie" para o computador remoto usando qualquer método preferencial  
  
5.  No computador remoto, use a transação "cookie" para obter um clone da transação de cliente ao chamar o <xref:System.Transactions.TransactionInterop.GetTransactionFromExportCookie%2A> método.  
  
6.  No computador remoto, use a transação de clone para inscrever-se o Gerenciador de recursos usando o <xref:System.Transactions.Transaction.EnlistVolatile%2A> ou <xref:System.Transactions.Transaction.EnlistDurable%2A> métodos de <xref:System.Transactions.Transaction> classe.  
  
 A propagação do transmissor/receptor (modelo de pull) envolve estas etapas  
  
-   No computador cliente, usando a transação gera um correspondente "token de propagação" chamando<xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>  
  
-   Enviar os dados que contém o "token de propagação" da transação para o computador remoto usando qualquer método preferencial  
  
-   No computador remoto, use o token de propagação"" para obter um clone da transação do cliente por meio da chamada<xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A>  
  
 O modelo de transmissor/receptor fornece melhor desempenho em cenários onde o token de transação é enviado para um computador remoto, mas o computador remoto não pode usá-lo para obter a transação.  Isso ocorre porque a transação não é propagada até <xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A> é chamado. Outra vantagem é que o token de propagação pode ser enviado para qualquer computador remoto, enquanto o cookie de exportação pode ser usado somente no computador que forneceu os locais.  
  
 No entanto, você também deve observar que os locais de gerenciadores de transações remoto são encapsulados em todos os tokens de propagação, tornando-os maiores do que os cookies de transação correspondente do modelo de importação/exportação.  
  
 **Observação** esse tipo usa <xref:System.Security.Permissions.SecurityAction.LinkDemand> impedir que ele está sendo chamado de código não confiável; no entanto, apenas o chamador imediato é necessário ter o `FullTrust` conjunto de permissões.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetDtcTransaction">
      <MemberSignature Language="C#" Value="public static System.Transactions.IDtcTransaction GetDtcTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Transactions.IDtcTransaction GetDtcTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.IDtcTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Um <see cref="T:System.Transactions.Transaction" /> instância a ser empacotado.</param>
        <summary>Obtém um <see cref="T:System.Transactions.IDtcTransaction" /> instância que representa um <see cref="T:System.Transactions.Transaction" />.</summary>
        <returns>Um <see cref="T:System.Transactions.IDtcTransaction" /> instância que representa um <see cref="T:System.Transactions.Transaction" />.  O <see cref="T:System.Transactions.IDtcTransaction" /> instância é compatível com o formulário não gerenciado de [ITransaction](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) usado pelo MSDTC e com a forma do gerenciado de <see cref="T:System.EnterpriseServices.ITransaction" /> usado pelo <see cref="N:System.EnterpriseServices" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportCookie">
      <MemberSignature Language="C#" Value="public static byte[] GetExportCookie (System.Transactions.Transaction transaction, byte[] exportCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetExportCookie(class System.Transactions.Transaction transaction, unsigned int8[] exportCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
        <Parameter Name="whereabouts" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="transaction">O objeto <see cref="T:System.Transactions.Transaction" /> que terá marshal realizado.</param>
        <param name="exportCookie">To be added.</param>
        <summary>Transforma um objeto de transação em um cookie de transação de exportação.</summary>
        <returns>Um cookie de transação de exportação representando o objeto <see cref="T:System.Transactions.Transaction" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame este método se você quiser exportar uma transação. O `transaction` que é passado junto é empacotado em um cookie de transação. Em seguida, você pode enviar o cookie de transação para o processo de destino. Isso é chamado como propagar a transação entre processos ou sistemas. A propagação é considerada um modelo de push onde a transação local é enviada por push para o destino.  Portanto, as informações contidas em `whereabouts` deve descrever o Gerenciador de transações de destino.  
  
 Para obter mais informações sobre modelos de propagação diferentes, consulte a seção Comentários da classe <xref:System.Transactions.TransactionInterop>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransactionFromDtcTransaction">
      <MemberSignature Language="C#" Value="public static System.Transactions.Transaction GetTransactionFromDtcTransaction (System.Transactions.IDtcTransaction dtc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Transactions.Transaction GetTransactionFromDtcTransaction(class System.Transactions.IDtcTransaction dtc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionNative" Type="System.Transactions.IDtcTransaction" />
      </Parameters>
      <Docs>
        <param name="dtc">To be added.</param>
        <summary>Gera um <see cref="T:System.Transactions.Transaction" /> de um <see cref="T:System.Transactions.IDtcTransaction" />.</summary>
        <returns>Um <see cref="T:System.Transactions.Transaction" /> instância que representa o determinado <see cref="T:System.Transactions.IDtcTransaction" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `transactionNative` é compatível com o formulário não gerenciado de [ITransaction](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) usado pelo MSDTC e com a forma do gerenciado de <xref:System.EnterpriseServices.ITransaction> usado pelo <xref:System.EnterpriseServices>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransactionFromExportCookie">
      <MemberSignature Language="C#" Value="public static System.Transactions.Transaction GetTransactionFromExportCookie (byte[] exportCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Transactions.Transaction GetTransactionFromExportCookie(unsigned int8[] exportCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exportCookie">To be added.</param>
        <summary>Gera um <see cref="T:System.Transactions.Transaction" /> especificado um cookie de exportação.</summary>
        <returns>Um <see cref="T:System.Transactions.Transaction" /> do cookie de exportação especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter mais informações sobre modelos de propagação diferentes, consulte a seção Comentários da classe <xref:System.Transactions.TransactionInterop>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransactionFromTransmitterPropagationToken">
      <MemberSignature Language="C#" Value="public static System.Transactions.Transaction GetTransactionFromTransmitterPropagationToken (byte[] token);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Transactions.Transaction GetTransactionFromTransmitterPropagationToken(unsigned int8[] token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propagationToken" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary>Gera uma instância <see cref="T:System.Transactions.Transaction" /> do token de propagação do transmissor especificado.</summary>
        <returns>Um <see cref="T:System.Transactions.Transaction" /> do token de propagação do transmissor especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método, junto com o <xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A> método, fornece a funcionalidade de propagação de "pull", em que a transação "retirada" do computador remoto quando este método é chamado para descompactar a transação.  
  
 Para obter mais informações sobre modelos de propagação diferentes, consulte a seção Comentários da classe <xref:System.Transactions.TransactionInterop>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionManagerCommunicationException">A desserialização de uma transação falha porque o Gerenciador de transações não pode ser contatado. Isso pode ser causado por configurações de firewall ou de segurança de rede.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTransmitterPropagationToken">
      <MemberSignature Language="C#" Value="public static byte[] GetTransmitterPropagationToken (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetTransmitterPropagationToken(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Uma transação a ser empacotado em um token de propagação.</param>
        <summary>Gera um token de propagação para o <see cref="T:System.Transactions.Transaction" /> especificado.</summary>
        <returns>Esse método, junto com o método <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />, fornece a funcionalidade de propagação do transmissor/receptor, em que a transação é "puxada" do computador remoto quando o último é chamado para desfazer marshal da transação.  
  
 Para obter mais informações sobre modelos de propagação diferente, consulte <see cref="T:System.Transactions.TransactionInterop" /> classe.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWhereabouts">
      <MemberSignature Language="C#" Value="public static byte[] GetWhereabouts ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetWhereabouts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionInterop.GetWhereabouts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém a localização do Gerenciador de transações distribuídas que <see cref="N:System.Transactions" /> usa.</summary>
        <returns>A localização do Gerenciador de transações distribuídas que <see cref="N:System.Transactions" /> usa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A localização contém um endereço que descreve o local de um Gerenciador de transações. Isso permite que dois gerenciadores de transações se comuniquem entre si e, portanto, propaguem uma transação de um sistema para outro. As informações retornadas por esse método podem ser usadas para fornecer informações de local para a propagação de transação de modelo de push com o <xref:System.Transactions.TransactionInterop.GetExportCookie%2A> método.  
  
 Para obter mais informações sobre modelos de propagação diferentes, consulte a seção Comentários da classe <xref:System.Transactions.TransactionInterop>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromoterTypeDtc">
      <MemberSignature Language="C#" Value="public static readonly Guid PromoterTypeDtc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Guid PromoterTypeDtc" />
      <MemberSignature Language="DocId" Value="F:System.Transactions.TransactionInterop.PromoterTypeDtc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>O tipo de processador de transação distribuída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse valor é usado para o `Transaction.PromoterType` propriedade se a transação está ou será promovida para MSDTC e o `Transaction.GetPromotedToken` método retornará um token de propagação de transações do MSDTC para o `byte[]` resultados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
