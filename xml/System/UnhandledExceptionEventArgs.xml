<Type Name="UnhandledExceptionEventArgs" FullName="System.UnhandledExceptionEventArgs">
  <TypeSignature Language="C#" Value="public class UnhandledExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit UnhandledExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.UnhandledExceptionEventArgs" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece dados para o evento gerado quando há uma exceção sem tratamento em um domínio de aplicativo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.UnhandledExceptionEventArgs>fornece acesso ao objeto de exceção e um sinalizador que indica se o common language runtime está sendo encerrado. O <xref:System.UnhandledExceptionEventArgs> é um dos parâmetros passados para <xref:System.UnhandledExceptionEventHandler> para o <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> evento.  
  
 Para obter mais informações sobre delegados de manipulador de eventos, consulte [eventos](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object exception, bool isTerminating) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exception" Type="System.Object" />
        <Parameter Name="isTerminating" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="exception">A exceção não tratada.</param>
        <param name="isTerminating">
          <see langword="true" /> se o tempo de execução estiver sendo encerrado; caso contrário, <see langword="false" />.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.UnhandledExceptionEventArgs" /> classe com o objeto de exceção e um sinalizador de encerramento de tempo de execução de linguagem comum.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionObject">
      <MemberSignature Language="C#" Value="public object ExceptionObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ExceptionObject" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.ExceptionObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto de exceção sem tratamento.</summary>
        <value>O objeto de exceção sem tratamento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade retorna um objeto do tipo <xref:System.Object> em vez de um derivado de <xref:System.Exception>. Embora o Common Language Specification requer que todos os tipos de exceção derivam <xref:System.Exception>, é possível para métodos lançam exceções com objetos que não é derivados de <xref:System.Exception>. Você pode fazer o seguinte ao trabalhar com esta exceção:  
  
-   Aplicar o <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> atributo com um <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=nameWithType> valor `true` para o assembly que contém o manipulador de eventos. Isso conclui todas as exceções não derivadas a <xref:System.Exception> classe em um <xref:System.Runtime.CompilerServices.RuntimeWrappedException> objeto. Você pode, em seguida, com segurança cast (em c#) ou converta (no Visual Basic), o objeto retornado por essa propriedade como um <xref:System.Exception> de objeto e recuperar o objeto de exceção original do <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=nameWithType> propriedade. Observe que alguns compiladores, como os compiladores c# e Visual Basic, automaticamente se aplicam a esse atributo.  
  
-   Converter o objeto retornado por essa propriedade para um <xref:System.Exception> objeto.  
  
   
  
## Examples  
 O exemplo a seguir demonstra o <xref:System.AppDomain.UnhandledException> evento. Define um manipulador de eventos, `MyHandler`, que é invocado sempre que é gerada uma exceção sem tratamento no domínio de aplicativo padrão. Em seguida, gera duas exceções. A primeira é tratada por um **try/catch** bloco. O segundo é sem tratamento e invoca o `MyHandle` rotina antes do encerramento do aplicativo.  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.UnhandledExceptionEventArgs.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica se o Common Language Runtime está sendo encerrado.</summary>
        <value>
          <see langword="true" /> se o tempo de execução estiver sendo encerrado; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Começando com o .NET Framework versão 2.0, essa propriedade retorna `true` para a maioria sem tratamento de exceções, a menos que um sinalizador de compatibilidade do aplicativo é usado para reverter para o comportamento de versões 1.0 e 1.1. O motivo é que mais exceções sem tratamento em threads, inclusive threads do pool, têm permissão para continuar, naturalmente, o que normalmente resulta no encerramento do aplicativo. Para obter mais informações, incluindo uma lista de casos em que não encerra o tempo de execução, consulte [exceções em Threads gerenciados](~/docs/standard/threading/exceptions-in-managed-threads.md).  
  
## <a name="version-information"></a>Informações de versão  
 O seguinte se aplica a versões do .NET Framework 1.0 e 1.1: esta propriedade retorna `true` quando uma exceção é recebida no, mas não manipulada pelo thread principal do aplicativo. Essa propriedade também retorna `true` se um thread não gerenciado está executando código gerenciado e recebe uma exceção sem tratamento. Por fim, essa propriedade retorna `false` para threads de pool e threads gerenciados criados por um aplicativo, porque as versões 1.0 e 1.1 capturem exceções sem tratamento em tais threads e ignorá-las.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
