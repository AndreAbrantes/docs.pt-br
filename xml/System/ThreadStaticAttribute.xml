<Type Name="ThreadStaticAttribute" FullName="System.ThreadStaticAttribute">
  <TypeSignature Language="C#" Value="public class ThreadStaticAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ThreadStaticAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ThreadStaticAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indica se o valor de um campo estático é exclusivo para cada thread.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um `static` campo marcado com <xref:System.ThreadStaticAttribute> não é compartilhado entre threads. Cada thread em execução tem uma instância separada do campo e independentemente define e obtém os valores desse campo. Se o campo for acessado em um thread diferente, ele conterá um valor diferente.  
  
 Observe que, além de aplicar o <xref:System.ThreadStaticAttribute> atributo a um campo, você também deve definir como uma `static` campo (c#) ou um `Shared` campo (no Visual Basic).  
  
> [!NOTE]
>  Não especifique valores iniciais para os campos marcados com `ThreadStaticAttribute`, pois tal inicialização ocorre apenas uma vez, quando o construtor da classe executa e, portanto, afeta apenas um thread. Se você não especificar um valor inicial, você pode contar com o campo que está sendo inicializado para seu valor padrão se ele é um tipo de valor, ou para `null` se ele é um tipo de referência.  
  
 Use esse atributo como está e não derivado dele.  
  
 Para obter mais informações sobre o uso de atributos, consulte [atributos](~/docs/standard/attributes/index.md).  
  
   
  
## Examples  
 O exemplo a seguir instancia um gerador de número aleatório, cria dez threads além do thread principal e, em seguida, gera números aleatórios de dois milhões em cada thread. Ele usa o <xref:System.ThreadStaticAttribute> atributo para calcular a soma e a contagem de números aleatórios por thread. Ele também define dois campos adicionais por thread, `previous` e `abnormal`, que permite que ele detectar a corrupção do gerador de número aleatório.  
  
 [!code-csharp[System.ThreadStaticAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threadstaticattribute/cs/threadsafe2a.cs#1)]
 [!code-vb[System.ThreadStaticAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threadstaticattribute/vb/threadsafe2a.vb#1)]  
  
 O exemplo usa o `lock` instrução em c# e o `SyncLock` construir no Visual Basic para sincronizar o acesso para o gerador de número aleatório. Isso impede a corrupção do gerador de número aleatório, que normalmente resulta em seu retornando um valor de zero para todas as chamadas subsequentes.  
  
 O exemplo também usa o <xref:System.Threading.CountdownEvent> classe para garantir que cada thread terminar de gerar números aleatórios antes de exibir o número total de chamadas. Caso contrário, se o thread principal conclui a execução antes dos threads adicionais que ele gera, ele exibe um valor para o número total de chamadas de método.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ThreadStaticAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ThreadStaticAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ThreadStaticAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
