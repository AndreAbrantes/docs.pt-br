<Type Name="AspNetWebSocket" FullName="System.Web.WebSockets.AspNetWebSocket">
  <TypeSignature Language="C#" Value="public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AspNetWebSocket extends System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="DocId" Value="T:System.Web.WebSockets.AspNetWebSocket" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebSockets.WebSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa uma conexão full duplex em tempo real entre um servidor Web e um cliente em um aplicativo ASP.NET.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancela as operações de e/s pendentes no <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> do objeto e define o estado do objeto para que ele não pode ser usado para iniciar as operações de e/s adicionais.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Após o <xref:System.Web.WebSockets.AspNetWebSocket.Abort%2A> método foi chamado, você ainda poderá acessar propriedades e métodos que não envolvem a operações de e/s.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">O código de status da operação de fechamento.</param>
        <param name="statusDescription">A mensagem de status da operação de fechamento.</param>
        <param name="cancellationToken">O objeto que cancela uma operação pendente.</param>
        <summary>Envia uma mensagem assíncrona para um cliente para fechar a conexão. Se o servidor inicia a solicitação para fechar a conexão, o método espera para confirmar a solicitação antes de retornar o cliente.</summary>
        <returns>Uma referência para a operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> e <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> métodos para solicitações iniciadas pelo cliente e servidor iniciado fechar um <xref:System.Web.WebSockets.AspNetWebSocket> conexão. Os dois métodos de tratam as solicitações iniciadas pelo cliente da mesma maneira: depois que o cliente envia uma mensagem para o servidor para fechar a conexão, o servidor chama um dos métodos a seguir envia uma confirmação para o cliente e, em seguida, o método retorna.  
  
 Para as solicitações iniciadas pelo servidor, os dois métodos funcionam de forma diferente. O <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> método envia uma mensagem para o cliente para fechar a conexão, aguarda uma resposta e, em seguida, retorna. O servidor não espera por dados adicionais enviados pelo cliente. Em contraste, o <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> método envia uma mensagem para o cliente para fechar a conexão e retorna sem esperar por uma resposta. Depois que o método retorna, você pode chamar o <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> método e manipular dados adicionais ou a confirmação de que o cliente envia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto foi descartado anteriormente.</exception>
        <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto está em um estado anulado.  
  
 -ou-  
  
 Operações de enviadas não estão disponíveis.  
  
 -ou-  
  
 Operações de recebimento não estão disponíveis.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseOutputAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseOutputAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">O código de status da operação de fechamento.</param>
        <param name="statusDescription">A mensagem de status da operação de fechamento.</param>
        <param name="cancellationToken">O objeto que cancela uma operação pendente.</param>
        <summary>Envia uma mensagem assíncrona para um cliente para fechar a conexão. Se o servidor inicia a solicitação para fechar a conexão, o método retornará sem aguardar uma resposta.</summary>
        <returns>Uma referência para a operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> e <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> métodos para solicitações iniciadas pelo cliente e servidor iniciado fechar um <xref:System.Web.WebSockets.AspNetWebSocket> conexão. Os dois métodos de tratam as solicitações iniciadas pelo cliente da mesma maneira: depois que o cliente envia uma mensagem para o servidor para fechar a conexão, o servidor chama um dos métodos a seguir envia uma confirmação para o cliente e, em seguida, o método retorna.  
  
 Para as solicitações iniciadas pelo servidor, os dois métodos funcionam de forma diferente. O <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> método envia uma mensagem para o cliente para fechar a conexão, aguarda uma resposta e, em seguida, retorna. O servidor não espera por dados adicionais enviados pelo cliente. Em contraste, o <xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> método envia uma mensagem para o cliente para fechar a conexão e retorna sem esperar por uma resposta. Depois que o método retorna, você pode chamar o <xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A> método e manipular dados adicionais ou a confirmação de que o cliente envia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado anteriormente.</exception>
        <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto está em um estado anulado.  
  
 -ou-  
  
 Operações de enviadas não estão disponíveis.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatus">
      <MemberSignature Language="C#" Value="public override Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um código de status que indica por que um <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto foi fechado.</summary>
        <value>O código de status.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatusDescription">
      <MemberSignature Language="C#" Value="public override string CloseStatusDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseStatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma mensagem de status que explica por que um <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto foi fechado.</summary>
        <value>A mensagem de status.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados por um <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET chama automaticamente o <xref:System.Web.WebSockets.AspNetWebSocket.Dispose%2A> método em um <xref:System.Web.WebSockets.AspNetWebSocket> objeto liberar quaisquer recursos que permanecem após a seu código em execução.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync (ArraySegment&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">A matriz que contém os dados da mensagem.</param>
        <param name="cancellationToken">O objeto que cancela uma operação pendente.</param>
        <summary>Recebe um fragmento de mensagem única de um cliente remoto.</summary>
        <returns>Uma referência à tarefa de recebimento de uma mensagem.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto foi descartado anteriormente.</exception>
        <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto está em um estado anulado.  
  
 -ou-  
  
 Operações de recebimento não estão disponíveis.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task SendAsync (ArraySegment&lt;byte&gt; buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task SendAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="messageType" Type="System.Net.WebSockets.WebSocketMessageType" />
        <Parameter Name="endOfMessage" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">A matriz que contém os dados da mensagem.</param>
        <param name="messageType">O tipo de mensagem.</param>
        <param name="endOfMessage">
          <see langword="true" />para indicar que um fragmento é o final de uma mensagem de conclusão. Caso contrário, <see langword="false" />.</param>
        <param name="cancellationToken">O objeto que cancela uma operação pendente.</param>
        <summary>Envia um fragmento de mensagem única para um cliente remoto.</summary>
        <returns>Uma referência para a tarefa de envio de mensagem.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> o objeto é descartado.</exception>
        <exception cref="T:System.InvalidOperationException">O <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto está em um estado anulado.  
  
 -ou-  
  
 Operações de enviadas não estão disponíveis.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Net.WebSockets.WebSocketState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.WebSockets.WebSocketState State" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebSockets.WebSocketState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica o estado aberto ou fechado de um <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> objeto.</summary>
        <value>O estado atual.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado anteriormente.</exception>
      </Docs>
    </Member>
    <Member MemberName="SubProtocol">
      <MemberSignature Language="C#" Value="public override string SubProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.SubProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome de um protocolo específico do aplicativo que um cliente remoto e um servidor podem usar para trocar dados por um <see cref="T:System.Web.WebSockets.AspNetWebSocket" /> conexão.</summary>
        <value>O nome do protocolo.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado anteriormente.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
