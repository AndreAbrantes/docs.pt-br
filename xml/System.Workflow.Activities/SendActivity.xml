<Type Name="SendActivity" FullName="System.Workflow.Activities.SendActivity">
  <TypeSignature Language="C#" Value="public sealed class SendActivity : System.Workflow.ComponentModel.Activity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SendActivity extends System.Workflow.ComponentModel.Activity" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Activities.SendActivity" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.Activity</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer(typeof(System.Workflow.Activities.SendActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Workflow.Activities.SendActivity), "Design.Resources.SendActivity.png")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.Activities.SendActivityValidator))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Atividade do cliente que modela a chamada síncrona de uma operação de serviço do Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 O <xref:System.Workflow.Activities.SendActivity> atividade permite participar de uma conversa com um [!INCLUDE[indigo2](~/includes/indigo2-md.md)] de serviço usando um padrão de troca de mensagens predefinidas.  
  
> [!NOTE]
>  O <xref:System.Workflow.Activities.SendActivity> é uma atividade de bloqueio, que significa que a execução do fluxo de trabalho será bloqueada até que a atividade de execução é concluída.  
  
 Os padrões de troca de mensagens com suporte a <xref:System.Workflow.Activities.SendActivity> atividade incluem:  
  
-   Mensagem de envio unidirecional  
  
     O <xref:System.Workflow.Activities.SendActivity> atividade envia uma mensagem, mas não espera uma resposta do serviço.  
  
-   Enviar solicitação - resposta de recebimento  
  
     O <xref:System.Workflow.Activities.SendActivity> atividade envia uma mensagem e aguarda até que uma resposta seja recebida do serviço.  
  
-   Enviar solicitação - falha de recebimento  
  
     O <xref:System.Workflow.Activities.SendActivity> atividade envia uma mensagem e aguarda até que uma resposta ou a falha é recebida do serviço. Durante a execução, a atividade send gera todas as falhas que foram recebidas do servidor. <xref:System.Workflow.ComponentModel.FaultHandlerActivity>atividades podem ser usadas para tratar as falhas no fluxo de trabalho cliente.  
  
> [!NOTE]
>  Essa atividade faz parte de [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]. Para a atividade equivalente em [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], consulte <xref:System.ServiceModel.Activities.Send>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.Activities.SendActivity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.Activities.SendActivity> construtor normalmente é chamado de arquivo code-beside criado pelo designer de fluxo de trabalho.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.Activities.SendActivity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.Activities.SendActivity> construtor normalmente é chamado de arquivo code-beside criado pelo designer de fluxo de trabalho.  
  
   
  
## Examples  
 O exemplo a seguir mostra como criar uma nova instância do <xref:System.Workflow.Activities.SendActivity> classe.  Este exemplo foi adaptado a `Conversations` amostra do SDK.  
  
 [!code-csharp[SendActivity#16](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendActivity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O valor atribuído à <see cref="P:System.Workflow.ComponentModel.Activity.Name" /> quando a atividade é inicializada.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Workflow.Activities.SendActivity" /> classe com especificado <see langword="name" /> propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.Activities.SendActivity> construtor normalmente é chamado de arquivo code-beside criado pelo designer de fluxo de trabalho.  
  
   
  
## Examples  
 O exemplo a seguir mostra como criar uma nova instância do <xref:System.Workflow.Activities.SendActivity> classe.  
  
 [!code-csharp[SendActivity#17](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterResponse">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; AfterResponse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Activities.SendActivityEventArgs&gt; AfterResponse" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Activities.SendActivity.AfterResponse" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre depois que a resposta foi recebida do serviço.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este manipulador de eventos associado ao evento pode ser usado para ler o valor de retorno da operação de serviço invocada.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o `AfterResponse` evento.  
  
 [!code-csharp[SendActivity#2](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AfterResponseEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty AfterResponseEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty AfterResponseEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.AfterResponseEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que tem como destino o <see cref="E:System.Workflow.Activities.SendActivity.AfterResponse" /> evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade de evento de dependência pode ser usada para associar a atividade de envio <xref:System.Workflow.Activities.SendActivity.AfterResponse> eventos a um manipulador de evento público da classe de fluxo de trabalho.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSend">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt; BeforeSend;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Activities.SendActivityEventArgs&gt; BeforeSend" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Activities.SendActivity.BeforeSend" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Activities.SendActivityEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre antes da atividade <see cref="T:System.Workflow.Activities.SendActivity" /> enviar a mensagem para o serviço.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este manipulador de eventos associado ao evento pode ser usado para definir os valores de parâmetro para a operação de serviço que está sendo invocado.  
  
> [!NOTE]
>  O contexto de um <xref:System.Workflow.Activities.SendActivity> não pode ser definida neste manipulador de eventos.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o `BeforeSend` evento. Este exemplo foi adaptado a `Conversations` amostra do SDK.  
  
 [!code-csharp[SendActivity#3](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty BeforeSendEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty BeforeSendEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.BeforeSendEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que tem como destino o <see cref="E:System.Workflow.Activities.SendActivity.BeforeSend" /> evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade de evento de dependência pode ser usada para associar a atividade de envio <xref:System.Workflow.Activities.SendActivity.BeforeSend> eventos a um manipulador de evento público da classe de fluxo de trabalho.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelToken">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.ChannelToken ChannelToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Activities.ChannelToken ChannelToken" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.ChannelToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.ChannelToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Workflow.Activities.ChannelToken" />usado pelo <see cref="T:System.Workflow.Activities.SendActivity" /> para associar-se com um canal do cliente.</summary>
        <value>Um <see cref="T:System.Workflow.Activities.ChannelToken" /> definindo um cliente de canal que um <see cref="T:System.Workflow.Activities.SendActivity" /> usa para se comunicar com um serviço.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um token de canal Especifica o nome do canal, o escopo de canal e o nome da configuração de ponto de extremidade a ser usado para estabelecer o canal. O nome do ponto de extremidade no arquivo de configuração tem o endereço, associação e informações de contrato de um serviço que o <xref:System.Workflow.Activities.SendActivity> atividade se comunica com.  
  
 O token de canal também especifica um nome de canal exclusivo e um nome de atividade de proprietário para o token. Um token de canal pode ser compartilhado entre várias atividades de envio que deseja usar o mesmo ponto de extremidade para se comunicar com um serviço.  
  
   
  
## Examples  
 O exemplo a seguir mostra como acessar o `ChannelToken` propriedade. Este exemplo foi adaptado a `CalculatorClient` amostra do SDK.  
  
 [!code-csharp[SendActivity#7](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; Context { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; Context" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retorna um dicionário que contém o contexto usado para comunicação entre o cliente e o serviço que está se comunicando com o, incluindo itens como identificação de correlação.</summary>
        <value>Uma coleção baseada em dicionário que contém <see cref="T:System.Xml.XmlQualifiedName" /> chaves e seus respectivos <see cref="T:System.String" /> valores.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações de contexto são usadas para comunicação entre o cliente e o serviço, ele está se comunicando e inclui coisas como a identificação de correlação.  
  
   
  
## Examples  
 O exemplo a seguir mostra como acessar o `Context` propriedade. Este exemplo foi adaptado a `CalculatorClient` amostra do SDK.  
  
 [!code-csharp[SendActivity#8](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAddress">
      <MemberSignature Language="C#" Value="public string CustomAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomAddress" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.CustomAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o endereço personalizado usado para se comunicar com um serviço.</summary>
        <value>Valor de cadeia de caracteres cujo valor é o endereço de um serviço está escutando.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se estiver presente, esse valor é usado para definir o endereço do ponto de extremidade para a operação.  
  
   
  
## Examples  
 O exemplo a seguir mostra como acessar o `CustomAddress` propriedade. Este exemplo foi adaptado a `CalculatorClient` amostra do SDK.  
  
 [!code-csharp[SendActivity#9](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAddressProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty CustomAddressProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty CustomAddressProperty" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.CustomAddressProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> para o <see cref="P:System.Workflow.Activities.SendActivity.CustomAddress" /> propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se estiver presente, esse valor é usado para definir o endereço do ponto de extremidade para a operação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected override System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Execute(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetContext">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna um dicionário que contém o contexto usado para comunicação entre o cliente e o serviço que está se comunicando com o, incluindo itens como identificação de correlação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações de contexto são usadas para comunicação entre o cliente e o serviço, ele está se comunicando e inclui coisas como a identificação de correlação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext(class System.Workflow.ComponentModel.Activity activity, class System.Workflow.Activities.ChannelToken endpoint, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpoint" Type="System.Workflow.Activities.ChannelToken" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activity">Atividade cujas informações de contexto são necessárias.</param>
        <param name="endpoint">Informações de ponto de extremidade para correlação com um serviço.</param>
        <param name="contractType">O <see cref="T:System.Type" /> do contrato implementado por um serviço.</param>
        <summary>Obtém ou define as informações de contexto para uma operação de envio.</summary>
        <returns>Uma coleção baseada em dicionário que contém <see cref="T:System.Xml.XmlQualifiedName" /> chaves e seus respectivos <see cref="T:System.String" /> valores.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações de contexto são usadas para comunicação entre o cliente e o serviço, ele está se comunicando e inclui coisas como a identificação de correlação.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o método `GetContext`.  
  
 [!code-csharp[SendActivity#12](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext(class System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, class System.Type contractType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.GetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpointName" Type="System.String" />
        <Parameter Name="ownerActivityName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="activity">Atividade cujas informações de contexto são necessárias.</param>
        <param name="endpointName">Nome do ponto de extremidade usada para correlação com um serviço.</param>
        <param name="ownerActivityName">O nome da atividade do proprietário.</param>
        <param name="contractType">O <see cref="T:System.Type" /> do contrato implementado por um serviço.</param>
        <summary>Método estático que retorna informações de contexto fornecidas como uma instância de atividade, um nome de ponto de extremidade usado por essa atividade, o nome da atividade do proprietário, e um <see cref="T:System.Type" /> objeto que representa o tipo do contrato.</summary>
        <returns>Uma coleção baseada em dicionário que contém <see cref="T:System.Xml.XmlQualifiedName" /> chaves e seus respectivos <see cref="T:System.String" /> valores.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações de contexto são usadas para comunicação entre o cliente e o serviço, ele está se comunicando e inclui coisas como a identificação de correlação.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o método `GetContext`.  
  
 [!code-csharp[SendActivity#15](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeProperties">
      <MemberSignature Language="C#" Value="protected override void InitializeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.InitializeProperties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterBindings">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.WorkflowParameterBindingCollection ParameterBindings" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.ParameterBindings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.WorkflowParameterBindingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a coleção de parâmetros associáveis como encontrado na [!INCLUDE[indigo1](~/includes/indigo1-md.md)] lista de parâmetros formais do serviço.</summary>
        <value>O <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> de parâmetros para associar a.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A>pode ser usado para especificar associações entre os parâmetros de operação de serviço e o campo público e propriedades do fluxo de trabalho que contém o <xref:System.Workflow.Activities.SendActivity> atividade. Quando o <xref:System.Workflow.Activities.SendActivity> atividade é executada, os valores de parâmetro correspondente são lidas das propriedades do fluxo de trabalho que estão associados a e enviados para o serviço como parâmetros de operação de serviço.  
  
 <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A>também pode ser usado para recuperar os valores de retorno de uma operação de serviço.  
  
 Todos os parâmetros da operação de serviço devem ser associados. Parâmetros de operação de serviço desassociado produzem avisos do compilador e os valores padrão do parâmetro são enviados quando o <xref:System.Workflow.Activities.SendActivity> é invocado.  
  
   
  
## Examples  
 O exemplo a seguir mostra como acessar o `ParameterBindings` propriedade. Este exemplo foi adaptado a `Conversations` amostra do SDK.  
  
 [!code-csharp[SendActivity#0](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnValuePropertyName">
      <MemberSignature Language="C#" Value="public const string ReturnValuePropertyName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string ReturnValuePropertyName" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.Activities.SendActivity.ReturnValuePropertyName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nome da propriedade que é usada para o valor de retorno enviado pelo serviço do que o <see langword="SendActivity" /> atividade está se comunicando.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa cadeia de caracteres pode ser usada para recuperar o valor de retorno de <xref:System.Workflow.Activities.SendActivity.ParameterBindings%2A> associados a <xref:System.Workflow.Activities.SendActivity> atividade no <xref:System.Workflow.Activities.SendActivity.AfterResponse> manipulador de eventos.  
  
   
  
## Examples  
 O exemplo a seguir mostra como acessar o `ReturnValuePropertyName` campo.  
  
 [!code-csharp[SendActivity#6](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceOperationInfo">
      <MemberSignature Language="C#" Value="public System.Workflow.Activities.TypedOperationInfo ServiceOperationInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.Activities.TypedOperationInfo ServiceOperationInfo" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Activities.SendActivity.ServiceOperationInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.Activities.TypedOperationInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Define o contrato e operação do serviço que o <see langword="SendActivity" /> atividade se comunica com.</summary>
        <value>Um <see cref="T:System.Workflow.Activities.TypedOperationInfo" /> objeto que contém o nome do contrato, o tipo de contrato, a operação de nome, (que pode ser diferente do nome do método real), se a operação é uma operação unidirecional e informações do método incluindo parâmetros sobre a operação.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.Activities.SendActivity> atividade sempre se refere a um contrato existente e as operações definidas. Há um tópico que permite que um <xref:System.Workflow.Activities.SendActivity> atividade para definir um contrato em si.  
  
   
  
## Examples  
 O exemplo a seguir mostra como acessar o `ServiceOperationInfo` propriedade. Este exemplo foi adaptado a `Conversations` amostra do SDK.  
  
 [!code-csharp[SendActivity#1](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetContext">
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Define informações de contexto para um <see cref="T:System.Workflow.Activities.SendActivity" /> atividade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações de contexto são usadas para comunicação entre o cliente e o serviço, ele está se comunicando e inclui coisas como a identificação de correlação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public static void SetContext (System.Workflow.ComponentModel.Activity activity, System.Workflow.Activities.ChannelToken endpoint, Type contractType, System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetContext(class System.Workflow.ComponentModel.Activity activity, class System.Workflow.Activities.ChannelToken endpoint, class System.Type contractType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.Workflow.Activities.ChannelToken,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpoint" Type="System.Workflow.Activities.ChannelToken" />
        <Parameter Name="contractType" Type="System.Type" />
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="activity">A instância de atividade para associar as informações de contexto com.</param>
        <param name="endpoint">O ponto de extremidade usado para correlação com um serviço.</param>
        <param name="contractType">O <see cref="T:System.Type" /> do contrato implementado por um serviço.</param>
        <param name="context">As informações de contexto para definir.</param>
        <summary>Um método estático que define as informações de contexto para um <see cref="T:System.Workflow.Activities.SendActivity" /> atividade, fornecido como uma instância de atividade, um ponto de extremidade usado por essa atividade, um <see cref="T:System.Type" /> objeto que representa o tipo de contrato e as informações de contexto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informações de contexto são usadas para comunicação entre o cliente e o serviço, ele está se comunicando e inclui coisas como a identificação de correlação.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar o método `SetContext`.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public static void SetContext (System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, Type contractType, System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetContext(class System.Workflow.ComponentModel.Activity activity, string endpointName, string ownerActivityName, class System.Type contractType, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Activities.SendActivity.SetContext(System.Workflow.ComponentModel.Activity,System.String,System.String,System.Type,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="endpointName" Type="System.String" />
        <Parameter Name="ownerActivityName" Type="System.String" />
        <Parameter Name="contractType" Type="System.Type" />
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="activity">A instância de atividade para associar as informações de contexto com.</param>
        <param name="endpointName">O nome de um ponto de extremidade usado para correlação com um serviço.</param>
        <param name="ownerActivityName">O nome da atividade do proprietário</param>
        <param name="contractType">O <see cref="T:System.Type" /> do contrato implementado por um serviço.</param>
        <param name="context">As informações de contexto para definir.</param>
        <summary>Um método estático que define as informações de contexto para um <see cref="T:System.Workflow.Activities.SendActivity" /> atividade, fornecida como uma instância de atividade, um nome de ponto de extremidade usado por essa atividade, o nome da atividade do proprietário, um <see cref="T:System.Type" /> objeto que representa o tipo de contrato e as informações de contexto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra como usar o método `SetContext`.  
  
 [!code-csharp[SendActivity#15](~/samples/snippets/csharp/VS_Snippets_CFX/sendactivity/cs/snippets.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
