<Type Name="LocalFileSettingsProvider" FullName="System.Configuration.LocalFileSettingsProvider">
  <TypeSignature Language="C#" Value="public class LocalFileSettingsProvider : System.Configuration.SettingsProvider, System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LocalFileSettingsProvider extends System.Configuration.SettingsProvider implements class System.Configuration.IApplicationSettingsProvider" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.LocalFileSettingsProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.SettingsProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Configuration.IApplicationSettingsProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Fornece a persistência para as classes de configurações do aplicativo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Provedores de configuração definem um mecanismo para armazenar dados de configuração usados na arquitetura de configurações do aplicativo. O [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] contém um provedor de configurações padrão único, <xref:System.Configuration.LocalFileSettingsProvider>, que armazena dados de configuração para o sistema de arquivos local. Uma propriedade de configurações do aplicativo ou grupo de propriedades associadas a um provedor de configurações específicas com o uso do <xref:System.Configuration.SettingsProviderAttribute>.  
  
 Normalmente, o programa cliente não explicitamente acessar essa classe. em vez disso, a arquitetura de configurações do aplicativo chama automaticamente o provedor de configurações apropriadas quando seus serviços são necessários. Por exemplo, muitos dos membros de <xref:System.Configuration.ApplicationSettingsBase> delegar seu trabalho para o provedor de configurações associadas.  
  
 <xref:System.Configuration.LocalFileSettingsProvider>persistir configurações nos arquivos de configuração com a extensão `.config`. O conteúdo dos arquivos de configuração é estruturado como documentos XML. Dependendo se a configuração tem seu escopo definida no nível do aplicativo ou no nível de usuário, os dados de configuração são armazenados como elementos dentro de um `<applicationSettings>` ou um `<userSettings>` seção grupo, respectivamente. Cada um desses grupos de seção é representado por uma <xref:System.Configuration.AppSettingsSection> ou <xref:System.Configuration.ClientSettingsSection>, respectivamente. Cada objeto de seção é de propriedade e administrado por um manipulador de seção de configuração, que é um objeto do tipo <xref:System.Configuration.IConfigurationSectionHandler>.  
  
 Configurações de escopo do aplicativo e as configurações do escopo do usuário são armazenadas em um arquivo chamado `application.exe.config`, que é criado no mesmo diretório que o arquivo executável. Definições de configuração do aplicativo são somente leitura. Dados específicos do usuário são armazenados em um arquivo chamado `user.config`, armazenado na pasta base do usuário. Se os perfis móveis estão habilitados, podem existir duas versões do arquivo de configuração de usuário. Nesse caso, as entradas na versão móvel prevalecerão sobre as entradas duplicadas no arquivo de configuração de usuário local.  
  
 Para obter mais informações sobre configurações de aplicativo, consulte [configurações de aplicativo para o Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LocalFileSettingsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Configuration.LocalFileSettingsProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os conjuntos de construtor padrão de <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> propriedade <xref:System.String.Empty>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.LocalFileSettingsProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome do aplicativo em execução no momento.</summary>
        <value>Uma cadeia de caracteres que contém o nome para exibição do aplicativo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A> e <xref:System.Configuration.Provider.ProviderBase.Name%2A> propriedades ajudam para resolver a ambiguidade, da mesma forma, as propriedades de configuração nomeado em diferentes aplicativos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviousVersion">
      <MemberSignature Language="C#" Value="public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValue GetPreviousVersion(class System.Configuration.SettingsContext context, class System.Configuration.SettingsProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="property" Type="System.Configuration.SettingsProperty" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.Configuration.SettingsContext" /> que descreve onde a propriedade de configurações do aplicativo é usada.</param>
        <param name="property">O <see cref="T:System.Configuration.SettingsProperty" /> cujo valor será retornado.</param>
        <summary>Retorna o valor da propriedade de configuração nomeada para a versão anterior do mesmo aplicativo.</summary>
        <returns>Um <see cref="T:System.Configuration.SettingsPropertyValue" /> que representa a configuração de aplicativo encontrado; caso contrário, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion%2A> método é geralmente usado em conjunto com o <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> método ao migrar as configurações do aplicativo durante a instalação de uma nova versão de um aplicativo. Para obter mais informações, consulte o método <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValues">
      <MemberSignature Language="C#" Value="public override System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Configuration.SettingsPropertyValueCollection GetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.Configuration.SettingsContext" /> que descreve o uso do aplicativo atual.</param>
        <param name="properties">Um <see cref="T:System.Configuration.SettingsPropertyCollection" /> que contém o grupo de propriedade de configurações cujos valores devem ser recuperados.</param>
        <summary>Retorna a coleção de definir valores de propriedade para o grupo de propriedade de instância e configurações do aplicativo especificado.</summary>
        <returns>Um <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> que contém os valores para o grupo de propriedades de configurações especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.LocalFileSettingsProvider.GetPropertyValues%2A> método também gerencia o tipo de configurações de aplicativo especial <xref:System.Configuration.SpecialSetting.ConnectionString>. Cadeias de Conexão são armazenadas em uma seção especial do arquivo de configuração, delimitado pelo elemento `<connectionstrings>`.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider>não usa criptografia para manter as configurações. Portanto, não armazene senhas de texto sem formatação ou outras informações confidenciais usando este provedor sem tomar precauções adicionais, como a criptografia separadamente as informações no arquivo de configuração. Para obter mais informações, consulte [Criptografando informações de configuração usando configuração protegida](http://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Foi encontrada uma configuração de escopo do usuário, mas a configuração atual dá suporte apenas a configurações de escopo do aplicativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="values" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">O nome amigável do provedor.</param>
        <param name="values">Uma coleção dos pares nome-valor que representam os atributos específicos do provedor especificados na configuração para esse provedor.</param>
        <summary>Inicializa o provedor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Configuration.SettingsContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset(class System.Configuration.SettingsContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.Configuration.SettingsContext" /> que descreve o uso do aplicativo atual.</param>
        <summary>Redefine todas as propriedades de configuração do aplicativo associadas ao aplicativo especificado para seus valores padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> método restaura os valores armazenados do grupo de configurações do aplicativo especificado. A ação de <xref:System.Configuration.LocalFileSettingsProvider.Reset%2A> depende do escopo da propriedade de configurações do aplicativo:  
  
-   Configurações de escopo do aplicativo não são afetadas.  
  
-   Configurações no escopo do usuário são redefinidas para os valores padrão que são armazenados como entradas de somente leitura no arquivo de configuração do aplicativo, `application.exe.config`. Se os perfis móveis estão sendo usados, quaisquer valores de configurações de aplicativo no perfil móvel prevalecerão sobre duplicações encontradas no perfil local.  
  
 Observe que se perfis móveis são usados, pode haver duas `user.config` arquivos, uma para as configurações do local e outra para o perfil móvel.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Foi encontrada uma configuração de escopo do usuário, mas a configuração atual dá suporte apenas a configurações de escopo do aplicativo.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValues">
      <MemberSignature Language="C#" Value="public override void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyValueCollection values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="values" Type="System.Configuration.SettingsPropertyValueCollection" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.Configuration.SettingsContext" /> que descreve o uso do aplicativo atual.</param>
        <param name="values">Um <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> que representa o grupo de configurações de propriedade a ser definido.</param>
        <summary>Define os valores do grupo especificado de configurações de propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uma classe de invólucro de configurações, derivada de <xref:System.Configuration.ApplicationSettingsBase>, contém o <xref:System.Configuration.ApplicationSettingsBase.Save%2A> método, que é chamado para manter os valores de todas as suas propriedades de configurações. Esse método enumera por todas as configurações de provedores com suas propriedades de configurações e chama o <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> método para cada <xref:System.Configuration.SettingsProvider> para executar a operação de serialização real.  
  
 <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A>Serializa individualmente cada propriedade de configurações do aplicativo no escopo do usuário para seu aplicativo correspondente configuração no respectivo `user.config` arquivo de configuração.  
  
 Por padrão, o <xref:System.Configuration.LocalFileSettingsProvider.SetPropertyValues%2A> método usa a seguinte sequência lógica para determinar o esquema de serialização, dependendo do tipo da propriedade de configurações:  
  
1.  Se o tipo possui um tipo de <xref:System.ComponentModel.TypeConverter> com um <xref:System.ComponentModel.TypeConverter.ConvertToString%2A> implementação do método, essa conversão é usada.  
  
2.  Serialização de XML é usada.  
  
 No entanto, você pode especificar um mecanismo preferencial de serialização usando o <xref:System.Configuration.SettingsSerializeAsAttribute>. <xref:System.Configuration.LocalFileSettingsProvider>não oferece suporte a serialização binária em [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)].  
  
 Se uma propriedade de configurações no escopo do usuário é alterada para seu valor padrão explicitamente, o provedor de configurações de arquivo local removerá a entrada para a configuração associada do arquivo de configuração de usuário. O próximo acesso de leitura para essa propriedade simplesmente usará o valor padrão.  
  
> [!CAUTION]
>  <xref:System.Configuration.LocalFileSettingsProvider>não usa criptografia para manter as configurações. Portanto, não armazene senhas de texto sem formatação ou outras informações confidenciais usando este provedor sem tomar precauções adicionais, como a criptografia separadamente as informações no arquivo de configuração. Para obter mais informações, consulte [Criptografando informações de configuração usando configuração protegida](http://msdn.microsoft.com/library/51cdfe5b-9d82-458c-94ff-c551c4f38ed1).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Foi encontrada uma configuração de escopo do usuário, mas a configuração atual dá suporte apenas a configurações de escopo do aplicativo.  
  
 -ou-  
  
 Houve uma falha geral ao salvar as configurações para o arquivo de configuração.</exception>
      </Docs>
    </Member>
    <Member MemberName="Upgrade">
      <MemberSignature Language="C#" Value="public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Upgrade(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="properties" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.Configuration.SettingsContext" /> que descreve o uso do aplicativo atual.</param>
        <param name="properties">Um <see cref="T:System.Configuration.SettingsPropertyCollection" /> que contém o grupo de propriedade de configurações cujos valores devem ser recuperados.</param>
        <summary>Tentativa de migrar configurações de escopo do usuário anteriores de uma versão anterior do mesmo aplicativo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.LocalFileSettingsProvider>migra as configurações locais e móveis em operações separadas.  
  
 O <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> método é suprimido para cada configuração de aplicativo tem o <xref:System.Configuration.NoSettingsVersionUpgradeAttribute> aplicada a ele, ou para a classe de invólucro configurações inteira, derivada de <xref:System.Configuration.ApplicationSettingsBase>.  
  
 Dessa forma, que este método é chamado depende do tipo de aplicativo que está sendo atualizado:  
  
-   Cada versão de um [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] aplicativo está armazenado em seu próprio diretório de instalação isolado. Depois de uma nova versão de um [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] aplicativo está instalado, e quando a nova versão é executada pela primeira vez, a lógica interna automaticamente chamará <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> para migrar todas as configurações de aplicativo comuns para a nova versão. Para obter mais informações, consulte [ClickOnce e as configurações de aplicativo](http://msdn.microsoft.com/library/891caba6-faef-4a3c-8f71-60e6fadb60eb).  
  
-   Padrão do Windows Forms e aplicativos de console manualmente devem chamar <xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>, porque não há uma maneira geral, automática para determinar quando tal aplicativo é executado pela primeira vez. As duas maneiras de fazer isso são do programa de instalação ou usando do próprio aplicativo, usando uma propriedade persistente, geralmente chamado de algo como `IsFirstRun`.  
  
 Observe que para a versão mais recente migrar as configurações do aplicativo, ele deve ser capaz de carregar e ler a versão mais antiga de configurações do aplicativo também. Portanto, ele deve conter classes wrapper compatíveis com versões anteriores e nova do aplicativo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Foi encontrada uma configuração de escopo do usuário, mas a configuração atual dá suporte apenas a configurações de escopo do aplicativo.  
  
 -ou-  
  
 Não foi possível acessar a versão anterior do arquivo de configuração.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
