<Type Name="BitmapEffect" FullName="System.Windows.Media.Effects.BitmapEffect">
  <TypeSignature Language="C#" Value="public abstract class BitmapEffect : System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BitmapEffect extends System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Effects.BitmapEffect" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.Animatable</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>**Observação: esta API agora é obsoleta.** A alternativa não obsoleta é <see cref="T:System.Windows.Media.Effects.Effect" />.  
  
 Define um efeito de bitmap. Classes derivadas definem os efeitos que podem ser aplicados a um objeto <see cref="T:System.Windows.Media.Visual" />, como um <see cref="T:System.Windows.Controls.Button" /> ou <see cref="T:System.Windows.Controls.Image" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]efeitos de bitmap são renderizados por software. Qualquer objeto que aplique um efeito também será renderizado em software. Efeitos de bitmap não devem ser aplicados a elementos visuais grandes ou animações, porque isso pode prejudicar o desempenho.  
  
> [!CAUTION]
>  Efeitos de bitmap não dão suporte a execução em confiança parcial. Um aplicativo deve ter permissões de confiança total para usar efeitos de bitmap.  
  
 Escala são aplicadas a um visual antes que um efeito seja aplicado. No caso de uma transformação de escala não uniforme, o efeito usará os valores de escala maior.  
  
 Atualizações para a árvore visual de um <xref:System.Windows.Media.VisualBrush> não serão propagadas se um <xref:System.Windows.Media.Effects.BitmapEffect> está na cadeia do pai do pincel. Você pode contornar essa limitação forçando uma atualização da cena no objeto pai do efeito. Você pode chamar <xref:System.Windows.UIElement.InvalidateVisual%2A> ou incluir uma animação para forçar uma atualização de cena.  
  
 Efeitos personalizados herdam desta classe para criar uma interface gerenciada para o efeito de não gerenciado. Para obter mais informações, consulte o [BitmapEffect não gerenciado](https://msdn.microsoft.com/library/ms735092.aspx) API.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.UIPermission">para herdar a <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> classe. Enumerações associadas:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
    <block subset="none" type="overrides">
      <para>
        <see cref="M:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect" />deve ser substituído para inicializar um efeito não gerenciado em código gerenciado.  
  
 <see cref="M:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)" />deve ser substituído quando um efeito não gerenciado tem propriedades que o usuário pode modificar. Use esse método em conjunto com <see cref="M:System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)" /> para atualizar suas propriedades não gerenciadas.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BitmapEffect ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Media.Effects.BitmapEffect" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Effects.BitmapEffect Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um clone modificável desse <see cref="T:System.Windows.Media.Effects.BitmapEffect" />, fazendo cópias em profundidade dos valores do objeto. Ao copiar as propriedades de dependência, esse método copia associações de dados e referências de recurso (mas eles não podem mais resolver), mas não animações ou seus valores atuais.</summary>
        <returns>Um clone modificável do objeto atual. O objeto clonado <see cref="P:System.Windows.Freezable.IsFrozen" /> propriedade será <see langword="false" /> mesmo se a fonte <see cref="P:System.Windows.Freezable.IsFrozen" /> era de propriedade<see langword="true." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é usado para produzir cópias modificáveis de congelada <xref:System.Windows.Freezable> objetos (ou qualquer <xref:System.Windows.Freezable> objeto). Para sua conveniência, este método sombreia a versão herdada.  
  
 Para obter mais informações, consulte <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Effects.BitmapEffect CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Effects.BitmapEffect CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Effects.BitmapEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um clone modificável desse objeto <see cref="T:System.Windows.Media.Effects.BitmapEffect" />, fazendo cópias em profundidade dos valores do objeto atual. Referências a recursos, vinculações de dados e animações não são copiadas, mas seus valores atuais são.</summary>
        <returns>Um clone modificável do objeto atual. O objeto clonado <see cref="P:System.Windows.Freezable.IsFrozen" /> propriedade será <see langword="false" /> mesmo se a fonte <see cref="P:System.Windows.Freezable.IsFrozen" /> propriedade era <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é usado para produzir cópias modificáveis de congelada <xref:System.Windows.Freezable> objetos (ou qualquer <xref:System.Windows.Freezable> objeto). Para sua conveniência, este método sombreia a versão herdada.  
  
 Para obter mais informações, consulte <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBitmapEffectOuter">
      <MemberSignature Language="C#" Value="protected static System.Runtime.InteropServices.SafeHandle CreateBitmapEffectOuter ();" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.InteropServices.SafeHandle CreateBitmapEffectOuter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um identificador para um [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) objeto que é usado para inicializar um efeito personalizado.</summary>
        <returns>Um identificador para um [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interação de estrutura com efeitos personalizados é tratada por um [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) objeto. O efeito externo é inicializado com o efeito personalizado por meio de <xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir mostra uma implementação de <xref:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect%2A> que usa o <xref:System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter%2A> método para recuperar um objeto wrapper de efeito.  
  
 [!code-csharp[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/csharp/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/CSharp/RGBFilterBitmapEffect.cs#createunmanagedeffect)]
 [!code-vb[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/visualbasic/rgbfilterbitmapeffect.vb#createunmanagedeffect)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUnmanagedEffect">
      <MemberSignature Language="C#" Value="protected abstract System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.SafeHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quando substituído em uma classe derivada, cria um clone do efeito de não gerenciado.</summary>
        <returns>Um identificador para o clone efeito não gerenciado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra uma substituição do <xref:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect%2A> método.  
  
 [!code-csharp[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/csharp/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/CSharp/RGBFilterBitmapEffect.cs#createunmanagedeffect)]
 [!code-vb[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/visualbasic/rgbfilterbitmapeffect.vb#createunmanagedeffect)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutput">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Imaging.BitmapSource GetOutput (System.Windows.Media.Effects.BitmapEffectInput input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.Imaging.BitmapSource GetOutput(class System.Windows.Media.Effects.BitmapEffectInput input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.GetOutput(System.Windows.Media.Effects.BitmapEffectInput)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Imaging.BitmapSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Windows.Media.Effects.BitmapEffectInput" />
      </Parameters>
      <Docs>
        <param name="input">A entrada para aplicar o efeito.</param>
        <summary>Retorna o <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> que ocorre quando o efeito é aplicado especificado <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" />.</summary>
        <returns>O <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> com o efeito aplicado à entrada.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeBitmapEffect">
      <MemberSignature Language="C#" Value="protected static void InitializeBitmapEffect (System.Runtime.InteropServices.SafeHandle outerObject, System.Runtime.InteropServices.SafeHandle innerObject);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void InitializeBitmapEffect(class System.Runtime.InteropServices.SafeHandle outerObject, class System.Runtime.InteropServices.SafeHandle innerObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outerObject" Type="System.Runtime.InteropServices.SafeHandle" />
        <Parameter Name="innerObject" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="outerObject">O wrapper IMILBitmapEffect externo ao inicializar.</param>
        <param name="innerObject">O IMILBitmapEffectPrimitive interna.</param>
        <summary>Inicializa um [IMILBitmapEffect](https://msdn.microsoft.com/library/ms735317.aspx) identificador obtido <see cref="M:System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter" /> com o determinado [IMILBitmapEffectPrimitive](https://msdn.microsoft.com/library/ms735258.aspx).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra uma implementação de <xref:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect%2A> que usa o <xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A> método para inicializar o objeto de wrapper com o efeito personalizado.  
  
 [!code-csharp[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/csharp/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/CSharp/RGBFilterBitmapEffect.cs#createunmanagedeffect)]
 [!code-vb[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/visualbasic/rgbfilterbitmapeffect.vb#createunmanagedeffect)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="protected static void SetValue (System.Runtime.InteropServices.SafeHandle effect, string propertyName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetValue(class System.Runtime.InteropServices.SafeHandle effect, string propertyName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="effect" Type="System.Runtime.InteropServices.SafeHandle" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="effect">O identificador para o efeito que contém a propriedade a ser alterada.</param>
        <param name="propertyName">O nome da propriedade a ser alterada.</param>
        <param name="value">O valor a ser usado para definir a propriedade.</param>
        <summary>Define a propriedade especificada como o valor especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método destina-se como um método auxiliar para <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>. Quando você substituir <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>, use <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A> para atualizar valores de propriedade não gerenciado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateUnmanagedPropertyState">
      <MemberSignature Language="C#" Value="protected abstract void UpdateUnmanagedPropertyState (System.Runtime.InteropServices.SafeHandle unmanagedEffect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UpdateUnmanagedPropertyState(class System.Runtime.InteropServices.SafeHandle unmanagedEffect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unmanagedEffect" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="unmanagedEffect">O identificador para o efeito que contém as propriedades para atualizar.</param>
        <summary>Quando substituído em uma classe derivada, atualiza os estados de propriedade das propriedades não gerenciados do efeito.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ao definir propriedades não gerenciadas dentro de uma substituição do método, use o método auxiliar <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
