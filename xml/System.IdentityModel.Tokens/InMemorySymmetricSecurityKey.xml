<Type Name="InMemorySymmetricSecurityKey" FullName="System.IdentityModel.Tokens.InMemorySymmetricSecurityKey">
  <TypeSignature Language="C#" Value="public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InMemorySymmetricSecurityKey extends System.IdentityModel.Tokens.SymmetricSecurityKey" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Tokens.SymmetricSecurityKey</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa as chaves que são geradas usando algoritmos simétricos e só são armazenadas na memória de acesso aleatório do computador local.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, essa classe só é usada pela infraestrutura para transformar XML usando uma chave simétrica.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemorySymmetricSecurityKey (byte[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="symmetricKey" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> usando a chave simétrica especificada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> tem tamanho zero.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InMemorySymmetricSecurityKey (byte[] key, bool clone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] key, bool clone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="symmetricKey" Type="System.Byte[]" />
        <Parameter Name="cloneBuffer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="clone">To be added.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey" /> classe usando a chave simétrica especificada e um valor que indica se os dados binários devem ser clonados.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="symmetricKey" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="symmetricKey" /> tem tamanho zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="DecryptKey">
      <MemberSignature Language="C#" Value="public override byte[] DecryptKey (string algorithm, byte[] keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] DecryptKey(string algorithm, unsigned int8[] keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="keyData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo de criptografia que foi usado para criptografar a chave.</param>
        <param name="keyData">Uma matriz de <see cref="T:System.Byte" /> que contém a chave criptografada.</param>
        <summary>Descriptografa a chave especificada.</summary>
        <returns>Uma matriz de <see cref="T:System.Byte" /> que contém a chave descriptografada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms> classe para especificar o algoritmo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. Os algoritmos com suporte são <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, e <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptKey">
      <MemberSignature Language="C#" Value="public override byte[] EncryptKey (string algorithm, byte[] keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] EncryptKey(string algorithm, unsigned int8[] keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="keyData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo de criptografia para criptografar a chave com.</param>
        <param name="keyData">Uma matriz de <see cref="T:System.Byte" /> que contém a chave.</param>
        <summary>Criptografa a chave especificada.</summary>
        <returns>Uma matriz de <see cref="T:System.Byte" /> que contém a chave criptografada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use os campos estáticos do <xref:System.IdentityModel.Tokens.SecurityAlgorithms> classe para especificar o algoritmo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. Os algoritmos com suporte são <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, ou <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GenerateDerivedKey">
      <MemberSignature Language="C#" Value="public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GenerateDerivedKey(string algorithm, unsigned int8[] label, unsigned int8[] nonce, int32 derivedKeyLength, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="label" Type="System.Byte[]" />
        <Parameter Name="nonce" Type="System.Byte[]" />
        <Parameter Name="derivedKeyLength" Type="System.Int32" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="algorithm">Um URI que representa o algoritmo de criptografia a ser usado para gerar a chave derivada.</param>
        <param name="label">Uma matriz de <see cref="T:System.Byte" /> que contém o parâmetro de rótulo para o algoritmo de criptografia.</param>
        <param name="nonce">Uma matriz de <see cref="T:System.Byte" /> que contém o valor de uso único que é usado para criar uma chave derivada.</param>
        <param name="derivedKeyLength">O tamanho da chave derivada.</param>
        <param name="offset">A posição em que a chave derivada está localizada na matriz de bytes que é retornado deste método.</param>
        <summary>Gera uma chave derivada usando o algoritmo de criptografia especificado e os parâmetros para a chave atual.</summary>
        <returns>Uma matriz de <see cref="T:System.Byte" /> que contém a chave derivada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para especificar SHA1 P como o algoritmo de criptografia, use o <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> campo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. Os algoritmos com suporte é <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecryptionTransform">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform GetDecryptionTransform(string algorithm, unsigned int8[] iv) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="iv" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm">Um algoritmo de criptografia que descriptografa codificação de texto, como XML criptografado.</param>
        <param name="iv">Uma matriz de <see cref="T:System.Byte" /> que contém o vetor de inicialização (<see langword="IV" />) para o algoritmo especificado.</param>
        <summary>Obtém uma transformação descriptografa codificação de texto usando o algoritmo de criptografia especificado.</summary>
        <returns>Um <see cref="T:System.Security.Cryptography.ICryptoTransform" /> que representa a transformação de descriptografia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use os campos que representam os algoritmos de descriptografia no <xref:System.IdentityModel.Tokens.SecurityAlgorithms> classe para especificar o algoritmo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. Os algoritmos com suporte são <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, e <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEncryptionTransform">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.ICryptoTransform GetEncryptionTransform(string algorithm, unsigned int8[] iv) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.ICryptoTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
        <Parameter Name="iv" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="algorithm">Um algoritmo de criptografia que criptografa o XML.</param>
        <param name="iv">Uma matriz de <see cref="T:System.Byte" /> que contém o vetor de inicialização (<see langword="IV" />) para o algoritmo especificado.</param>
        <summary>Obtém uma transformação que criptografa o XML usando o algoritmo de criptografia especificado.</summary>
        <returns>Um <see cref="T:System.Security.Cryptography.ICryptoTransform" /> que representa a transformação de criptografia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use os campos que representam os algoritmos de criptografia no <xref:System.IdentityModel.Tokens.SecurityAlgorithms> classe para especificar o algoritmo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. Os algoritmos com suporte são <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, e <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetIVSize">
      <MemberSignature Language="C#" Value="public override int GetIVSize (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetIVSize(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo criptográfico para obter o tamanho do vetor de inicialização (<see langword="IV" />).</param>
        <summary>Obtém o tamanho, em bits, o vetor de inicialização (<see langword="IV" />) que é necessário para o algoritmo de criptografia especificado.</summary>
        <returns>O tamanho, em bits, o vetor de inicialização (<see langword="IV" />) que é necessário para o algoritmo de criptografia especificado no <paramref name="algorithm" /> parâmetro.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use os campos que representam os algoritmos de criptografia no <xref:System.IdentityModel.Tokens.SecurityAlgorithms> classe para especificar o algoritmo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. Os algoritmos com suporte são <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />, e <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyedHashAlgorithm">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.KeyedHashAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo de hash com chave para obter uma instância do.</param>
        <summary>Obtém uma instância do algoritmo de hash com chave especificada.</summary>
        <returns>Um <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> que representa o algoritmo de hash com chave.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. Os algoritmos com suporte é <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSymmetricAlgorithm">
      <MemberSignature Language="C#" Value="public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.SymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo simétrico para obter uma instância do.</param>
        <summary>Obtém uma instância do algoritmo simétrico especificado.</summary>
        <returns>Um <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> que representa o algoritmo simétrico.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="algorithm" /> não é suportado. The supported algorithms are <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption" />,  <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap" />, <see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap" />, and<see cref="F:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap" /></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSymmetricKey">
      <MemberSignature Language="C#" Value="public override byte[] GetSymmetricKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetSymmetricKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém os bytes que representam a chave simétrica.</summary>
        <returns>Uma matriz de <see cref="T:System.Byte" /> que contém a chave simétrica.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAsymmetricAlgorithm">
      <MemberSignature Language="C#" Value="public override bool IsAsymmetricAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsAsymmetricAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo de criptografia.</param>
        <summary>Obtém um valor que indica se o algoritmo especificado usa chaves assimétricas.</summary>
        <returns>
          <see langword="true" />Quando o algoritmo especificado usa chaves assimétricas; Caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedAlgorithm">
      <MemberSignature Language="C#" Value="public override bool IsSupportedAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSupportedAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo de criptografia.</param>
        <summary>Obtém um valor que indica se esta classe oferece suporte para o algoritmo especificado.</summary>
        <returns>
          <see langword="true" />Quando o algoritmo especificado é suportado por esta classe. Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os algoritmos simétricos que são suportados por essa classe são os algoritmos representados pelos seguintes campos:  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>  
  
-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSymmetricAlgorithm">
      <MemberSignature Language="C#" Value="public override bool IsSymmetricAlgorithm (string algorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSymmetricAlgorithm(string algorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="algorithm" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="algorithm">O algoritmo de criptografia.</param>
        <summary>Obtém um valor que indica se o algoritmo especificado usa chaves simétricas.</summary>
        <returns>
          <see langword="true" />Quando o algoritmo especificado usa chaves simétricas; Caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeySize">
      <MemberSignature Language="C#" Value="public override int KeySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeySize" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tamanho, em bits, da chave.</summary>
        <value>O tamanho, em bits, da chave.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
