<Type Name="Activity" FullName="System.Workflow.ComponentModel.Activity">
  <TypeSignature Language="C#" Value="public class Activity : System.Workflow.ComponentModel.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Activity extends System.Workflow.ComponentModel.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.ComponentModel.Activity" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.ComponentModel.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer(typeof(System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer), typeof(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer(typeof(System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer), typeof(System.ComponentModel.Design.Serialization.CodeDomSerializer))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer(typeof(System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer), typeof(System.ComponentModel.Design.Serialization.TypeCodeDomSerializer))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer(typeof(System.Workflow.ComponentModel.Design.ActivityDesigner), typeof(System.ComponentModel.Design.IDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer(typeof(System.Workflow.ComponentModel.Design.ActivityDesigner), typeof(System.ComponentModel.Design.IRootDesigner))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignerCategory("Component")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(typeof(System.Workflow.ComponentModel.Design.ActivityToolboxItem))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("Microsoft.Workflow.VSDesigner", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Workflow.ComponentModel.Design.ActivitySet", System.ComponentModel.ToolboxItemFilterType.Allow)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Workflow.ComponentModel.Activity), "Design.Resources.Activity.png")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator(typeof(System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Compiler.ActivityValidator(typeof(System.Workflow.ComponentModel.Compiler.ActivityValidator))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Workflow.ComponentModel.Serialization.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa o bloco de construção fundamental de fluxos de trabalho. <see cref="T:System.Workflow.ComponentModel.Activity" /> é a classe base para todas as atividades.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Um <xref:System.Workflow.ComponentModel.Activity> é o principal bloco de construção de fluxos de trabalho. Um <xref:System.Workflow.ComponentModel.Activity> define um conjunto de propriedades e eventos, como qualquer classe, juntamente com a lógica de execução que define o comportamento de tempo de execução da atividade. Um conjunto de componentes adicionais pode ser associado a um <xref:System.Workflow.ComponentModel.Activity>. Esses incluem, mas não estão limitados a um validador, um gerador de código, serializadores personalizados e um designer.  
  
 Todas as atividades compartilham um conjunto comum de propriedades definidas no <xref:System.Workflow.ComponentModel.Activity> classe base.  Cada <xref:System.Workflow.ComponentModel.Activity> pode declarar suas próprias propriedades adicionais de acordo com seus requisitos, estendendo a essa classe.  Porque <xref:System.Workflow.ComponentModel.Activity> deriva <xref:System.Workflow.ComponentModel.DependencyObject>, propriedades podem ser definidas como propriedades CLR padrão e propriedades de dependência.  
  
 A lógica de execução de um <xref:System.Workflow.ComponentModel.Activity> atende a um contrato que existe entre qualquer <xref:System.Workflow.ComponentModel.Activity> e o tempo de execução do fluxo de trabalho. Você deve documentar a lógica de execução de qualquer <xref:System.Workflow.ComponentModel.Activity> em um sentido funcional, para que um desenvolvedor de fluxo de trabalho que usa o <xref:System.Workflow.ComponentModel.Activity> sabe como ele se comporta. A lógica de execução é ocultada do desenvolvedor de fluxo de trabalho que inclui a atividade em um fluxo de trabalho, porque a lógica de execução faz parte de um contrato que estritamente existe entre o tempo de execução do fluxo de trabalho e o <xref:System.Workflow.ComponentModel.Activity>.  
  
   
  
## Examples  
 Este exemplo define uma atividade cuja finalidade é enviar um email. A atividade define uma propriedade, `Subject`, que usa uma propriedade de dependência em sua implementação. Outras propriedades podem ser definidas de forma semelhante. O `Execute` método é substituído para fornecer a lógica para enviar o email. Para obter um exemplo completo, consulte o [enviar exemplo de atividade de email](http://msdn.microsoft.com/en-us/bfb5939e-60a9-4037-af4e-2cea9e654669).  
  
```csharp  
public class SendEmail : Activity  
{  
    public static readonly DependencyProperty SubjectProperty =  
        DependencyProperty.Register("Subject", typeof(string), typeof(SendEmail));  
  
    public string Subject  
    {  
        get { return base.GetValue(SubjectProperty) as string; }  
        set { base.SetValue(SubjectProperty, value); }  
    }  
  
    // Define other properties...  
  
    protected override ActivityExecutionStatus Execute(ActivityExecutionContext executionContext)  
    {  
        // Logic to send the e-mail goes here...  
        return ActivityExecutionStatus.Closed;  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Activity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O código a seguir mostra como criar atividades e adicioná-los como filhos a uma atividade composta.  
  
 Este exemplo de código é parte do exemplo Throw SDK e do arquivo de ThrowWorkFlow.cs. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Throw exemplo](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  
  
 [!code-csharp[WF_Samples#179](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#179)]
 [!code-vb[WF_Samples#179](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#179)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Activity (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome a ser associado com esta instância. O nome deve estar em conformidade com as convenções de nomenclatura de variável para a linguagem de programação que está sendo usada no projeto de fluxo de trabalho e deve ser exclusivo no fluxo de trabalho.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Workflow.ComponentModel.Activity" /> classe ao inicializar o <see cref="P:System.Workflow.ComponentModel.Activity.Name" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="ActivityContextGuidProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty ActivityContextGuidProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty ActivityContextGuidProperty" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>O <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que representa o <see cref="T:System.Guid" /> do <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> que está associado a <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DependencyPropertyRemark](~/includes/dependencypropertyremark-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="protected virtual System.Workflow.ComponentModel.ActivityExecutionStatus Cancel (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Cancel(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">O <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> que contém a instância para cancelar.</param>
        <summary>Chamado pelo tempo de execução de fluxo de trabalho para cancelar a execução de uma atividade que está sendo executado.</summary>
        <returns>O status no final da operação que determina se a atividade permanece no estado de cancelamento ou faz a transição para o estado fechado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Canceling">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Canceling;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Canceling" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Activity.Canceling" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando a execução da atividade é cancelada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A geração de um evento invoca o manipulador de eventos por meio de um delegado. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 O <xref:System.Workflow.ComponentModel.Activity.Cancel%2A> método também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento em uma classe derivada.  [!INCLUDE[crabout](~/includes/crabout-md.md)]manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="E:System.Workflow.ComponentModel.Activity.Canceling" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)" /> método para que registrado delegados receber o evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CancelingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty CancelingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty CancelingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Activity.CancelingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que tem como destino o <see cref="E:System.Workflow.ComponentModel.Activity.Canceling" /> evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você acessa indiretamente cada evento e propriedade pública deste tipo pela resolução de uma propriedade de dependência correspondente. Essa propriedade de dependência é o campo estático público chamado `XProperty` ou `XEvent`, onde X é a propriedade correspondente.  
  
 [!INCLUDE[DependencyPropertyRemark](~/includes/dependencypropertyremark-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria uma cópia profunda do <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <returns>Uma cópia profunda do <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa um <xref:System.IO.MemoryStream> para a atividade de cópia e cria uma nova atividade desserializando de específica <xref:System.IO.MemoryStream>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Closed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Activity.Closed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um <see cref="T:System.Workflow.ComponentModel.Activity" /> concluiu a execução.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A geração de um evento invoca o manipulador de eventos por meio de um delegado. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 O <xref:System.Workflow.ComponentModel.Activity.Closed> método também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento em uma classe derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="E:System.Workflow.ComponentModel.Activity.Closed" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="E:System.Workflow.ComponentModel.Activity.Closed" /> método para que registrado delegados receber o evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ClosedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty ClosedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty ClosedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Activity.ClosedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que tem como destino o <see cref="E:System.Workflow.ComponentModel.Activity.Closed" /> evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você acessa indiretamente cada evento e propriedade pública deste tipo pela resolução de uma propriedade de dependência correspondente. Essa propriedade de dependência é o campo estático público chamado `XProperty` ou `XEvent`, onde X é a propriedade correspondente.  
  
 [!INCLUDE[DependencyPropertyRemark](~/includes/dependencypropertyremark-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compensating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Compensating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Compensating" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Activity.Compensating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre durante a execução de um método de compensação no <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A geração de um evento invoca o manipulador de eventos por meio de um delegado. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 O <xref:System.Workflow.ComponentModel.Activity.Compensating> método também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento em uma classe derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="E:System.Workflow.ComponentModel.Activity.Compensating" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="E:System.Workflow.ComponentModel.Activity.Compensating" /> método para que registrado delegados receber o evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CompensatingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty CompensatingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty CompensatingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Activity.CompensatingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que tem como destino o <see cref="E:System.Workflow.ComponentModel.Activity.Compensating" /> evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você acessa indiretamente cada evento e propriedade pública deste tipo pela resolução de uma propriedade de dependência correspondente. Essa propriedade de dependência é o campo estático público chamado `XProperty` ou `XEvent`, onde X é a propriedade correspondente.  
  
 [!INCLUDE[DependencyPropertyRemark](~/includes/dependencypropertyremark-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a descrição definida pelo usuário a <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <value>A descrição de texto de <see cref="T:System.Workflow.ComponentModel.Activity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade é uma propriedade de metadados, o que significa que ele não pode ser alterado em tempo de execução. Propriedades de metadados não alteram o após uma instância de propriedade é criada em tempo de execução, para que a propriedade deve ser definida como um valor literal em tempo de design.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se esta instância está habilitada para execução e validação.</summary>
        <value>
          <see langword="true" />Se habilitada para execução e validação; <see langword="false" /> caso contrário.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se `false`, todas as atividades filho são tratadas como se esse valor é `false` para eles também.  
  
 Essa propriedade é uma propriedade de metadados, o que significa que ele não pode ser alterado em tempo de execução. Propriedades de metadados não alteram o após uma instância de propriedade é criada em tempo de execução, para que a propriedade deve ser definida como um valor literal em tempo de design.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="protected virtual System.Workflow.ComponentModel.ActivityExecutionStatus Execute (System.Workflow.ComponentModel.ActivityExecutionContext executionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus Execute(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
      </Parameters>
      <Docs>
        <param name="executionContext">O <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> a ser associado a este <see cref="T:System.Workflow.ComponentModel.Activity" /> e à execução.</param>
        <summary>Chamado pelo tempo de execução de fluxo de trabalho para executar uma atividade.</summary>
        <returns>O <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> da tarefa de execução, que determina se a atividade permanece no estado em execução ou faz a transição para o estado fechado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Workflow.ComponentModel.ActivityExecutionContext> é usado para obter informações sobre a atividade e o fluxo de trabalho em execução no momento e também é usado para obter os serviços do ambiente de tempo de execução.  
  
 A execução ocorre de forma síncrona, retornando o controle ao chamador quando a atividade é concluída ou atinge um estado intermediário.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra uma implementação do `Execute` método. Neste exemplo, uma mensagem de email do Outlook é criada e enviada. Este exemplo é da amostra do SDK de Assistente de fluxo de trabalho do Outlook. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Exemplo de Assistente de fluxo de trabalho do outlook](http://msdn.microsoft.com/en-us/7b2ba92b-8456-43f3-87fc-184ffdec4408).  
  
 [!code-csharp[WF_Samples#98](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#98)]
 [!code-vb[WF_Samples#98](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#98)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Executing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Executing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Executing" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Activity.Executing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o <see cref="T:System.Workflow.ComponentModel.Activity" /> é executado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A geração de um evento invoca o manipulador de eventos por meio de um delegado. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 O <xref:System.Workflow.ComponentModel.Activity.Executing> método também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento em uma classe derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> método para que registrado delegados receber o evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ExecutingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty ExecutingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty ExecutingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Activity.ExecutingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que tem como destino o <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> evento que ocorre quando a atividade é executada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você acessa indiretamente cada evento e propriedade pública deste tipo pela resolução de uma propriedade de dependência correspondente. Essa propriedade de dependência é o campo estático público chamado `XProperty` ou `XEvent`, onde X é a propriedade correspondente.  
  
 [!INCLUDE[DependencyPropertyRemark](~/includes/dependencypropertyremark-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionResult">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.ActivityExecutionResult ExecutionResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.ActivityExecutionResult ExecutionResult" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.ExecutionResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> da última tentativa de executar essa instância.</summary>
        <value>O <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> da última tentativa de executar essa instância.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade só é útil quando uma instância de fluxo de trabalho está em execução.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecutionStatus">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.ActivityExecutionStatus ExecutionStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus ExecutionStatus" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.ExecutionStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a atual <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> desta instância.</summary>
        <value>Atual <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> desta instância.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa propriedade só é útil quando uma instância de fluxo de trabalho está em execução.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Faulting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Faulting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; Faulting" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Activity.Faulting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma exceção é gerada durante a execução da instância.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]manipulação de eventos, consulte [NIB: consumindo eventos](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FaultingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty FaultingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty FaultingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Activity.FaultingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>O <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que representa o <see cref="E:System.Workflow.ComponentModel.Activity.Faulting" /> evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você acessa indiretamente cada evento e propriedade pública deste tipo pela resolução de uma propriedade de dependência correspondente. Essa propriedade de dependência é o campo estático público chamado `XProperty` ou `XEvent`, onde X é a propriedade correspondente.  
  
 [!INCLUDE[DependencyPropertyRemark](~/includes/dependencypropertyremark-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetActivityByName">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Retorna a instância do <see cref="T:System.Workflow.ComponentModel.Activity" /> cujo nome é solicitado do conjunto de todas as atividades em execução na atividade raiz desta instância que está dentro do fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamando `GetActivityByName` no construtor de uma atividade personalizada não é suportado e pode ter resultados inesperados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetActivityByName">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetActivityByName (string activityQualifiedName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetActivityByName(string activityQualifiedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityQualifiedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="activityQualifiedName">O nome do <see cref="T:System.Workflow.ComponentModel.Activity" /> a ser pesquisado.</param>
        <summary>Retorna a instância do <see cref="T:System.Workflow.ComponentModel.Activity" /> cujo nome é solicitado do conjunto de todas as atividades em execução na atividade raiz desta instância, que está dentro do fluxo de trabalho.</summary>
        <returns>A instância do <see cref="T:System.Workflow.ComponentModel.Activity" /> cujo nome é solicitado do conjunto de todas as atividades em execução na atividade raiz desta instância.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamando `GetActivityByName` no construtor de uma atividade personalizada não é suportado e pode ter resultados inesperados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activityQualifiedID" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetActivityByName">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.Activity GetActivityByName (string activityQualifiedName, bool withinThisActivityOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.ComponentModel.Activity GetActivityByName(string activityQualifiedName, bool withinThisActivityOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityQualifiedName" Type="System.String" />
        <Parameter Name="withinThisActivityOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="activityQualifiedName">O nome do <see cref="T:System.Workflow.ComponentModel.Activity" /> a ser pesquisado.</param>
        <param name="withinThisActivityOnly">O valor que indica se é limitar a pesquisa a atividades contidas dentro desta instância.</param>
        <summary>Retorna a instância do <see cref="T:System.Workflow.ComponentModel.Activity" /> cujo nome é solicitado do conjunto de todas as atividades sob a raiz do <see cref="T:System.Workflow.ComponentModel.Activity" /> desta instância se o segundo parâmetro é <see langword="false" /> e em atual <see cref="T:System.Workflow.ComponentModel.Activity" /> se o segundo parâmetro é <see langword="true" />.</summary>
        <returns>A instância do <see cref="T:System.Workflow.ComponentModel.Activity" /> cujo nome é solicitado do conjunto de todas as atividades sob a raiz do <see cref="T:System.Workflow.ComponentModel.Activity" /> desta instância se o segundo parâmetro é <see langword="false" /> e em atual <see cref="T:System.Workflow.ComponentModel.Activity" /> se o segundo parâmetro é <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Retorna a instância do <xref:System.Workflow.ComponentModel.Activity> cujo nome é solicitado do conjunto de todas as atividades sob a raiz do <xref:System.Workflow.ComponentModel.Activity> desta instância se o segundo parâmetro é `false` e em atual <xref:System.Workflow.ComponentModel.Activity> se o segundo parâmetro é `true`.  
  
 Chamando `GetActivityByName` no construtor de uma atividade personalizada não é suportado e pode ter resultados inesperados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="activityQualifiedID" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="HandleFault">
      <MemberSignature Language="C#" Value="protected virtual System.Workflow.ComponentModel.ActivityExecutionStatus HandleFault (System.Workflow.ComponentModel.ActivityExecutionContext executionContext, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance valuetype System.Workflow.ComponentModel.ActivityExecutionStatus HandleFault(class System.Workflow.ComponentModel.ActivityExecutionContext executionContext, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.ActivityExecutionStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executionContext" Type="System.Workflow.ComponentModel.ActivityExecutionContext" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="executionContext">O <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> para essa instância.</param>
        <param name="exception">O <see cref="T:System.Exception" /> que causou essa falha.</param>
        <summary>Chamado quando uma exceção é gerada dentro do contexto de execução dessa instância.</summary>
        <returns>O <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> que resulta da tentativa de cancelar esta instância.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O método padrão tenta chamar o <xref:System.Workflow.ComponentModel.Activity.Cancel%2A> método e retorna o resultado dessa tentativa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exception" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Initialize(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Initialize(System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">O <see cref="T:System.IServiceProvider" /> que fornece o serviço de inicialização.</param>
        <summary>Chamado pelo tempo de execução de fluxo de trabalho para inicializar uma atividade durante a construção de uma nova instância de fluxo de trabalho. Este método é chamado durante a construção de um dinâmico <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="provider" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected void Invoke&lt;T&gt; (EventHandler&lt;T&gt; handler, T e) where T : EventArgs;" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Invoke&lt;(class System.EventArgs) T&gt;(class System.EventHandler`1&lt;!!T&gt; handler, !!T e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.EventArgs</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;T&gt;" />
        <Parameter Name="e" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">O tipo especificado.</typeparam>
        <param name="handler">O <see cref="T:System.EventHandler" /> a ser invocado.</param>
        <param name="e">O <see cref="T:System.EventArgs" /> a ser associado a este evento</param>
        <summary>Assina um <see cref="T:System.EventHandler" /> e invoca esse delegado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected void Invoke&lt;T&gt; (System.Workflow.ComponentModel.IActivityEventListener&lt;T&gt; eventListener, T e) where T : EventArgs;" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Invoke&lt;(class System.EventArgs) T&gt;(class System.Workflow.ComponentModel.IActivityEventListener`1&lt;!!T&gt; eventListener, !!T e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener{``0},``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.EventArgs</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="eventListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;T&gt;" />
        <Parameter Name="e" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">O tipo especificado.</typeparam>
        <param name="eventListener">O <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> a ser invocado.</param>
        <param name="e">O <see cref="T:System.EventArgs" /> a ser associado a este evento</param>
        <summary>Assina um <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> e invoca esse delegado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDynamicActivity">
      <MemberSignature Language="C#" Value="public bool IsDynamicActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDynamicActivity" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.IsDynamicActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém informações sobre se a atividade está em execução dentro do padrão <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> da instância do fluxo de trabalho.</summary>
        <value>Retorna <see langword="false" /> se a atividade está em execução dentro do padrão <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> da instância do fluxo de trabalho, caso contrário, retornará <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Carrega uma instância de um <see cref="T:System.Workflow.ComponentModel.Activity" /> de um <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Chamar esse método com dados não confiáveis é um risco de segurança. Chame este método apenas com dados confiáveis. Para obter mais informações, consulte [riscos de segurança de dados não confiável](http://go.microsoft.com/fwlink/?LinkId=330378).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Workflow.ComponentModel.Activity Load (System.IO.Stream stream, System.Workflow.ComponentModel.Activity outerActivity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Workflow.ComponentModel.Activity Load(class System.IO.Stream stream, class System.Workflow.ComponentModel.Activity outerActivity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
      </Parameters>
      <Docs>
        <param name="stream">O <see cref="T:System.IO.Stream" /> da qual carregar.</param>
        <param name="outerActivity">O <see cref="T:System.Workflow.ComponentModel.Activity" /> que possui o contexto para o desserializado <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
        <summary>Carrega uma instância de um <see cref="T:System.Workflow.ComponentModel.Activity" /> de um <see cref="T:System.IO.Stream" />.</summary>
        <returns>Uma instância de um <see cref="T:System.Workflow.ComponentModel.Activity" /> de um <see cref="T:System.IO.Stream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Chamar esse método com dados não confiáveis é um risco de segurança. Chame este método apenas com dados confiáveis. Para obter mais informações, consulte [riscos de segurança de dados não confiável](http://go.microsoft.com/fwlink/?LinkId=330378).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static System.Workflow.ComponentModel.Activity Load (System.IO.Stream stream, System.Workflow.ComponentModel.Activity outerActivity, System.Runtime.Serialization.IFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Workflow.ComponentModel.Activity Load(class System.IO.Stream stream, class System.Workflow.ComponentModel.Activity outerActivity, class System.Runtime.Serialization.IFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.Activity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="outerActivity" Type="System.Workflow.ComponentModel.Activity" />
        <Parameter Name="formatter" Type="System.Runtime.Serialization.IFormatter" />
      </Parameters>
      <Docs>
        <param name="stream">O destino <see cref="T:System.IO.Stream" /> a operação de carregamento.</param>
        <param name="outerActivity">O <see cref="T:System.Workflow.ComponentModel.Activity" /> que possui o contexto para o desserializado <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
        <param name="formatter">O <see cref="T:System.Runtime.Serialization.IFormatter" /> usado para ler a partir de <see cref="T:System.IO.Stream" />.</param>
        <summary>Carrega uma instância de um <see cref="T:System.Workflow.ComponentModel.Activity" /> de um <see cref="T:System.IO.Stream" /> usando personalizado <see cref="T:System.Runtime.Serialization.IFormatter" /> para desserialização.</summary>
        <returns>Uma instância de um <see cref="T:System.Workflow.ComponentModel.Activity" /> de um <see cref="T:System.IO.Stream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  Chamar esse método com dados não confiáveis é um risco de segurança. Chame este método apenas com dados confiáveis. Para obter mais informações, consulte [riscos de segurança de dados não confiável](http://go.microsoft.com/fwlink/?LinkId=330378).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="formatter" />é uma referência nula (<see langword="Nothing" />).</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome desta instância. Esse nome deve estar de acordo com a convenção de nomenclatura de variável da linguagem de programação que está sendo usada no projeto de fluxo de trabalho.</summary>
        <value>O nome desta instância.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor padrão para isso é a cadeia de caracteres vazia.  
  
 Essa propriedade é uma propriedade de metadados, o que significa que ele não pode ser alterado em tempo de execução. Propriedades de metadados não alteram o após uma instância de propriedade é criada em tempo de execução, para que a propriedade deve ser definida como um valor literal em tempo de design.  
  
   
  
## Examples  
 O código a seguir mostra como criar atividades e adicioná-los como filhos a uma atividade composta e definir o valor de <xref:System.Workflow.ComponentModel.Activity.Name%2A>.  
  
 Este exemplo de código é parte do exemplo Throw SDK e do arquivo de ThrowWorkFlow.cs. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Throw exemplo](http://msdn.microsoft.com/en-us/aa5b9546-ec95-4e43-8337-20e26f8d71cc).  
  
 [!code-csharp[WF_Samples#179](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#179)]
 [!code-vb[WF_Samples#179](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#179)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExecutionContextLoad">
      <MemberSignature Language="C#" Value="protected virtual void OnActivityExecutionContextLoad (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnActivityExecutionContextLoad(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">O <see cref="T:System.IServiceProvider" /> que fornece o serviço.</param>
        <summary>Chamado pelo tempo de execução do fluxo de trabalho sempre que um <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> é carregado. Por exemplo, este método é chamado durante a criação de um <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> , bem como toda vez que o <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> é reincarnated quando uma instância de fluxo de trabalho é carregada do armazenamento persistente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnActivityExecutionContextUnload">
      <MemberSignature Language="C#" Value="protected virtual void OnActivityExecutionContextUnload (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnActivityExecutionContextUnload(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">O <see cref="T:System.IServiceProvider" /> que fornece o serviço.</param>
        <summary>Chamado pelo tempo de execução do fluxo de trabalho sempre que um <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> é descarregado. Por exemplo, este método é chamado durante a conclusão de uma <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> , bem como sempre o <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> é descarregado quando uma instância de fluxo de trabalho é mantida.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">O <see cref="T:System.IServiceProvider" /> que fornece o serviço.</param>
        <summary>Chamado pelo tempo de execução do fluxo de trabalho como parte da transição da atividade para o estado fechado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece a atividade a oportunidade de limpar os recursos utilizados durante sua execução.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Workflow.ComponentModel.CompositeActivity Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Workflow.ComponentModel.CompositeActivity Parent" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.CompositeActivity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> que contém esta <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
        <value>O <see cref="T:System.Workflow.ComponentModel.Activity" /> que é um pai para este <see cref="T:System.Workflow.ComponentModel.Activity" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Referência de retorna um nulo (`Nothing` no Visual Basic) se <xref:System.Workflow.ComponentModel.Activity> é um fluxo de trabalho ou uma raiz <xref:System.Workflow.ComponentModel.Activity>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QualifiedName">
      <MemberSignature Language="C#" Value="public string QualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.QualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o nome qualificado da atividade. Nomes de atividades qualificado sempre são exclusivos em uma instância de fluxo de trabalho.</summary>
        <value>O nome qualificado da instância.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nome qualificado é o nome desta instância com o nome da atividade personalizada que contém essa instância acrescentada à frente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseEvent">
      <MemberSignature Language="C#" Value="protected void RaiseEvent (System.Workflow.ComponentModel.DependencyProperty dependencyEvent, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaiseEvent(class System.Workflow.ComponentModel.DependencyProperty dependencyEvent, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyEvent" Type="System.Workflow.ComponentModel.DependencyProperty" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="dependencyEvent">O <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associado a este <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
        <param name="sender">A fonte de <see cref="T:System.Object" /> do <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
        <param name="e">O <see cref="T:System.EventArgs" /> associado ao <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
        <summary>Gera um <see cref="F:System.Reflection.MemberTypes.Event" /> associados com a propriedade de dependência especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O código a seguir chama esse método para gerar um evento que é definido como um <xref:System.Workflow.ComponentModel.DependencyProperty>.  
  
 Este exemplo de código é parte do exemplo de atividade de envio de email e do arquivo de SendEmailActivity.cs. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Enviar exemplo de atividade de email](http://msdn.microsoft.com/en-us/bfb5939e-60a9-4037-af4e-2cea9e654669)  
  
 [!code-csharp[WF_Samples#233](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#233)]
 [!code-vb[WF_Samples#233](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#233)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseGenericEvent&lt;T&gt;">
      <MemberSignature Language="C#" Value="protected void RaiseGenericEvent&lt;T&gt; (System.Workflow.ComponentModel.DependencyProperty dependencyEvent, object sender, T e) where T : EventArgs;" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaiseGenericEvent&lt;(class System.EventArgs) T&gt;(class System.Workflow.ComponentModel.DependencyProperty dependencyEvent, object sender, !!T e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.EventArgs</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="dependencyEvent" Type="System.Workflow.ComponentModel.DependencyProperty" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">O tipo especificado.</typeparam>
        <param name="dependencyEvent">O <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associado a este <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
        <param name="sender">O <see cref="T:System.Object" /> origem do evento.</param>
        <param name="e">O <see cref="T:System.EventArgs" /> associado ao <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
        <summary>Gera o evento associado referenciado <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterForStatusChange">
      <MemberSignature Language="C#" Value="public void RegisterForStatusChange (System.Workflow.ComponentModel.DependencyProperty dependencyProp, System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; activityStatusChangeListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForStatusChange(class System.Workflow.ComponentModel.DependencyProperty dependencyProp, class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; activityStatusChangeListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyProp" Type="System.Workflow.ComponentModel.DependencyProperty" />
        <Parameter Name="activityStatusChangeListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyProp">O <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> a ser registrado.</param>
        <param name="activityStatusChangeListener">O objeto que implementa a interface de ouvinte de eventos para esse registro.</param>
        <summary>Registra especificado <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> para o evento de alteração de status.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dependencyProp" />não é um dos seguintes:  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.ExecutingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.CancelingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.ClosedEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.CompensatingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.FaultingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">O <see cref="T:System.IO.Stream" /> no qual salvar o <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
        <summary>Grava o <see cref="T:System.Workflow.ComponentModel.Activity" /> para um <see cref="T:System.IO.Stream" /> para persistência.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (System.IO.Stream stream, System.Runtime.Serialization.IFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(class System.IO.Stream stream, class System.Runtime.Serialization.IFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="formatter" Type="System.Runtime.Serialization.IFormatter" />
      </Parameters>
      <Docs>
        <param name="stream">O destino <see cref="T:System.IO.Stream" /> Salvar operação.</param>
        <param name="formatter">O binário ou personalizada <see cref="T:System.Runtime.Serialization.IFormatter" /> para a serialização.</param>
        <summary>Grava o <see cref="T:System.Workflow.ComponentModel.Activity" /> para um <see cref="T:System.IO.Stream" /> para persistência usando personalizado <see cref="T:System.Runtime.Serialization.IFormatter" /> fornecido para a serialização.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Formatadores de SOAP não são suportados pelo Windows Workflow Foundation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="formatter" />é uma referência nula (<see langword="Nothing" />).</exception>
        <exception cref="T:System.InvalidOperationException">Esta instância está no modo de design.</exception>
      </Docs>
    </Member>
    <Member MemberName="StatusChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; StatusChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; StatusChanged" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.ComponentModel.Activity.StatusChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando o <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> de execução <see cref="T:System.Workflow.ComponentModel.Activity" /> alterações.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A geração de um evento invoca o manipulador de eventos por meio de um delegado. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][NIB: gerar um evento](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 O <xref:System.Workflow.ComponentModel.Activity.StatusChanged> método também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento em uma classe derivada.  
  
> [!NOTE]
>  Quando uma atividade (uma atividade) assina uma diferente da atividade (atividade B) `StatusChanged` evento, o `Activity` propriedade associado <xref:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs> refere-se à atividade assinada (atividade B) e os respectivos `Sender` objeto se refere ao contexto de execução da atividade de assinatura (uma atividade).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="E:System.Workflow.ComponentModel.Activity.StatusChanged" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="E:System.Workflow.ComponentModel.Activity.StatusChanged" /> método para que registrado delegados receber o evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StatusChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Workflow.ComponentModel.DependencyProperty StatusChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Workflow.ComponentModel.DependencyProperty StatusChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.ComponentModel.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Representa o <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> que tem como destino o <see cref="E:System.Workflow.ComponentModel.Activity.StatusChanged" /> evento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você acessa indiretamente cada evento e propriedade pública deste tipo pela resolução de uma propriedade de dependência correspondente. Essa propriedade de dependência é o campo estático público chamado `XProperty` ou `XEvent`, onde X é a propriedade correspondente.  
  
 [!INCLUDE[DependencyPropertyRemark](~/includes/dependencypropertyremark-md.md)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornece uma cadeia de caracteres que representa esta instância.</summary>
        <returns>Esta instância.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A cadeia de caracteres retornada é uma combinação da <xref:System.Workflow.ComponentModel.Activity.QualifiedName%2A> e <xref:System.Type.FullName%2A> do tipo dessa instância.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackData">
      <MemberSignature Language="C#" Value="protected void TrackData (object userData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TrackData(object userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.TrackData(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userData">
          <see cref="T:System.Object" />que contém as informações de rastreamento.</param>
        <summary>Informa a infra-estrutura de controle de tempo de execução de pendente informações de controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir mostra uma chamada para o `TrackData` método. Este exemplo é do exemplo do SDK do serviço de controle de encerramento. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Exemplo de serviço de controle de encerramento](http://msdn.microsoft.com/en-us/29b7c0d7-cece-4bb9-96d0-c5b6c6e14439).  
  
 [!code-csharp[WF_Samples#118](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#118)]
 [!code-vb[WF_Samples#118](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#118)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userData" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="TrackData">
      <MemberSignature Language="C#" Value="protected void TrackData (string userDataKey, object userData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void TrackData(string userDataKey, object userData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDataKey" Type="System.String" />
        <Parameter Name="userData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userDataKey">A chave para os dados do usuário que foi alterado.</param>
        <param name="userData">
          <see cref="T:System.Object" />que contém as informações de rastreamento.</param>
        <summary>Informa a infra-estrutura de controle de tempo de execução de pendente informações de controle.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userData" /> é uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Uninitialize">
      <MemberSignature Language="C#" Value="protected virtual void Uninitialize (IServiceProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void Uninitialize(class System.IServiceProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="provider">O <see cref="T:System.IServiceProvider" /> que fornece o serviço.</param>
        <summary>Quando substituído em uma classe derivada, fornece Cancelar inicialização por um provedor de serviço para a atividade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método fornece a atividade a oportunidade para limpar os recursos alocados durante a inicialização.  
  
 <xref:System.Workflow.ComponentModel.Activity.Uninitialize%2A>é chamado quando uma instância de atividade é garantida para não executar qualquer execução mais. Atividades que não implementam <xref:System.Workflow.ComponentModel.ICompensatableActivity>, isso ocorre imediatamente após a atividade fecha ou, se a atividade nunca executado, na conclusão do fluxo de trabalho. Para <xref:System.Workflow.ComponentModel.ICompensatableActivity> atividades, isso ocorre depois de compensação ou na conclusão do fluxo de trabalho.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterForStatusChange">
      <MemberSignature Language="C#" Value="public void UnregisterForStatusChange (System.Workflow.ComponentModel.DependencyProperty dependencyProp, System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; activityStatusChangeListener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterForStatusChange(class System.Workflow.ComponentModel.DependencyProperty dependencyProp, class System.Workflow.ComponentModel.IActivityEventListener`1&lt;class System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt; activityStatusChangeListener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyProp" Type="System.Workflow.ComponentModel.DependencyProperty" />
        <Parameter Name="activityStatusChangeListener" Type="System.Workflow.ComponentModel.IActivityEventListener&lt;System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyProp">O <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> para cancelar o registro.</param>
        <param name="activityStatusChangeListener">O objeto que implementa a interface de ouvinte de eventos para esse registro.</param>
        <summary>Cancelar registro especificado <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> para o evento de alteração de status.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dependencyProp" />não é um dos seguintes:  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.ExecutingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.CancelingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.ClosedEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.CompensatingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.FaultingEvent" />  
  
-   <see cref="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent" /></exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowInstanceId">
      <MemberSignature Language="C#" Value="protected Guid WorkflowInstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid WorkflowInstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.ComponentModel.Activity.WorkflowInstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.ComponentModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Guid" /> associado à instância.</summary>
        <value>O <see cref="T:System.Guid" /> associado à instância.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
