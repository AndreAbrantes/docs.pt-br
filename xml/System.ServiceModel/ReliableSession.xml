<Type Name="ReliableSession" FullName="System.ServiceModel.ReliableSession">
  <TypeSignature Language="C#" Value="public class ReliableSession" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ReliableSession extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ReliableSession" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece acesso conveniente às propriedades de um elemento de associação de sessão confiável que estão disponíveis ao usar uma das associações fornecidas pelo sistema.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As propriedades contidas no <xref:System.ServiceModel.ReliableSession> classe são o subconjunto dos contidos no <xref:System.ServiceModel.Channels.ReliableSessionBindingElement> acessíveis a partir de uma associação predefinida. Esse subconjunto consiste de <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> e <xref:System.ServiceModel.ReliableSession.Ordered%2A> propriedades. O <xref:System.ServiceModel.ReliableSession> a classe referencia os mesmos objetos faz o <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>, portanto, alterar o valor de um altera o valor do outro muito. Essa classe reúne essas duas propriedades de elemento de associação de sessão confiável juntas para melhor capacidade de descoberta.  
  
   
  
## Examples  
 O exemplo a seguir mostra como criar uma nova sessão confiável e acessar e alterar os valores de propriedade de sessão. O <xref:System.ServiceModel.ReliableSession> classe permite que você escreva:  
  
 [!code-csharp[UEReliableSession#1](~/samples/snippets/csharp/VS_Snippets_CFX/uereliablesession/cs/program.cs#1)]
 [!code-vb[UEReliableSession#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/uereliablesession/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReliableSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ReliableSession.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ServiceModel.ReliableSession" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReliableSession (System.ServiceModel.Channels.ReliableSessionBindingElement binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.Channels.ReliableSessionBindingElement binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reliableSessionBindingElement" Type="System.ServiceModel.Channels.ReliableSessionBindingElement" />
      </Parameters>
      <Docs>
        <param name="binding">To be added.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.ServiceModel.ReliableSession" /> classe a partir de um elemento de associação de sessão confiável.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UEReliableSession#1](~/samples/snippets/csharp/VS_Snippets_CFX/uereliablesession/cs/program.cs#1)]
 [!code-vb[UEReliableSession#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/uereliablesession/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="binding" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InactivityTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InactivityTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InactivityTimeout" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ReliableSession.InactivityTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o intervalo de tempo durante o qual um serviço pode permanecer inativo antes de ser fechado.</summary>
        <value>O <see cref="T:System.TimeSpan" /> que especifica o intervalo de tempo que um serviço permanece inativo antes de ser fechado. O valor padrão é 10 minutos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade obtém e define o valor de <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.InactivityTimeout%2A> propriedade.  
  
 Atividade em um canal é definida como receber uma mensagem de infraestrutura ou de aplicativo. A propriedade de tempo limite de inatividade controla a quantidade máxima de tempo para manter uma sessão inativa ativa. Se mais do <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> passa de intervalo de tempo especificado sem nenhuma atividade, a sessão será anulada, a infraestrutura e as falhas de canal. A sessão confiável é subdividida forma unilateral.  
  
 Se o aplicativo enviar nenhuma mensagem a enviar, em seguida, a sessão confiável normalmente não apresentou falha devido a inatividade; em vez disso, um mecanismo keep-alive mantém a sessão ativa indefinidamente. Observe que o dispatcher independentemente foi possível cancelar a sessão confiável se nenhuma mensagem de aplicativo é enviadas ou recebidas. Portanto, o tempo limite de inatividade normalmente expira se as condições de rede, de modo que nenhuma mensagem de qualquer tipo é recebida ou se houver uma falha no remetente.  
  
 Definir esse tempo limite impede que o servidor mantiver uma sessão de segurança se o cliente não fechá-la. Se a sessão de segurança não recebeu uma mensagem para o intervalo de tempo de inatividade, ela é fechada pelo servidor. Isso reduz a um potencial ataque de negação de serviço.  
  
 Ao usar uma sessão confiável, existem dois timers de inatividade diferentes que devem ser atendidos para manter a conexão ativa. Se qualquer um desses temporizadores de inatividade for, a conexão é descartado.  
  
-   O timer de inatividade primeiro está na sessão confiável e é chamado de <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A>. Esse tempo de inatividade é acionada se nenhuma mensagem, aplicativo ou infraestrutura, for recebida dentro do período de tempo limite. Uma mensagem de infraestrutura é uma mensagem que é gerada com a finalidade de um dos protocolos na pilha de canais, como um keep alive ou uma confirmação, em vez de contendo dados de aplicativo.  
  
-   O timer de inatividade segundo é o serviço e usa o <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> configuração da associação. Esse tempo de inatividade é acionada se nenhuma mensagem de aplicativo for recebida dentro do período de tempo limite.  
  
 Desde que a conexão será descartada se o timer de inatividade é acionado, aumentando <xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A> depois que for maior que <xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A> não tem nenhum efeito. O padrão para ambos esses tempos limite é 10 minutos, para que você sempre tenha que aumentar a ambos os parâmetros de fazer a diferença ao usar uma sessão confiável.  
  
   
  
## Examples  
 [!code-csharp[UEReliableSession#2](~/samples/snippets/csharp/VS_Snippets_CFX/uereliablesession/cs/program.cs#2)]
 [!code-vb[UEReliableSession#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/uereliablesession/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor definido é menor ou igual a zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="Ordered">
      <MemberSignature Language="C#" Value="public bool Ordered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Ordered" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.ReliableSession.Ordered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se a entrega de mensagens deve preservar a ordem na qual as mensagens são enviadas.</summary>
        <value>
          <see langword="true" />Se as mensagens devem ser entregues na ordem em que são enviados; Caso contrário, <see langword="false" />. O valor padrão é <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A propriedade obtém e define o valor de <xref:System.ServiceModel.Channels.ReliableSessionBindingElement.Ordered%2A> propriedade.  
  
   
  
## Examples  
 [!code-csharp[UEReliableSession#2](~/samples/snippets/csharp/VS_Snippets_CFX/uereliablesession/cs/program.cs#2)]
 [!code-vb[UEReliableSession#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/uereliablesession/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
