<Type Name="IMultiTargetingSupportService" FullName="System.Activities.Presentation.Hosting.IMultiTargetingSupportService">
  <TypeSignature Language="C#" Value="public interface IMultiTargetingSupportService" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMultiTargetingSupportService" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Hosting.IMultiTargetingSupportService" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Fornece vários destinos para os hosts do Designer de fluxo de trabalho do Windows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *Multiplataforma* é a capacidade de localizar a versão correta do assembly carregado que corresponde ao destino [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] versão do projeto atual do fluxo de trabalho em [!INCLUDE[vs2010](~/includes/vs2010-md.md)].  
  
 Essa interface é implementada e usado internamente pelo [!INCLUDE[wf1](~/includes/wf1-md.md)] componentes do designer para resolver [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assemblies de vários destinos com reconhecimento de forma dentro de [!INCLUDE[vs2010](~/includes/vs2010-md.md)] hospedando o aplicativo. O [!INCLUDE[wf1](~/includes/wf1-md.md)] componentes designer usam a implementação dessa interface somente quando assemblies adicionais precisam ser carregados dinamicamente para a edição `AppDomain`.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetReflectionAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly GetReflectionAssembly (System.Reflection.AssemblyName targetAssemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly GetReflectionAssembly(class System.Reflection.AssemblyName targetAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetReflectionAssembly(System.Reflection.AssemblyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetAssemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="targetAssemblyName">O nome do assembly.</param>
        <summary>Retorna o assembly carregado no momento, considerando o nome do assembly.</summary>
        <returns>O assembly carregado atualmente considerando o nome do assembly.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeType">
      <MemberSignature Language="C#" Value="public Type GetRuntimeType (Type reflectionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetRuntimeType(class System.Type reflectionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.GetRuntimeType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reflectionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="reflectionType">O tipo para obter o tipo de tempo de execução do.</param>
        <summary>Obtém o tipo de tempo de execução que corresponde ao tipo especificado.</summary>
        <returns>O tipo de tempo de execução que corresponde ao tipo especificado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupportedType">
      <MemberSignature Language="C#" Value="public bool IsSupportedType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupportedType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.IMultiTargetingSupportService.IsSupportedType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">O tipo a ser inspecionado.</param>
        <summary>Retorna um valor que indica se o tipo especificado tem suporte.</summary>
        <returns>
          <see langword="true" />Se houver suporte para o tipo especificado; Caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
