<Type Name="ExpressionContext" FullName="System.ComponentModel.Design.Serialization.ExpressionContext">
  <TypeSignature Language="C#" Value="public sealed class ExpressionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExpressionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.ExpressionContext" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece uma maneira de passar o estado de contexto entre serializadores. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.ComponentModel.Design.Serialization.ExpressionContext> é colocado na pilha de contexto e contém a expressão mais relevante durante a serialização. O código c# a seguir demonstra uma atribuição.  
  
```csharp  
button1.Text = "Hello";  
```  
  
 Durante a serialização, vários serializadores são responsáveis por criar essa única instrução. Um desses serializadores é responsável pela criação de "Olá". Há ocasiões em que o serializador pode precisa saber o contexto no qual ele está criando sua expressão. No exemplo anterior, não é necessário neste contexto. O código c# a seguir mostra uma situação em que é necessário conhecer o contexto.  
  
```csharp  
button1.Text = rm.GetString("button1_Text");  
```  
  
 Nesse caso, o serializador responsável por criar a expressão de recurso precisa ser informado sobre os nomes dos objetos de destino. O <xref:System.ComponentModel.Design.Serialization.ExpressionContext> classe pode ser usada para isso. Como cada serializador cria uma expressão e invoca um serializador para lidar com uma parte menor da instrução como um todo, o serializador envia um contexto de expressão na pilha de contexto. O contexto de cada expressão tem uma propriedade de pai que localiza o contexto de expressão Avançar na pilha. Isso fornece um recurso conveniente de passagem.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">A expressão de código fornecido.</param>
        <param name="expressionType">O tipo de expressão de código fornecido.</param>
        <param name="owner">O proprietário de expressão de código fornecido.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> classe com a expressão fornecida e o proprietário.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" />, <paramref name="expressionType" /> ou <paramref name="owner" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeExpression expression, class System.Type expressionType, object owner, object presetValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="expressionType" Type="System.Type" />
        <Parameter Name="owner" Type="System.Object" />
        <Parameter Name="presetValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">A expressão de código fornecido.</param>
        <param name="expressionType">O tipo de expressão de código fornecido.</param>
        <param name="owner">O proprietário de expressão de código fornecido.</param>
        <param name="presetValue">A expressão de código fornecido valor predefinido.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> classe com um valor atual.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expression" />, <paramref name="expressionType" /> ou <paramref name="owner" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeExpression Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeExpression Expression" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a expressão que representa neste contexto.</summary>
        <value>A expressão que representa neste contexto.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionType">
      <MemberSignature Language="C#" Value="public Type ExpressionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ExpressionType" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Type" /> da expressão.</summary>
        <value>O <see cref="T:System.Type" /> da expressão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar <xref:System.ComponentModel.Design.Serialization.ExpressionContext> para determinar se uma conversão é necessária ao atribuir a expressão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public object Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Owner" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto que possui essa expressão.</summary>
        <value>O objeto que possui essa expressão.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se a expressão for uma referência de propriedade para o <xref:System.Windows.Forms.Control.Text%2A> propriedade de uma instância de <xref:System.Windows.Forms.Button> chamado `button1`, <xref:System.ComponentModel.Design.Serialization.ExpressionContext.Owner%2A> retorna `button1`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresetValue">
      <MemberSignature Language="C#" Value="public object PresetValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object PresetValue" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o valor predefinido de uma expressão.</summary>
        <value>O valor predefinido dessa expressão, ou <see langword="null" /> se não atribuído.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contém o valor predefinido de uma expressão, um existe. Por exemplo, se a expressão for uma expressão de referência de propriedade referenciando o <xref:System.Windows.Forms.Control.Controls%2A> propriedade de um <xref:System.Windows.Forms.Button>, o <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> propriedade contém a instância do <xref:System.Windows.Forms.Control.Controls%2A> propriedade. Isso ocorre porque a propriedade é somente leitura e predefinida pelo objeto para conter um valor. Por outro lado, uma propriedade como <xref:System.Windows.Forms.Control.Text%2A> ou <xref:System.Windows.Forms.Control.Visible%2A> não tem um valor predefinido e, portanto, o <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> propriedade retorna `null`.  
  
 O código c# a seguir mostra como serializadores podem usar essas informações para orientar a serialização.  
  
```csharp  
Padding p = new Padding();  
p.Left = 5;  
button1.Padding = p;  
  
button1.Padding.Left = 5;  
```  
  
 O serializador do <xref:System.Windows.Forms.Padding> estrutura precisa ser informado se ele deve gerar o primeiro ou segundo formulário. O primeiro formulário é gerado por padrão. O segundo formulário é gerado apenas se houver um <xref:System.ComponentModel.Design.Serialization.ExpressionContext> na pilha de contexto que contém um <xref:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue%2A> igual ao valor da <xref:System.Windows.Forms.Padding> que está sendo serializado atualmente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
