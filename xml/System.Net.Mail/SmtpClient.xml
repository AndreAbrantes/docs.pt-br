<Type Name="SmtpClient" FullName="System.Net.Mail.SmtpClient">
  <TypeSignature Language="C#" Value="public class SmtpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SmtpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Mail.SmtpClient" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Mail</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("SmtpClient and its network of types are poorly designed, we strongly recommend you use https://github.com/jstedfast/MailKit and https://github.com/jstedfast/MimeKit instead")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite que aplicativos enviem email usando o Protocolo SMTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.Mail.SmtpClient> classe é usada para enviar email a um servidor SMTP para entrega. O protocolo SMTP está definido no RFC 2821, que está disponível em [http://www.ietf.org](http://www.ietf.org/).  
  
 As classes mostradas na tabela a seguir são usadas para construir mensagens de email que podem ser enviadas usando <xref:System.Net.Mail.SmtpClient>.  
  
|Classe|Descrição|  
|-----------|-----------------|  
|<xref:System.Net.Mail.Attachment>|Representa a anexos de arquivo. Essa classe permite que você anexe os arquivos, fluxos ou texto para uma mensagem de email.|  
|<xref:System.Net.Mail.MailAddress>|Representa o endereço de email do remetente e destinatários.|  
|<xref:System.Net.Mail.MailMessage>|Representa uma mensagem de email.|  
  
 Para construir e enviar uma mensagem de email usando <xref:System.Net.Mail.SmtpClient>, você deve especificar as seguintes informações:  
  
-   O servidor de host de SMTP que você usa para enviar email. Consulte o <xref:System.Net.Mail.SmtpClient.Host%2A> e <xref:System.Net.Mail.SmtpClient.Port%2A> propriedades.  
  
-   Credenciais de autenticação, se exigido pelo servidor SMTP. Consulte a propriedade <xref:System.Net.Mail.SmtpClient.Credentials%2A>.  
  
-   O endereço de email do remetente. Consulte o <xref:System.Net.Mail.SmtpClient.Send%2A> e <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos que usam um `from` parâmetro. Consulte também o <xref:System.Net.Mail.MailMessage.From%2A?displayProperty=nameWithType> propriedade.  
  
-   O endereço de email ou endereços de destinatários. Consulte o <xref:System.Net.Mail.SmtpClient.Send%2A> e <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos que usam um `recipient` parâmetro. Consulte também o <xref:System.Net.Mail.MailMessage.To%2A?displayProperty=nameWithType> propriedade.  
  
-   O conteúdo da mensagem. Consulte o <xref:System.Net.Mail.SmtpClient.Send%2A> e <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos que usam um `body` parâmetro. Consulte também o <xref:System.Net.Mail.MailMessage.Body%2A?displayProperty=nameWithType> propriedade.  
  
 Para incluir um anexo com uma mensagem de email, primeiro crie o anexo usando o <xref:System.Net.Mail.Attachment> classe e, em seguida, adicioná-lo para a mensagem usando o <xref:System.Net.Mail.MailMessage.Attachments%2A?displayProperty=nameWithType> propriedade. Dependendo do leitor de email usado, os destinatários e o tipo de arquivo do anexo, alguns destinatários não poderá ler o anexo. Para clientes que não é possível exibir o anexo em seu formato original, você pode especificar os modos de exibição alternativos usando o <xref:System.Net.Mail.MailMessage.AlternateViews%2A?displayProperty=nameWithType> propriedade.  
  
 Você pode usar o aplicativo ou arquivos de configuração de máquina para especificar valores de credenciais, porta e host padrão para todos os <xref:System.Net.Mail.SmtpClient> objetos. Para obter mais informações, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md).  
  
 Para enviar a mensagem de email e o bloco enquanto aguarda o email a ser transmitido para o servidor SMTP, use um dos síncronos <xref:System.Net.Mail.SmtpClient.Send%2A> métodos. Para permitir que o thread principal de seu programa continuar em execução enquanto o email é transmitido, use um dos assíncrona <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos. O <xref:System.Net.Mail.SmtpClient.SendCompleted> é gerado quando um <xref:System.Net.Mail.SmtpClient.SendAsync%2A> operação for concluída. Para receber esse evento, você deve adicionar um <xref:System.Net.Mail.SendCompletedEventHandler> delegar para <xref:System.Net.Mail.SmtpClient.SendCompleted>. O <xref:System.Net.Mail.SendCompletedEventHandler> delegado deve fazer referência a um método de retorno de chamada que manipula a notificação de <xref:System.Net.Mail.SmtpClient.SendCompleted> eventos. Para cancelar uma transmissão de email assíncrona, use o <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> método.  
  
> [!NOTE]
>  Se houver uma transmissão de email em andamento e você chamar <xref:System.Net.Mail.SmtpClient.SendAsync%2A> ou <xref:System.Net.Mail.SmtpClient.Send%2A> novamente, você receberá um <xref:System.InvalidOperationException>.  
  
 A conexão estabelecida pela instância atual do <xref:System.Net.Mail.SmtpClient> classe para o servidor SMTP pode ser usado novamente, se um aplicativo quiser enviar várias mensagens para o mesmo servidor de SMTP. Isso é particularmente útil quando a autenticação ou criptografia são usadas estabelecer uma conexão com o servidor SMTP. O processo de autenticação e estabelecer uma sessão TLS pode ser operações caras. Um requisito para restabelecer uma conexão para cada mensagem ao enviar uma grande quantidade de email para o mesmo servidor de SMTP pode ter um impacto significativo no desempenho. Há um número de aplicativos de alto volume de email que enviar atualizações de status do email, distribuições de boletim informativo, ou alertas por email. Muitos aplicativos de cliente de email também suportam a um modo offline, em que os usuários podem compor muitas mensagens de email enviadas posteriormente quando é estabelecida uma conexão com o servidor SMTP. É comum para um cliente de email enviar todas as mensagens SMTP para um servidor SMTP específico (fornecido pelo provedor de serviços de Internet) que, em seguida, encaminha o email para outros servidores SMTP.  
  
 O <xref:System.Net.Mail.SmtpClient> implementação da classe de pools de conexões SMTP para que ele pode evitar a sobrecarga de restabelecer uma conexão para cada mensagem no mesmo servidor. Um aplicativo pode reutilizar a mesma <xref:System.Net.Mail.SmtpClient> objeto para enviar vários emails diferentes no mesmo servidor de SMTP e em muitos servidores SMTP diferentes. Como resultado, não há nenhuma maneira de determinar quando um aplicativo é concluído usando o <xref:System.Net.Mail.SmtpClient> objeto e devem ser limpa.  
  
 Quando uma sessão SMTP for concluída e o cliente quiser encerrar a conexão, ele deve enviar uma mensagem QUIT para o servidor para indicar que ele tem não mais mensagens para enviar. Isso permite que o servidor liberar os recursos associados à conexão do cliente e processar as mensagens que foram enviadas pelo cliente.  
  
 O <xref:System.Net.Mail.SmtpClient> classe não tiver nenhuma `Finalize` método, portanto, um aplicativo deve chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> explicitamente liberar recursos. O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método itera todas as conexões estabelecidas para o servidor SMTP especificado no <xref:System.Net.Mail.SmtpClient.Host%2A> propriedade e envia uma mensagem QUIT seguida normalmente encerrando a conexão TCP. O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método também libera os recursos não gerenciados usados pelo <xref:System.Net.Sockets.Socket> e, opcionalmente, libera os recursos gerenciados.  
  
 Chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> quando tiver terminado de usar o <xref:System.Net.Mail.SmtpClient>. O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método deixa o <xref:System.Net.Mail.SmtpClient> em um estado inutilizável. Depois de chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A>, você deve liberar todas as referências para o <xref:System.Net.Mail.SmtpClient> para o coletor de lixo possa recuperar a memória que o <xref:System.Net.Mail.SmtpClient> estava ocupando.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como enviar uma mensagem de email de forma assíncrona.  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Mail.SmtpClient" /> usando as definições do arquivo de configuração.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor inicializa o <xref:System.Net.Mail.SmtpClient.Host%2A>, <xref:System.Net.Mail.SmtpClient.Credentials%2A>, e <xref:System.Net.Mail.SmtpClient.Port%2A> propriedades para o novo <xref:System.Net.Mail.SmtpClient> usando as configurações do aplicativo ou os arquivos de configuração de máquina. Para obter mais informações, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md).  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como enviar uma mensagem de email.  
  
 [!code-cpp[NclMailSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#4)]
 [!code-csharp[NclMailSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#4)]  
  
 Para obter um exemplo de \<mailSettings > nó no aplicativo ou arquivo de configuração de máquina, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">para construir um <see cref="T:System.Net.Mail.SmtpClient" />. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.Connect" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">Um <see cref="T:System.String" /> que contém o nome ou endereço IP do computador host usado para transações de SMTP.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Net.Mail.SmtpClient" />, que envia o email usando o servidor SMTP especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `host` parâmetro é usado para inicializar o valor da <xref:System.Net.Mail.SmtpClient.Host%2A> propriedade. O <xref:System.Net.Mail.SmtpClient.Credentials%2A> e <xref:System.Net.Mail.SmtpClient.Port%2A> propriedades são inicializadas usando as configurações do aplicativo ou os arquivos de configuração de máquina. Se `host` é `null` ou igual a <xref:System.String.Empty?displayProperty=nameWithType>, <xref:System.Net.Mail.SmtpClient.Host%2A> é inicializada usando as configurações do aplicativo ou os arquivos de configuração de máquina.  
  
 Para obter mais informações sobre como usar o aplicativo e os arquivos de configuração de máquina, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md). Se as informações são especificadas usando <xref:System.Net.Mail.SmtpClient> construtores ou propriedades, essas informações substituem o arquivo de configuração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar este construtor.  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">para construir um <see cref="T:System.Net.Mail.SmtpClient" />. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.Connect" />.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">Um <see cref="T:System.String" /> que contém o nome ou endereço IP do host usado para transações SMTP.</param>
        <param name="port">Um <see cref="T:System.Int32" /> maior que zero que contém a porta a ser usada em <c>host</c>.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Net.Mail.SmtpClient" /> classe que envie email usando o servidor SMTP especificado e a porta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `host` e `port` parâmetros definir o valor de <xref:System.Net.Mail.SmtpClient.Host%2A> e <xref:System.Net.Mail.SmtpClient.Port%2A> propriedades, respectivamente. Se `host` é `null` ou igual a <xref:System.String.Empty?displayProperty=nameWithType>, <xref:System.Net.Mail.SmtpClient.Host%2A> é inicializada usando as configurações do aplicativo ou os arquivos de configuração de máquina. Se `port` for zero, <xref:System.Net.Mail.SmtpClient.Port%2A> é inicializada usando as configurações do aplicativo ou os arquivos de configuração de máquina. O <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedade é inicializada usando as configurações do aplicativo ou os arquivos de configuração de máquina.  
  
 Para obter mais informações sobre como usar o aplicativo e os arquivos de configuração de máquina, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md). Se as informações são especificadas usando <xref:System.Net.Mail.SmtpClient> construtores ou propriedades, essas informações substituem o arquivo de configuração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar este construtor.  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> não pode ser menor que zero.</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">para especificar a porta. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Client certificates not used")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifique quais certificados devem ser usados para estabelecer a conexão do protocolo SSL.</summary>
        <value>Um <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />, que contém um ou mais certificados do cliente. O valor padrão é derivado dos atributos de configuração do email em um arquivo de configuração.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Certificados de cliente, por padrão, são opcional. No entanto, a configuração do servidor pode exigir que o cliente apresentar um certificado válido como parte da negociação de conexão inicial.  
  
> [!NOTE]
>  A estrutura armazena em cache as sessões SSL conforme eles são criados e tenta reutilizar uma sessão em cache para uma nova solicitação, se possível. Ao tentar reutilizar uma sessão SSL, a estrutura usa o primeiro elemento da <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> (se houver), ou tentar reutilizar um sessões anônimas se <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> está vazio.  
  
   
  
## Examples  
 O exemplo de código a seguir estabelece uma conexão SSL com o servidor SMTP e usa a conexão para enviar um email.  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentialsByHost Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentialsByHost Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialsByHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define as credenciais usadas para autenticar o remetente.</summary>
        <value>Um <see cref="T:System.Net.ICredentialsByHost" /> que representa as credenciais a serem usadas para autenticação; ou <see langword="null" /> se nenhuma credencial tiver sido especificada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alguns servidores SMTP requerem que o cliente seja autenticado antes que o servidor envia um email em seu nome. Para usar suas credenciais de rede padrão, você pode definir o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> para `true` em vez de definir esta propriedade. Se o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> está definida como `false,` , em seguida, o valor definido no <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedade será usada para as credenciais ao se conectar ao servidor. Se o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> está definida como `false` e <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedade não foi definida, em seguida, o email é enviado para o servidor de forma anônima.  
  
 As informações de credenciais também podem ser especificadas usando o aplicativo e os arquivos de configuração de máquina. Para obter mais informações, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md). Se informações são especificadas usando o <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedade, essas informações substitui o arquivo de configuração.  
  
> [!CAUTION]
>  Se você fornecer credenciais para autenticação básica, elas são enviadas para o servidor em texto não criptografado. Isso pode representar um problema de segurança porque suas credenciais podem ser vistas e, em seguida, usadas por outros.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como definir as credenciais usadas para enviar um email.  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Não será possível alterar o valor dessa propriedade quando um email estiver sendo enviado.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeliveryFormat">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryFormat DeliveryFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryFormat DeliveryFormat" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o formato de entrega usado pelo <see cref="T:System.Net.Mail.SmtpClient" /> para enviar email.</summary>
        <value>Retorna <see cref="T:System.Net.Mail.SmtpDeliveryFormat" />.  
  
 O formato de entrega usado pelo <see cref="T:System.Net.Mail.SmtpClient" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliveryMethod">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryMethod DeliveryMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryMethod DeliveryMethod" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica como mensagens de email de saída serão tratadas.</summary>
        <value>Um <see cref="T:System.Net.Mail.SmtpDeliveryMethod" /> que indica como as mensagens de email são entregues.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Métodos de entrega incluem:  
  
-   Um servidor SMTP.  
  
-   Movendo o email para o diretório de retirada para o IIS, que então envia a mensagem.  
  
-   Movendo o email para um diretório especificado por <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> para entrega posterior por outro aplicativo.  
  
 O valor padrão para essa propriedade também pode ser definido em uma máquina ou arquivo de configuração do aplicativo. Todas as alterações feitas a <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> o arquivo de configuração de substituição de propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envia uma mensagem QUIT para o servidor SMTP, normalmente termina a conexão TCP e libera todos os recursos usados pela instância atual da classe <see cref="T:System.Net.Mail.SmtpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A conexão estabelecida pela instância atual do <xref:System.Net.Mail.SmtpClient> classe para o servidor SMTP pode ser usado novamente, se um aplicativo quiser enviar várias mensagens para o mesmo servidor de SMTP. Isso é particularmente útil quando a autenticação ou criptografia são usadas estabelecer uma conexão com o servidor SMTP. O processo de autenticação e estabelecer uma sessão TLS pode ser operações caras. Um requisito para restabelecer uma conexão para cada mensagem ao enviar uma grande quantidade de email para o mesmo servidor de SMTP pode ter um impacto significativo no desempenho. Há um número de aplicativos de alto volume de email que enviar atualizações de status do email, distribuições de boletim informativo, ou alertas por email. Muitos aplicativos de cliente de email também suportam a um modo offline, em que os usuários podem compor muitas mensagens de email enviadas posteriormente quando é estabelecida uma conexão com o servidor SMTP. É comum para um cliente de email enviar todas as mensagens SMTP para um servidor SMTP específico (fornecido pelo provedor de serviços de Internet) que, em seguida, encaminha o email para outros servidores SMTP.  
  
 O <xref:System.Net.Mail.SmtpClient> implementação da classe de pools de conexões SMTP para que ele pode evitar a sobrecarga de restabelecer uma conexão para cada mensagem no mesmo servidor. Um aplicativo pode reutilizar a mesma <xref:System.Net.Mail.SmtpClient> objeto para enviar vários emails diferentes no mesmo servidor de SMTP e em muitos servidores SMTP diferentes. Como resultado, não há nenhuma maneira de determinar quando um aplicativo é concluído usando o <xref:System.Net.Mail.SmtpClient> objeto e devem ser limpa.  
  
 Quando uma sessão SMTP for concluída e o cliente quiser encerrar a conexão, ele deve enviar uma mensagem QUIT para o servidor para indicar que ele tem não mais mensagens para enviar. Isso permite que o servidor liberar os recursos associados à conexão do cliente e processar as mensagens que foram enviadas pelo cliente.  
  
 O <xref:System.Net.Mail.SmtpClient.Dispose%2A> métodos itera por meio de conexões estabelecidas tudo e enviar uma mensagem QUIT para cada servidor SMTP, seguido por normalmente encerrar a conexão TCP. Esses métodos também liberar os recursos não gerenciados usados pelo <xref:System.Net.Sockets.Socket> e, opcionalmente, descartar os recursos gerenciados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Envia uma mensagem QUIT para o servidor SMTP, normalmente termina a conexão TCP e libera todos os recursos usados pela instância atual da classe <see cref="T:System.Net.Mail.SmtpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A conexão estabelecida pela instância atual do <xref:System.Net.Mail.SmtpClient> classe para o servidor SMTP pode ser usado novamente, se um aplicativo quiser enviar várias mensagens para o mesmo servidor de SMTP. Isso é particularmente útil quando a autenticação ou criptografia são usadas estabelecer uma conexão com o servidor SMTP. O processo de autenticação e estabelecer uma sessão TLS pode ser operações caras. Um requisito para restabelecer uma conexão para cada mensagem ao enviar uma grande quantidade de email para o mesmo servidor de SMTP pode ter um impacto significativo no desempenho. Há um número de aplicativos de alto volume de email que enviar atualizações de status do email, distribuições de boletim informativo, ou alertas por email. Muitos aplicativos de cliente de email também suportam a um modo offline, em que os usuários podem compor muitas mensagens de email enviadas posteriormente quando é estabelecida uma conexão com o servidor SMTP. É comum para um cliente de email enviar todas as mensagens SMTP para um servidor SMTP específico (fornecido pelo provedor de serviços de Internet) que, em seguida, encaminha o email para outros servidores SMTP.  
  
 O <xref:System.Net.Mail.SmtpClient> implementação da classe de pools de conexões SMTP para que ele pode evitar a sobrecarga de restabelecer uma conexão para cada mensagem no mesmo servidor. Um aplicativo pode reutilizar a mesma <xref:System.Net.Mail.SmtpClient> objeto para enviar vários emails diferentes no mesmo servidor de SMTP e em muitos servidores SMTP diferentes. Como resultado, não há nenhuma maneira de determinar quando um aplicativo é concluído usando o <xref:System.Net.Mail.SmtpClient> objeto e devem ser limpa.  
  
 Quando uma sessão SMTP for concluída e o cliente quiser encerrar a conexão, ele deve enviar uma mensagem QUIT para o servidor para indicar que ele tem não mais mensagens para enviar. Isso permite que o servidor liberar os recursos associados à conexão do cliente e processar as mensagens que foram enviadas pelo cliente.  
  
 Chamando o <xref:System.Net.Mail.SmtpClient.Dispose%2A> método em um <xref:System.Net.Mail.SmtpClient> objeto que está em execução assíncrona <xref:System.Net.Mail.SmtpClient.SendAsync%2A> operação cancelará a operação de envio como se a <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> tivesse sido chamado de método.  
  
 O <xref:System.Net.Mail.SmtpClient> classe não tiver nenhuma `Finalize` método. Portanto, um aplicativo deve chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> explicitamente liberar recursos.  
  
 O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método itera todas as conexões estabelecidas para o servidor SMTP especificado no <xref:System.Net.Mail.SmtpClient.Host%2A> propriedade e envia uma mensagem QUIT seguida normalmente encerrando a conexão TCP. O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método também libera os recursos não gerenciados usados pelo subjacente <xref:System.Net.Sockets.Socket>.  
  
 Chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> quando tiver terminado de usar o <xref:System.Net.Mail.SmtpClient>. O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método deixa o <xref:System.Net.Mail.SmtpClient> em um estado inutilizável. Depois de chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A>, você deve liberar todas as referências para o <xref:System.Net.Mail.SmtpClient> para o coletor de lixo possa recuperar a memória que o <xref:System.Net.Mail.SmtpClient> estava ocupando.  
  
 Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Sempre chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> antes de liberar sua última referência para o <xref:System.Net.Mail.SmtpClient>. Caso contrário, os recursos que está usando não serão liberados para que o coletor de lixo possa recuperar a memória.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Does nothing at the moment.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
        <summary>Envia uma mensagem QUIT para o servidor SMTP, normalmente termina a conexão TCP, libera todos os recursos usados pela instância atual da classe <see cref="T:System.Net.Mail.SmtpClient" /> e, opcionalmente, descarta os recursos gerenciados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A conexão estabelecida pela instância atual do <xref:System.Net.Mail.SmtpClient> classe para o servidor SMTP pode ser usado novamente, se um aplicativo quiser enviar várias mensagens para o mesmo servidor de SMTP. Isso é particularmente útil quando a autenticação ou criptografia são usadas estabelecer uma conexão com o servidor SMTP. O processo de autenticação e estabelecer uma sessão TLS pode ser operações caras. Um requisito para restabelecer uma conexão para cada mensagem ao enviar uma grande quantidade de email para o mesmo servidor de SMTP pode ter um impacto significativo no desempenho. Há um número de aplicativos de alto volume de email que enviar atualizações de status do email, distribuições de boletim informativo, ou alertas por email. Muitos aplicativos de cliente de email também suportam a um modo offline, em que os usuários podem compor muitas mensagens de email enviadas posteriormente quando é estabelecida uma conexão com o servidor SMTP. É comum para um cliente de email enviar todas as mensagens SMTP para um servidor SMTP específico (fornecido pelo provedor de serviços de Internet) que, em seguida, encaminha o email para outros servidores SMTP.  
  
 O <xref:System.Net.Mail.SmtpClient> implementação da classe de pools de conexões SMTP para que ele pode evitar a sobrecarga de restabelecer uma conexão para cada mensagem no mesmo servidor. Um aplicativo pode reutilizar a mesma <xref:System.Net.Mail.SmtpClient> objeto para enviar vários emails diferentes no mesmo servidor de SMTP e em muitos servidores SMTP diferentes. Como resultado, não há nenhuma maneira de determinar quando um aplicativo é concluído usando o <xref:System.Net.Mail.SmtpClient> objeto e devem ser limpa.  
  
 Quando uma sessão SMTP for concluída e o cliente quiser encerrar a conexão, ele deve enviar uma mensagem QUIT para o servidor para indicar que ele tem não mais mensagens para enviar. Isso permite que o servidor liberar os recursos associados à conexão do cliente e processar as mensagens que foram enviadas pelo cliente.  
  
 Chamando o <xref:System.Net.Mail.SmtpClient.Dispose%2A> método em um <xref:System.Net.Mail.SmtpClient> objeto que está em execução assíncrona <xref:System.Net.Mail.SmtpClient.SendAsync%2A> operação cancelará a operação de envio como se a <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> tivesse sido chamado de método.  
  
 O <xref:System.Net.Mail.SmtpClient> classe não tiver nenhuma `Finalize` método. Portanto, um aplicativo deve chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> explicitamente liberar recursos.  
  
 O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método itera todas as conexões estabelecidas para o servidor SMTP especificado no <xref:System.Net.Mail.SmtpClient.Host%2A> propriedade e envia uma mensagem QUIT seguida normalmente encerrando a conexão TCP. O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método também libera os recursos não gerenciados usados pelo <xref:System.Net.Sockets.Socket> e, opcionalmente, libera os recursos gerenciados.  
  
 Chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> quando tiver terminado de usar o <xref:System.Net.Mail.SmtpClient>. O <xref:System.Net.Mail.SmtpClient.Dispose%2A> método deixa o <xref:System.Net.Mail.SmtpClient> em um estado inutilizável. Depois de chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A>, você deve liberar todas as referências para o <xref:System.Net.Mail.SmtpClient> para o coletor de lixo possa recuperar a memória que o <xref:System.Net.Mail.SmtpClient> estava ocupando.  
  
 Para obter mais informações, consulte [limpeza de recursos não gerenciados](~/docs/standard/garbage-collection/unmanaged.md) e [implementar um método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Sempre chamar <xref:System.Net.Mail.SmtpClient.Dispose%2A> antes de liberar sua última referência para o <xref:System.Net.Mail.SmtpClient>. Caso contrário, os recursos que está usando não serão liberados para que o coletor de lixo possa recuperar a memória.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSsl">
      <MemberSignature Language="C#" Value="public bool EnableSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSsl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.EnableSsl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica se <see cref="T:System.Net.Mail.SmtpClient" /> usa o protocolo SSL para criptografar a conexão.</summary>
        <value>
          <see langword="true" /> se o <see cref="T:System.Net.Mail.SmtpClient" /> usar SSL; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> propriedade especifica se o SSL é usado para acessar o servidor de email SMTP.  
  
 O valor padrão para essa propriedade também pode ser definido em uma máquina ou arquivo de configuração do aplicativo. Todas as alterações feitas a <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> o arquivo de configuração de substituição de propriedade.  
  
 O <xref:System.Net.Mail.SmtpClient> classe só dá suporte à extensão do serviço SMTP para SMTP seguro em Transport Layer Security conforme definido na RFC 3207. Nesse modo, a sessão SMTP começa em um canal não criptografado, em seguida, um comando STARTTLS é emitido pelo cliente para o servidor para alternar para comunicações seguras usando SSL. Consulte RFC 3207 publicado pelo Engineering Task Force IETF (Internet) para obter mais informações.  
  
 Um método alternativo de conexão é em que uma sessão SSL é estabelecida com antecedência antes de qualquer protocolo de comandos são enviados. Esse método de conexão às vezes é chamado de SMTP/SSL, SMTP sobre SSL ou SMTPS e, por padrão usa a porta 465. Atualmente, não há suporte para esse método alternativo de conexão usando SSL.  
  
 Você pode usar <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> para especificar quais certificados de cliente devem ser usados para estabelecer a conexão SSL. O <xref:System.Net.ServicePointManager.ServerCertificateValidationCallback%2A> permite que você rejeite o certificado fornecido pelo servidor SMTP. O <xref:System.Net.ServicePointManager.SecurityProtocol%2A> propriedade permite que você especifique a versão do protocolo SSL para usar.  
  
> [!NOTE]
>  Se o <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> está definida como `true`, e o servidor de email SMTP não anuncia STARTTLS na resposta para o EHLO comando, em seguida, uma chamada para o <xref:System.Net.Mail.SmtpClient.Send%2A> ou <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos lançará um <xref:System.Net.Mail.SmtpException>.  
  
   
  
## Examples  
 O exemplo de código a seguir estabelece uma conexão SSL com o servidor SMTP e usa a conexão para enviar um email.  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome ou endereço IP do host usado para transações de SMTP.</summary>
        <value>Um <see cref="T:System.String" /> que contém o nome ou endereço IP do computador usado para transações de SMTP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.Net.Mail.SmtpClient.Host%2A> propriedade também pode ser definida usando construtores ou o aplicativo ou arquivo de configuração de máquina. Para obter mais informações, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md).  
  
 Se a informação é especificada usando essa propriedade, essas informações substituem o arquivo de configuração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como enviar uma mensagem de email usando o host e porta especificada em um arquivo de configuração do aplicativo.  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O valor especificado para uma operação de definição é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">O valor especificado para uma operação de conjuntos é igual a <see cref="F:System.String.Empty" /> ("").</exception>
        <exception cref="T:System.InvalidOperationException">Não será possível alterar o valor dessa propriedade quando um email estiver sendo enviado.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnSendCompleted">
      <MemberSignature Language="C#" Value="protected void OnSendCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSendCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> que contém dados do evento.</param>
        <summary>Aciona o evento <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes que herdam o <xref:System.Net.Mail.SmtpClient> classe pode substituir o <xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A> método adicional de executar as tarefas quando o <xref:System.Net.Mail.SmtpClient.SendCompleted> evento ocorre.  
  
 <xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A>também permite que classes derivadas tratar <xref:System.Net.Mail.SmtpClient.SendCompleted> sem anexar um representante. Essa é a técnica preferida para manipulação <xref:System.Net.Mail.SmtpClient.SendCompleted> em uma classe derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> método para que registrado delegados receber o <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PickupDirectoryLocation">
      <MemberSignature Language="C#" Value="public string PickupDirectoryLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PickupDirectoryLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a pasta em que os aplicativos salvam os emails a serem processados pelo servidor SMTP local.</summary>
        <value>Uma <see cref="T:System.String" /> que especifica o diretório de retirada de emails.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mensagens de email no diretório de recebimento são enviadas automaticamente por um servidor SMTP local (se houver), como o IIS.  
  
 O valor padrão para essa propriedade também pode ser definido em uma máquina ou arquivo de configuração do aplicativo. Todas as alterações feitas a <xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A> o arquivo de configuração de substituição de propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a porta usada para transações de SMTP.</summary>
        <value>Um <see cref="T:System.Int32" /> que contém o número da porta no host SMTP. O valor padrão é 25.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.Net.Mail.SmtpClient.Port%2A> propriedade também pode ser definida usando construtores ou o aplicativo ou arquivo de configuração de máquina. Para obter mais informações sobre como usar arquivos de configuração, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md). Se a informação é especificada usando essa propriedade, essas informações substituem o arquivo de configuração.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como enviar uma mensagem de email usando o host e porta especificada em um arquivo de configuração do aplicativo.  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor especificado para uma operação de definição é menor ou igual a zero.</exception>
        <exception cref="T:System.InvalidOperationException">Não será possível alterar o valor dessa propriedade quando um email estiver sendo enviado.</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">Para definir o <see cref="P:System.Net.Mail.SmtpClient.Port" /> propriedade. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">Um <see cref="T:System.Net.Mail.MailMessage" /> que contém a mensagem a ser enviada.</param>
        <summary>Envia a mensagem especificada para entrega a um servidor SMTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método bloqueia enquanto o email é transmitido. Você pode especificar um valor de tempo limite usando o <xref:System.Net.Mail.SmtpClient.Timeout%2A> propriedade para garantir que o método retorna após um período de tempo especificado.  
  
 Antes de chamar esse método, o <xref:System.Net.Mail.SmtpClient.Host%2A> e <xref:System.Net.Mail.SmtpClient.Port%2A> propriedades devem ser definidas por meio de arquivos de configuração, definindo as propriedades relevantes ou passando essas informações para o <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> construtor.  
  
 Você não pode chamar esse método, se houver uma mensagem que está sendo enviada de forma assíncrona.  
  
 Se o host SMTP solicitar credenciais, você deve defini-las antes de chamar esse método. Para especificar credenciais, use o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> ou <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedades.  
  
 Se você receber um <xref:System.Net.Mail.SmtpException> exceção, verifique o <xref:System.Net.Mail.SmtpException.StatusCode%2A> propriedade para localizar o motivo pelo qual a operação falhou. O <xref:System.Net.Mail.SmtpException> também pode conter uma exceção interna que indica o motivo da falha da operação.  
  
 Ao enviar email usando <xref:System.Net.Mail.SmtpClient.Send%2A> para vários destinatários e o protocolo SMTP, o servidor aceita alguns destinatários como válido e rejeita a outras pessoas, <xref:System.Net.Mail.SmtpClient.Send%2A> envia email aos destinatários aceitos e, em seguida, um <xref:System.Net.Mail.SmtpFailedRecipientsException> é gerada. A exceção contém uma lista de destinatários que foram rejeitadas.  
  
> [!NOTE]
>  Se o <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> está definida como `true`, e o servidor de email SMTP não anuncia STARTTLS na resposta para o EHLO comando, em seguida, uma chamada para o <xref:System.Net.Mail.SmtpClient.Send%2A> ou <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos lançará um <xref:System.Net.Mail.SmtpException>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar esse método.  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Este <see cref="T:System.Net.Mail.SmtpClient" /> tem uma chamada de <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> em andamento.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.MailMessage.From" /> é <see langword="null" />.  
  
 -ou-  
  
 Não há nenhum destinatário especificado nas propriedades <see cref="P:System.Net.Mail.MailMessage.To" />, <see cref="P:System.Net.Mail.MailMessage.CC" /> e <see cref="P:System.Net.Mail.MailMessage.Bcc" />.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é <see langword="null" />.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é igual à cadeia de caracteres vazia ("").  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Port" /> é zero, um número negativo ou maior que 65.535.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado.</exception>
        <exception cref="T:System.Net.Mail.SmtpException">Falha na conexão com o servidor SMTP.  
  
 -ou-  
  
 Falha na autenticação.  
  
 -ou-  
  
 Tempo limite da operação esgotado.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true" />, mas a propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> ou <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true," />, mas o servidor de email SMTP não anunciou STARTTLS na resposta para o comando EHLO.</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">O <paramref name="message" /> não pôde ser entregue a um ou mais dos destinatários em <see cref="P:System.Net.Mail.MailMessage.To" />, <see cref="P:System.Net.Mail.MailMessage.CC" /> ou <see cref="P:System.Net.Mail.MailMessage.Bcc" />.</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">para se conectar ao servidor SMTP. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string from, string to, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string from, string to, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">Um <see cref="T:System.String" /> que contém as informações de endereço do remetente da mensagem.</param>
        <param name="to">To be added.</param>
        <param name="subject">Um <see cref="T:System.String" /> que contém a linha do assunto da mensagem.</param>
        <param name="body">Um <see cref="T:System.String" /> que contém o corpo da mensagem.</param>
        <summary>Envia a mensagem de email especificada para entrega a um servidor SMTP. O remetente, os destinatários, o assunto e o corpo da mensagem são especificados usando objetos <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método bloqueia enquanto o email é transmitido. Você pode especificar um valor de tempo limite usando o <xref:System.Net.Mail.SmtpClient.Timeout%2A> propriedade para garantir que o método retorna após um período de tempo especificado.  
  
 Antes de chamar esse método, o <xref:System.Net.Mail.SmtpClient.Host%2A> e <xref:System.Net.Mail.SmtpClient.Port%2A> propriedades devem ser definidas por meio de arquivos de configuração, definindo as propriedades relevantes ou passando essas informações para o <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> construtor.  
  
 Você não pode chamar esse método, se houver uma mensagem que está sendo enviada de forma assíncrona.  
  
 Se o host SMTP solicitar credenciais, você deve defini-las antes de chamar esse método. Para especificar credenciais, use o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> ou <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedades.  
  
 Se você receber um <xref:System.Net.Mail.SmtpException> exceção, verifique o <xref:System.Net.Mail.SmtpException.StatusCode%2A> propriedade para localizar o motivo pelo qual a operação falhou. O <xref:System.Net.Mail.SmtpException> também pode conter uma exceção interna que indica o motivo da falha da operação.  
  
 Ao enviar email usando <xref:System.Net.Mail.SmtpClient.Send%2A> para vários destinatários e o protocolo SMTP, o servidor aceita alguns destinatários como válido e rejeita a outras pessoas, <xref:System.Net.Mail.SmtpClient.Send%2A> envia email aos destinatários aceitos e, em seguida, um <xref:System.Net.Mail.SmtpFailedRecipientsException> é gerada. A exceção contém uma lista de destinatários que foram rejeitadas.  
  
> [!NOTE]
>  Se o <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> está definida como `true`, e o servidor de email SMTP não anuncia STARTTLS na resposta para o EHLO comando, em seguida, uma chamada para o <xref:System.Net.Mail.SmtpClient.Send%2A> ou <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos lançará um <xref:System.Net.Mail.SmtpException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> é <see langword="null" />.  
  
 -ou-  
  
 <paramref name="recipients" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> é <see cref="F:System.String.Empty" />.  
  
 -ou-  
  
 <paramref name="recipients" /> é <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Este <see cref="T:System.Net.Mail.SmtpClient" /> tem uma chamada de <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> em andamento.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é <see langword="null" />.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é igual à cadeia de caracteres vazia ("").  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Port" /> é zero, um número negativo ou maior que 65.535.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado.</exception>
        <exception cref="T:System.Net.Mail.SmtpException">Falha na conexão com o servidor SMTP.  
  
 -ou-  
  
 Falha na autenticação.  
  
 -ou-  
  
 Tempo limite da operação esgotado.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true" />, mas a propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> ou <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true," />, mas o servidor de email SMTP não anunciou STARTTLS na resposta para o comando EHLO.</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">A mensagem não pôde ser entregue a um ou mais destinatários em <paramref name="recipients" />.</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">para se conectar ao servidor SMTP. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.Mail.MailMessage message, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.Mail.MailMessage message, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">Um <see cref="T:System.Net.Mail.MailMessage" /> que contém a mensagem a ser enviada.</param>
        <param name="userToken">Um objeto definido pelo usuário passado para o método invocado quando a operação assíncrona é concluída.</param>
        <summary>Envia a mensagem de email especificada para entrega a um servidor SMTP. Esse método não bloqueia o thread de chamada e permite que o chamador passe um objeto para o método invocado quando a operação é concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para receber notificação quando o email foi enviado ou a operação foi cancelada, adicione um manipulador de eventos para o <xref:System.Net.Mail.SmtpClient.SendCompleted> evento. Você pode cancelar uma <xref:System.Net.Mail.SmtpClient.SendAsync%2A> operação chamando o <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> método.  
  
 Depois de chamar <xref:System.Net.Mail.SmtpClient.SendAsync%2A>, você deve aguardar a transmissão de email concluir antes de tentar enviar outra mensagem de email usando <xref:System.Net.Mail.SmtpClient.Send%2A> ou <xref:System.Net.Mail.SmtpClient.SendAsync%2A>.  
  
 Antes de chamar esse método, o <xref:System.Net.Mail.SmtpClient.Host%2A> e <xref:System.Net.Mail.SmtpClient.Port%2A> deve ser definido por meio de arquivos de configuração, definindo as propriedades relevantes ou passando essas informações para o <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> construtor.  
  
 Se o host SMTP solicitar credenciais, você deve defini-las antes de chamar esse método. Para especificar credenciais, use o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> ou <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedades.  
  
 Se você receber um <xref:System.Net.Mail.SmtpException> exceção, verifique o <xref:System.Net.Mail.SmtpException.StatusCode%2A> propriedade para localizar o motivo pelo qual a operação falhou. O <xref:System.Net.Mail.SmtpException> também pode conter uma exceção interna que indica o motivo da falha da operação.  
  
 Ao enviar email usando <xref:System.Net.Mail.SmtpClient.SendAsync%2A> a vários destinatários, se o servidor SMTP aceita alguns destinatários como válido e rejeita a outras pessoas, uma <xref:System.Net.Mail.SmtpException> é lançada com um <xref:System.NullReferenceException> para a exceção interna. Se isso ocorrer, <xref:System.Net.Mail.SmtpClient.SendAsync%2A> Falha ao enviar email para qualquer um dos destinatários.  
  
 Seu aplicativo pode detectar um erro de validação de certificado de servidor, examinando o <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriedade passado para o <xref:System.Net.Mail.SendCompletedEventHandler> delegar.  
  
 O <xref:System.Net.Mail.SmtpClient.Timeout%2A> propriedade não tem nenhum efeito um <xref:System.Net.Mail.SmtpClient.SendAsync%2A> chamar.  
  
 Para enviar email e bloco enquanto ele é transmitido para o servidor SMTP, use um do <xref:System.Net.Mail.SmtpClient.Send%2A> métodos.  
  
> [!NOTE]
>  Se o <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> está definida como `true`, e o servidor de email SMTP não anuncia STARTTLS na resposta para o EHLO comando, em seguida, uma chamada para o <xref:System.Net.Mail.SmtpClient.Send%2A> ou <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos lançará um <xref:System.Net.Mail.SmtpException>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar esse método.  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> é <see langword="null" />.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.MailMessage.From" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Este <see cref="T:System.Net.Mail.SmtpClient" /> tem uma chamada de <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> em andamento.  
  
 -ou-  
  
 Não há nenhum destinatário especificado nas propriedades <see cref="P:System.Net.Mail.MailMessage.To" />, <see cref="P:System.Net.Mail.MailMessage.CC" /> e <see cref="P:System.Net.Mail.MailMessage.Bcc" />.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é <see langword="null" />.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é igual à cadeia de caracteres vazia ("").  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Port" /> é zero, um número negativo ou maior que 65.535.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado.</exception>
        <exception cref="T:System.Net.Mail.SmtpException">Falha na conexão com o servidor SMTP.  
  
 -ou-  
  
 Falha na autenticação.  
  
 -ou-  
  
 Tempo limite da operação esgotado.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true" />, mas a propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> ou <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true," />, mas o servidor de email SMTP não anunciou STARTTLS na resposta para o comando EHLO.  
  
 -ou-  
  
 O <paramref name="message" /> não pôde ser entregue a um ou mais dos destinatários em <see cref="P:System.Net.Mail.MailMessage.To" />, <see cref="P:System.Net.Mail.MailMessage.CC" /> ou <see cref="P:System.Net.Mail.MailMessage.Bcc" />.</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">para se conectar ao servidor SMTP. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string from, string to, string subject, string body, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string from, string to, string subject, string body, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">Um <see cref="T:System.String" /> que contém as informações de endereço do remetente da mensagem.</param>
        <param name="to">To be added.</param>
        <param name="subject">Um <see cref="T:System.String" /> que contém a linha do assunto da mensagem.</param>
        <param name="body">Um <see cref="T:System.String" /> que contém o corpo da mensagem.</param>
        <param name="userToken">Um objeto definido pelo usuário passado para o método invocado quando a operação assíncrona é concluída.</param>
        <summary>Envia uma mensagem de email para entrega a um servidor SMTP. O remetente, os destinatários, o assunto e o corpo da mensagem são especificados usando objetos <see cref="T:System.String" />. Esse método não bloqueia o thread de chamada e permite que o chamador passe um objeto para o método invocado quando a operação é concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para receber notificação quando o email foi enviado ou a operação foi cancelada, adicione um manipulador de eventos para o <xref:System.Net.Mail.SmtpClient.SendCompleted> evento. Você pode cancelar uma <xref:System.Net.Mail.SmtpClient.SendAsync%2A> operação chamando o <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> método.  
  
 Depois de chamar <xref:System.Net.Mail.SmtpClient.SendAsync%2A>, você deve aguardar a transmissão de email concluir antes de tentar enviar outra mensagem de email usando <xref:System.Net.Mail.SmtpClient.Send%2A> ou <xref:System.Net.Mail.SmtpClient.SendAsync%2A>.  
  
 Antes de chamar esse método, o <xref:System.Net.Mail.SmtpClient.Host%2A> e <xref:System.Net.Mail.SmtpClient.Port%2A> propriedades devem ser definidas por meio de arquivos de configuração ou definindo as propriedades ou passando essas informações para o <xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29> construtor.  
  
 Se o host SMTP solicitar credenciais, você deve defini-las antes de chamar esse método. Para especificar credenciais, use o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> ou <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedade.  
  
 Se você receber um <xref:System.Net.Mail.SmtpException> exceção, verifique o <xref:System.Net.Mail.SmtpException.StatusCode%2A> propriedade para localizar o motivo pelo qual a operação falhou. O <xref:System.Net.Mail.SmtpException> também pode conter uma exceção interna que indica o motivo da falha da operação.  
  
 Ao enviar email usando <xref:System.Net.Mail.SmtpClient.SendAsync%2A> a vários destinatários, se o servidor SMTP aceita alguns destinatários como válido e rejeita a outras pessoas, uma <xref:System.Net.Mail.SmtpException> é lançada com um <xref:System.NullReferenceException> para a exceção interna. Se isso ocorrer, <xref:System.Net.Mail.SmtpClient.SendAsync%2A> Falha ao enviar email para qualquer um dos destinatários.  
  
 Seu aplicativo pode detectar um erro de validação de certificado de servidor, examinando o <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> propriedade passado para o <xref:System.Net.Mail.SendCompletedEventHandler> delegar.  
  
 O <xref:System.Net.Mail.SmtpClient.Timeout%2A> propriedade não tem nenhum efeito um <xref:System.Net.Mail.SmtpClient.SendAsync%2A> chamar.  
  
 Para enviar email e bloco enquanto ele é transmitido para o servidor SMTP, use um do <xref:System.Net.Mail.SmtpClient.Send%2A> métodos.  
  
> [!NOTE]
>  Se o <xref:System.Net.Mail.SmtpClient.EnableSsl%2A> está definida como `true`, e o servidor de email SMTP não anuncia STARTTLS na resposta para o EHLO comando, em seguida, uma chamada para o <xref:System.Net.Mail.SmtpClient.Send%2A> ou <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos lançará um <xref:System.Net.Mail.SmtpException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> é <see langword="null" />.  
  
 -ou-  
  
 <paramref name="recipient" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> é <see cref="F:System.String.Empty" />.  
  
 -ou-  
  
 <paramref name="recipient" /> é <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.InvalidOperationException">Este <see cref="T:System.Net.Mail.SmtpClient" /> tem uma chamada de <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> em andamento.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é <see langword="null" />.  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Host" /> é igual à cadeia de caracteres vazia ("").  
  
 -ou-  
  
 A propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> e <see cref="P:System.Net.Mail.SmtpClient.Port" /> é zero, um número negativo ou maior que 65.535.</exception>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado.</exception>
        <exception cref="T:System.Net.Mail.SmtpException">Falha na conexão com o servidor SMTP.  
  
 -ou-  
  
 Falha na autenticação.  
  
 -ou-  
  
 Tempo limite da operação esgotado.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true" />, mas a propriedade <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> é definida como <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> ou <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />.  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> é definido como <see langword="true," />, mas o servidor de email SMTP não anunciou STARTTLS na resposta para o comando EHLO.  
  
 -ou-  
  
 A mensagem não pôde ser entregue a um ou mais destinatários em <paramref name="recipients" />.</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">Para se conectar ao servidor SMTP. Enumeração associada: <see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsyncCancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancela uma operação assíncrona para enviar uma mensagem de email.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A> método para cancelar um pendente <xref:System.Net.Mail.SmtpClient.SendAsync%2A> operação. Se não houver mensagens aguardando para serem enviadas, esse método libera recursos usados para armazenar o email. Se não houver nenhum email aguardando para serem enviadas, esse método não fará nada.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como enviar uma mensagem de email de forma assíncrona. O usuário tem a opção de cancelar o email se ele não foi enviado.  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">O objeto foi descartado.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.Mail.SendCompletedEventHandler SendCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.Mail.SendCompletedEventHandler SendCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.Mail.SmtpClient.SendCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SendCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma operação de envio de email assíncrono é concluída.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.Mail.SmtpClient.SendCompleted> é gerado sempre que uma mensagem de email é enviada assincronamente quando a operação de envio é concluído. Para enviar uma mensagem de email de forma assíncrona, use o <xref:System.Net.Mail.SmtpClient.SendAsync%2A> métodos.  
  
 <xref:System.Net.Mail.SendCompletedEventHandler>é o delegado para <xref:System.Net.Mail.SmtpClient.SendCompleted>. O <xref:System.ComponentModel.AsyncCompletedEventArgs> classe fornece o manipulador de eventos com dados de evento.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como enviar uma mensagem de email de forma assíncrona.  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">Um <see cref="T:System.Net.Mail.MailMessage" /> que contém a mensagem a ser enviada.</param>
        <summary>Envia a mensagem especificada para um servidor SMTP para entrega como uma operação assíncrona.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />.  
  
 O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task>> objeto será concluída quando a mensagem foi enviada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (string from, string recipients, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(string from, string recipients, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">Um <see cref="T:System.String" /> que contém as informações de endereço do remetente da mensagem.</param>
        <param name="recipients">Um <see cref="T:System.String" /> que contém os endereços aos quais a mensagem é enviada.</param>
        <param name="subject">Um <see cref="T:System.String" /> que contém a linha do assunto da mensagem.</param>
        <param name="body">Um <see cref="T:System.String" /> que contém o corpo da mensagem.</param>
        <summary>Envia a mensagem especificada para um servidor SMTP para entrega como uma operação assíncrona. . O remetente, os destinatários, o assunto e o corpo da mensagem são especificados usando objetos <see cref="T:System.String" />.</summary>
        <returns>Retorna <see cref="T:System.Threading.Tasks.Task" />.  
  
 O objeto de tarefa que representa a operação assíncrona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa operação não será bloqueada. Retornado <xref:System.Threading.Tasks.Task>> objeto será concluída quando a mensagem foi enviada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> é <see langword="null" />.  
  
 -ou-  
  
 <paramref name="recipients" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> é <see cref="F:System.String.Empty" />.  
  
 -ou-  
  
 <paramref name="recipients" /> é <see cref="F:System.String.Empty" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a conexão de rede usada para transmitir a mensagem de email.</summary>
        <value>Um <see cref="T:System.Net.ServicePoint" /> que se conecta à propriedade <see cref="P:System.Net.Mail.SmtpClient.Host" /> usada para SMTP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As configurações para o <xref:System.Net.Mail.SmtpClient.ServicePoint%2A> propriedade são criados usando os padrões especificados no aplicativo ou arquivos de configuração de máquina e o <xref:System.Net.ServicePointManager> classe.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra o acesso a <xref:System.Net.Mail.SmtpClient.ServicePoint%2A> propriedade.  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Net.Mail.SmtpClient.Host" /> é <see langword="null" /> ou a cadeia de caracteres vazia ("").  
  
 -ou-  
  
 <see cref="P:System.Net.Mail.SmtpClient.Port" /> é zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="TargetName">
      <MemberSignature Language="C#" Value="public string TargetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetName" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.TargetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o SPN (Nome do Provedor de Serviços) a ser usado para autenticação ao usar a proteção estendida.</summary>
        <value>Um <see cref="T:System.String" /> que especifica o SPN a ser usado para proteção estendida. O valor padrão para este SPN é do formulário "SMTPSVC /&lt;host&gt;" onde &lt;host&gt; é o nome do host do servidor de email SMTP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Net.Mail.SmtpClient.TargetName%2A> propriedade é usada com a autenticação integrada do Windows quando um aplicativo estiver usando proteção estendida. O <xref:System.Net.Mail.SmtpClient> pode oferecer proteção estendida para garantir que as respostas de desafio de credencial contêm informações específicas do serviço (um SPN) e, se necessário, canal específicas informações (um token de associação de canal ou CBT). Com essas informações em trocas de credencial, os serviços são capazes de melhor proteção contra o uso de respostas de desafio de credencial que pode ter sido obtido incorretamente.  
  
 O valor padrão para essa propriedade também pode ser definido em uma máquina ou arquivo de configuração do aplicativo. Todas as alterações feitas a <xref:System.Net.Mail.SmtpClient.TargetName%2A> o arquivo de configuração de substituição de propriedade.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que especifica o tempo após o qual uma chamada <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> síncrona atinge o tempo limite.</summary>
        <value>Um <see cref="T:System.Int32" /> que especifica o valor do tempo limite em milissegundos. O valor padrão é 100.000 (100 segundos).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Por padrão, chama o <xref:System.Net.Mail.SmtpClient.Send%2A> bloco de métodos até que a operação seja concluída. Se você definir o <xref:System.Net.Mail.SmtpClient.Timeout%2A> propriedade com um valor positivo e um <xref:System.Net.Mail.SmtpClient.Send%2A> não é possível concluir a operação no tempo alocado, o <xref:System.Net.Mail.SmtpClient> classe lança um <xref:System.Net.Mail.SmtpException> exceção.  
  
 Para enviar uma mensagem e continuar em execução no thread do aplicativo, use o <xref:System.Net.Mail.SmtpClient.SendAsync%2A> método.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra Obtendo e definindo o valor de tempo limite.  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor especificado para uma operação de definição é menor que zero.</exception>
        <exception cref="T:System.InvalidOperationException">Não será possível alterar o valor dessa propriedade quando um email estiver sendo enviado.</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.MonoNotSupported("no DefaultCredential support in Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor <see cref="T:System.Boolean" /> que controla se o <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> é enviado com solicitações.</summary>
        <value>
          <see langword="true" /> se as credenciais padrão forem usadas; caso contrário, <see langword="false" />. O valor padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alguns servidores SMTP requerem que o cliente seja autenticado antes que o servidor envia email em seu nome. Defina essa propriedade como `true` quando isso <xref:System.Net.Mail.SmtpClient> objeto deve, se solicitado pelo servidor, autenticar usando as credenciais padrão do usuário conectado no momento. Para aplicativos cliente, esse é o comportamento desejado na maioria dos cenários.  
  
 As informações de credenciais também podem ser especificadas usando o aplicativo e os arquivos de configuração de máquina. Para obter mais informações, consulte [ &lt;mailSettings&gt; (configurações de rede) do elemento](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md).  
  
 Se o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> está definida como `false,` , em seguida, o valor definido no <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedade será usada para as credenciais ao se conectar ao servidor. Se o <xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A> está definida como `false` e <xref:System.Net.Mail.SmtpClient.Credentials%2A> propriedade não foi definida, em seguida, o email é enviado para o servidor de forma anônima.  
  
> [!CAUTION]
>  Se você fornecer credenciais para autenticação básica, elas são enviadas para o servidor em texto não criptografado. Isso pode representar um problema de segurança porque suas credenciais podem ser vistas e, em seguida, usadas por outros.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar essa propriedade.  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Não é possível alterar o valor dessa propriedade quando um email está sendo enviado.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
