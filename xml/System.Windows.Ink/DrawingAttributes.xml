<Type Name="DrawingAttributes" FullName="System.Windows.Ink.DrawingAttributes">
  <TypeSignature Language="C#" Value="public class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawingAttributes extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.DrawingAttributes" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Especifica a aparência de um <see cref="T:System.Windows.Ink.Stroke" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A> propriedade para especificar as configurações, como cor, largura, transparência e a forma da dica de caneta para um <xref:System.Windows.Ink.Stroke>.  
  
 Use o <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> propriedade para especificar os atributos de desenho para os traços adicionados a um <xref:System.Windows.Controls.InkCanvas>. Somente os traçados que são adicionados após o <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> sofrer alteração mostrar os atributos atualizados. A aparência dos traços que já estão no <xref:System.Windows.Controls.InkCanvas> não é alterado.  
  
 Para obter uma lista de valores de propriedade inicial para uma instância do <xref:System.Windows.Ink.DrawingAttributes> de classe, consulte o <xref:System.Windows.Ink.DrawingAttributes> construtor.  
  
<a name="xamlTextUsage_DrawingAttributes"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa classe não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar duas <xref:System.Windows.Ink.DrawingAttributes> objetos para simular usando uma caneta e um marca-texto no mesmo <xref:System.Windows.Controls.InkCanvas>. O exemplo supõe que o elemento raiz no arquivo XAML é uma <xref:System.Windows.Controls.DockPanel> chamado `root`. Também supõe que haja uma <xref:System.Windows.Controls.Button> chamado `switchHighlighter` e que o <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento está conectado ao manipulador de eventos definido neste exemplo.  
  
 [!code-csharp[DrawingAttributes#3](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#3)]
 [!code-vb[DrawingAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawingAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tabela a seguir mostra os valores de propriedade inicial para uma instância do <xref:System.Windows.Ink.DrawingAttributes> classe.  
  
|Propriedade|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Windows.Ink.DrawingAttributes.Color%2A>|Preto|  
|<xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.Height%2A>|2 pixels independentes de dispositivo (DIP)|  
|<xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>|<xref:System.Windows.Ink.StylusTip?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>|<xref:System.Windows.Media.Matrix.Identity%2A?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.Width%2A>|DIP 2|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPropertyData">
      <MemberSignature Language="C#" Value="public void AddPropertyData (Guid propertyDataId, object propertyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPropertyData(valuetype System.Guid propertyDataId, object propertyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
        <Parameter Name="propertyData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">O <see cref="T:System.Guid" /> para associar a propriedade personalizada.</param>
        <param name="propertyData">O valor da propriedade personalizada. <c>propertyData</c> deve ser do tipo <see cref="T:System.Char" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> ou uma matriz desses dados tipos; no entanto, ele não pode ser uma matriz do tipo <see cref="T:System.String" />.</param>
        <summary>Adiciona uma propriedade personalizada para o <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Ink.DrawingAttributes.AddPropertyData%2A> método permite adicionar propriedades personalizadas para um <xref:System.Windows.Ink.DrawingAttributes> objeto. Isso é útil quando você renderizar seus próprios traços e fornecer informações adicionais.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como adicionar e recuperar uma propriedade personalizada a partir de <xref:System.Windows.Ink.DrawingAttributes> objeto. O exemplo adiciona uma propriedade que indica se o <xref:System.Windows.Ink.DrawingAttributes> objeto for uma caneta ou um marca-texto. O código de `ChangeColors_Click` manipulador processa uma nova cor de bordas no <xref:System.Windows.Controls.InkCanvas> que usam o <xref:System.Windows.Ink.DrawingAttributes> objeto, `inkDA`. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`, e que há dois <xref:System.Windows.Ink.DrawingAttributes> objetos nomeados `inkDA`, e`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyData" /> é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />está vazio <see cref="T:System.Guid" />.  
  
 -ou-  
  
 <paramref name="propertyData" />não é um dos tipos de dados permitidos listados no <see langword="Parameters" /> seção.</exception>
      </Docs>
    </Member>
    <Member MemberName="AttributeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma propriedade no <see cref="T:System.Windows.Ink.DrawingAttributes" /> alterações do objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 A exemplo a seguir trata o <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> evento. Este exemplo supõe que haja uma <xref:System.Windows.Ink.DrawingAttributes> objeto chamado `inkDA` e que o <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> evento está conectado ao manipulador de eventos definido neste exemplo.  
  
 [!code-csharp[DrawingAttributes#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#6)]
 [!code-vb[DrawingAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Ink.DrawingAttributes Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Ink.DrawingAttributes Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.DrawingAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Copia o <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</summary>
        <returns>Uma cópia do <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Ink.DrawingAttributes.Clone%2A> método cria um novo <xref:System.Windows.Ink.DrawingAttributes> do objeto e o preenche com os mesmos valores que o objeto atual. Quaisquer propriedades personalizadas também são copiadas.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como copiar um <xref:System.Windows.Ink.DrawingAttributes> objeto.  
  
 [!code-csharp[DrawingAttributes#8](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#8)]
 [!code-vb[DrawingAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a cor de um <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>A cor de um <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_Color"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.Color%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsPropertyData">
      <MemberSignature Language="C#" Value="public bool ContainsPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">O <see cref="T:System.Guid" /> para localizar no <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</param>
        <summary>Retorna um valor que indica se o identificador de propriedade especificada de dados é o <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</summary>
        <returns>
          <see langword="true" />Se o identificador de propriedade especificada de dados estiver no <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra como adicionar e recuperar uma propriedade personalizada a partir de <xref:System.Windows.Ink.DrawingAttributes> objeto. O exemplo adiciona uma propriedade que indica se o <xref:System.Windows.Ink.DrawingAttributes> objeto for uma caneta ou um marca-texto. O `ChangeColors_Click` manipulador de eventos altera os traços que foram colocados no <xref:System.Windows.Controls.InkCanvas> com um <xref:System.Windows.Ink.DrawingAttributes> chamado `inkDA` para uma nova cor. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`, e que há dois <xref:System.Windows.Ink.DrawingAttributes> objetos nomeados `inkDA`, e`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">O <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto a ser comparado ao atual <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</param>
        <summary>Determina se o especificado <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto é igual ao atual <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</summary>
        <returns>
          <see langword="true" /> se os objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dois <xref:System.Windows.Ink.DrawingAttributes> objetos são iguais se as propriedades a seguir são iguais:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
> [!NOTE]
>  O <xref:System.Windows.Ink.DrawingAttributes.Equals%2A> método não verifica se as propriedades personalizadas de igualdade.  
  
   
  
## Examples  
 O exemplo a seguir compara dois <xref:System.Windows.Ink.DrawingAttributes> objetos para igualdade. Porque o <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, e <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedades `attributes1` e `attributes2` são definidos como os mesmos valores, será exibida a mensagem "O DrawingAttributes são igual".  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#12](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#12)]
[!code-vb[DrawingAttributes#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FitToCurve">
      <MemberSignature Language="C#" Value="public bool FitToCurve { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FitToCurve" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.FitToCurve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se a suavização de Bézier é usada para renderizar o <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>
          <see langword="true" />Para usar Bézier suavização para renderizar o <see cref="T:System.Windows.Ink.Stroke" />; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_FitToCurve"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serve como uma função de hash para um tipo específico.</summary>
        <returns>Um código hash do <see cref="T:System.Object" /> atual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyData">
      <MemberSignature Language="C#" Value="public object GetPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">O <see cref="T:System.Guid" /> associado com a propriedade personalizada para obter.</param>
        <summary>Obtém o valor da propriedade personalizada especificada associada <see cref="T:System.Guid" />.</summary>
        <returns>O valor da propriedade personalizada especificada associada <see cref="T:System.Guid" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> método para acessar as propriedades personalizadas adicionadas a um <xref:System.Windows.Ink.DrawingAttributes> objeto. <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A>Retorna o valor padrão para a propriedade interna, se um valor não foi definido.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como adicionar e recuperar uma propriedade personalizada a partir de <xref:System.Windows.Ink.DrawingAttributes> objeto. O exemplo adiciona uma propriedade que indica se o <xref:System.Windows.Ink.DrawingAttributes> objeto for uma caneta ou um marca-texto. O código de `ChangeColors_Click` manipulador processa uma nova cor de bordas no <xref:System.Windows.Controls.InkCanvas> que usam o <xref:System.Windows.Ink.DrawingAttributes> objeto, `inkDA`. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`, e que há dois <xref:System.Windows.Ink.DrawingAttributes> objetos nomeados `inkDA`, e`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />não está associado uma propriedade personalizada do <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyDataIds">
      <MemberSignature Language="C#" Value="public Guid[] GetPropertyDataIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid[] GetPropertyDataIds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna os GUIDs de todas as propriedades personalizadas associadas a <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
        <returns>Uma matriz do tipo <see cref="T:System.Guid" /> que representa os identificadores de dados da propriedade.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os GUIDs para as propriedades internas do <xref:System.Windows.Ink.DrawingAttributes> classe estão no <xref:System.Windows.Ink.DrawingAttributeIds> classe.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como obter os identificadores de dados de propriedade do <xref:System.Windows.Ink.DrawingAttributes> objeto. Este exemplo supõe que um <xref:System.Windows.Ink.DrawingAttributes> chamado `inkDA` foi declarado.  
  
 [!code-csharp[DrawingAttributes#7](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#7)]
 [!code-vb[DrawingAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a altura da caneta usada para desenhar o <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>O valor que indica a altura da caneta usada para desenhar o <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os seguintes fatores afetam a altura e largura de uma <xref:System.Windows.Ink.Stroke> quando ele for renderizado, mas não o valor da <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propriedade.  
  
-   A quantidade de pressão aplicada para a caneta quando o <xref:System.Windows.Ink.Stroke> é desenhada.  
  
-   O valor da propriedade <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>.  
  
 Se você definir o <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propriedade para 0 pixels independentes de dispositivo (DIP), ele é alterado para 2 DIP.  
  
<a name="xamlTextUsage_Height"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> propriedade é menor que <see cref="F:System.Double.Epsilon" /> ou <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnorePressure">
      <MemberSignature Language="C#" Value="public bool IgnorePressure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePressure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IgnorePressure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se a espessura de um renderizado <see cref="T:System.Windows.Ink.Stroke" /> alterações de acordo com a quantidade de pressão aplicada.</summary>
        <value>
          <see langword="true" />para indicar que a espessura do traço é uniforme; <see langword="false" /> para indicar que a espessura de um renderizado <see cref="T:System.Windows.Ink.Stroke" /> aumenta quando pressão é aumentada. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_IgnorePressure"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighlighter">
      <MemberSignature Language="C#" Value="public bool IsHighlighter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHighlighter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define um valor que indica se o <see cref="T:System.Windows.Ink.Stroke" /> parece com um marca-texto.</summary>
        <value>
          <see langword="true" />para renderizar o <see cref="T:System.Windows.Ink.Stroke" /> como um marca-texto; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando o <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> está definida como `true`, o <xref:System.Windows.Ink.Stroke> é ligeiramente transparente, que permite que os traços sob apareça.  
  
<a name="xamlTextUsage_IsHighlighter"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public static readonly double MaxHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica o maior valor permitido para o <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Ink.DrawingAttributes.MaxHeight> campo para verificar se um valor está dentro dos limites permitidos para o <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propriedade. Faça isso quando o valor é proveniente de uma fonte desconhecida, como a entrada do usuário sem restrição.  
  
   
  
## Examples  
 O exemplo a seguir garante o <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propriedade o <xref:System.Windows.Ink.DrawingAttributes> é definido como um valor válido. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public static readonly double MaxWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica o maior valor permitido para o <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Ink.DrawingAttributes.MaxWidth> campo para verificar se um valor está dentro dos limites permitidos para o <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedade. Faça isso quando o valor é proveniente de uma fonte desconhecida, como a entrada do usuário sem restrição.  
  
   
  
## Examples  
 O exemplo a seguir garante o <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedade o <xref:System.Windows.Ink.DrawingAttributes> é definido como um valor válido. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public static readonly double MinHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica o menor valor permitido para o <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Ink.DrawingAttributes.MinHeight> campo para verificar se um valor está dentro dos limites permitidos para o <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propriedade. Faça isso quando o valor é proveniente de uma fonte desconhecida, como a entrada do usuário sem restrição.  
  
   
  
## Examples  
 O exemplo a seguir garante o <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propriedade o <xref:System.Windows.Ink.DrawingAttributes> é definido como um valor válido. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public static readonly double MinWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica o menor valor permitido para o <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Ink.DrawingAttributes.MinWidth> campo para verificar se um valor está dentro dos limites permitidos para o <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedade. Faça isso quando o valor é proveniente de uma fonte desconhecida, como a entrada do usuário sem restrição.  
  
   
  
## Examples  
 O exemplo a seguir garante o <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedade o <xref:System.Windows.Ink.DrawingAttributes> é definido como um valor válido. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAttributeChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAttributeChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Aciona o evento <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A geração de um evento invoca o manipulador de eventos por meio de um delegado.  
  
 O <xref:System.Windows.Ink.DrawingAttributes.OnAttributeChanged%2A> método também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento em uma classe derivada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> em uma classe derivada, chame o <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> método para a classe base garantir que representantes registrados recebam o evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">EventArgs</param>
        <summary>Ocorre quando qualquer <see cref="T:System.Windows.Ink.DrawingAttributes" /> alterações de propriedade.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyDataChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyDataChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyDataChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> que contém os dados do evento.</param>
        <summary>Aciona o evento <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A geração de um evento invoca o manipulador de eventos por meio de um delegado.  
  
 O <xref:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged%2A> método também permite que classes derivadas manipular o evento sem anexar um representante. Isso é a técnica preferida para manipular o evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> é <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> em uma classe derivada, chame o <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> método para a classe base garantir que representantes registrados recebam o evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">O primeiro objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> a ser comparado.</param>
        <param name="second">O segundo objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> a ser comparado.</param>
        <summary>Determina se o especificado <see cref="T:System.Windows.Ink.DrawingAttributes" /> objetos são iguais.</summary>
        <returns>
          <see langword="true" /> se os objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dois <xref:System.Windows.Ink.DrawingAttributes> objetos são iguais se as propriedades a seguir são iguais:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  O <xref:System.Windows.Ink.DrawingAttributes.op_Equality%2A> método não verifica se as propriedades personalizadas de igualdade.  
  
 O método equivalente para esse operador é <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 O exemplo a seguir compara dois <xref:System.Windows.Ink.DrawingAttributes> objetos para igualdade. Porque o <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, e <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedades `attributes1` e `attributes2` são definidos como os mesmos valores, será exibida a mensagem "O DrawingAttributes são igual".  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#11](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#11)]
[!code-vb[DrawingAttributes#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">O primeiro objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> a ser comparado.</param>
        <param name="second">O segundo objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> a ser comparado.</param>
        <summary>Determina se o especificado <see cref="T:System.Windows.Ink.DrawingAttributes" /> objetos não são iguais.</summary>
        <returns>
          <see langword="true" /> se os objetos não forem iguais; do contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dois <xref:System.Windows.Ink.DrawingAttributes> objetos não são iguais se as propriedades a seguir não são iguais:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  O <xref:System.Windows.Ink.DrawingAttributes.op_Inequality%2A> método não verifica se as propriedades personalizadas de igualdade.  
  
 O método equivalente para esse operador é a negação de <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 O exemplo a seguir compara dois <xref:System.Windows.Ink.DrawingAttributes> objetos desigualdade. Porque o <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, e <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedades `attributes1` e `attributes2` são definidos como os mesmos valores, será exibida a mensagem "O DrawingAttributes são igual".  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#13](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#13)]
[!code-vb[DrawingAttributes#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDataChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando dados de propriedade são adicionados ou removidos o <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir faz parte de um traço personalizado que se conectam a um efeito tridimensional. O traço define e armazena uma propriedade personalizada chamada `Shadowed`, que pertence à <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A>. Quando o `Shadowed` alterações de propriedade, o <xref:System.Windows.Ink.DrawingAttributes.PropertyDataChanged> chamadas de manipulador de eventos de <xref:System.Windows.Ink.Stroke.OnInvalidated%2A> método, o que faz com que o traço seja redesenhado.  
  
 [!code-csharp[StrokeCollectionShadow#1](~/samples/snippets/csharp/VS_Snippets_Wpf/StrokeCollectionShadow/CSharp/CustomRenderedStroke.cs#1)]
 [!code-vb[StrokeCollectionShadow#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StrokeCollectionShadow/VisualBasic/CustomRenderedStroke.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyData">
      <MemberSignature Language="C#" Value="public void RemovePropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">O <see cref="T:System.Guid" /> associado com a propriedade personalizada a ser removido.</param>
        <summary>Remove a propriedade personalizada especificada associada <see cref="T:System.Guid" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra como remover uma propriedade personalizada de um <xref:System.Windows.Ink.DrawingAttributes> objeto.  
  
 [!code-csharp[DrawingAttributes#9](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#9)]
 [!code-vb[DrawingAttributes#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />não está associado uma propriedade personalizada do <see cref="T:System.Windows.Ink.DrawingAttributes" /> objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="StylusTip">
      <MemberSignature Language="C#" Value="public System.Windows.Ink.StylusTip StylusTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Ink.StylusTip StylusTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.StylusTip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a forma da caneta usada para desenhar o <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Um dos valores de <see cref="T:System.Windows.Ink.StylusShape" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_StylusTip"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusTipTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Matrix StylusTipTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix StylusTipTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Windows.Media.Matrix" /> que especifica a transformação para executar na dica a caneta.</summary>
        <value>Um <see cref="T:System.Windows.Media.Matrix" /> que especifica a transformação para executar na dica a caneta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> propriedade girar, distorcer ou dimensionar a dica de caneta.  
  
<a name="xamlTextUsage_StylusTipTransform"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A matriz definida como <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> não é uma matriz pode ser invertida.  
  
 -ou-  
  
 O <see cref="P:System.Windows.Media.Matrix.OffsetX" /> ou <see cref="P:System.Windows.Media.Matrix.OffsetY" /> propriedade da matriz não é zero.</exception>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a largura da caneta usada para desenhar o <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>A largura da caneta usada para desenhar o <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os seguintes fatores afetam a altura e largura de uma <xref:System.Windows.Ink.Stroke> quando ele for renderizado, mas não o valor da <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedade.  
  
-   A quantidade de pressão aplicada para a caneta quando o <xref:System.Windows.Ink.Stroke> é desenhada.  
  
-   O valor da propriedade <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>.  
  
 Se você definir o <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedade para 0 pixels independentes de dispositivo (DIP), ele é alterado para 2 DIP.  
  
<a name="xamlTextUsage_Width"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Essa propriedade não é usada normalmente em XAML.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como definir a <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propriedade. O exemplo supõe que o aplicativo tem um <xref:System.Windows.Controls.InkCanvas> chamado `inkCanvas1`e dois <xref:System.Windows.Ink.DrawingAttributes> objetos chamados `inkDA` e `highlighterDA`. Para o exemplo completo, consulte o <xref:System.Windows.Ink.DrawingAttributes> visão geral da classe.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> propriedade é menor que <see cref="F:System.Double.Epsilon" /> ou <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
