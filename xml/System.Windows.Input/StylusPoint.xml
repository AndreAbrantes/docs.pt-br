<Type Name="StylusPoint" FullName="System.Windows.Input.StylusPoint">
  <TypeSignature Language="C#" Value="public struct StylusPoint : IEquatable&lt;System.Windows.Input.StylusPoint&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit StylusPoint extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Windows.Input.StylusPoint&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.StylusPoint" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Windows.Input.StylusPoint&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa um único ponto de dados coletado do digitalizador e da caneta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um <xref:System.Windows.Input.StylusPoint> coleta de dados quando um usuário insere tinta usando o digitalizador. Como as informações que informa um digitalizador é diferente dependendo do fabricante, as propriedades dentro de um <xref:System.Windows.Input.StylusPoint> pode variar. Para determinar se uma propriedade é no <xref:System.Windows.Input.StylusPoint>, chame o <xref:System.Windows.Input.StylusPoint.HasProperty%2A> método. O <xref:System.Windows.Input.StylusPoint.Description%2A> propriedade contém um <xref:System.Windows.Input.StylusPointDescription> que especifica as propriedades que estão na <xref:System.Windows.Input.StylusPoint>. Todos os <xref:System.Windows.Input.StylusPoint> objetos contêm propriedades que especificam (x, y) coordenadas, bem como a pressão.  
  
   
  
## Examples  
 O exemplo a seguir obtém os nomes e valores para cada <xref:System.Windows.Input.StylusPoint> em um <xref:System.Windows.Input.StylusPointCollection>. Este exemplo supõe que haja uma <xref:System.Windows.Controls.TextBlock> chamado `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StylusPoint (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">A coordenada x do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="y">A coordenada y do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Windows.Input.StylusPoint" /> classe usando coordenadas especificadas (x, y).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Windows.Input.StylusPoint>.  
  
 [!code-csharp[PacketSpy#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#5)]
 [!code-vb[PacketSpy#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StylusPoint (double x, double y, float pressureFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y, float32 pressureFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="pressureFactor" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="x">A coordenada x do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="y">A coordenada y do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="pressureFactor">A quantidade de pressão aplicada para o <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Windows.Input.StylusPoint" /> usando coordenadas especificadas (x, y) e pressão de classe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `pressureFactor`deve ter um valor entre 0 e 1, inclusive. Um valor de 0 indica que nenhuma pressão é aplicada, enquanto um valor de 1 indica que a quantidade máxima de pressão é aplicada. Um valor de 0,5 indica que 50% de pressão de máximo é aplicado e assim por diante.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Windows.Input.StylusPoint>.  
  
 [!code-csharp[PacketSpy#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#5)]
 [!code-vb[PacketSpy#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="pressureFactor" /> é menor que 0 ou maior que 1.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StylusPoint (double x, double y, float pressureFactor, System.Windows.Input.StylusPointDescription stylusPointDescription, int[] additionalValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y, float32 pressureFactor, class System.Windows.Input.StylusPointDescription stylusPointDescription, int32[] additionalValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.#ctor(System.Double,System.Double,System.Single,System.Windows.Input.StylusPointDescription,System.Int32[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="pressureFactor" Type="System.Single" />
        <Parameter Name="stylusPointDescription" Type="System.Windows.Input.StylusPointDescription" />
        <Parameter Name="additionalValues" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="x">A coordenada x do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="y">A coordenada y do <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="pressureFactor">A quantidade de pressão aplicada para o <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="stylusPointDescription">Um <see cref="T:System.Windows.Input.StylusPointDescription" /> que especifica as propriedades adicionais armazenadas no <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <param name="additionalValues">Uma matriz de inteiros com sinal de 32 bits que contém os valores das propriedades definidas em <c>stylusPointDescription</c>.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Windows.Input.StylusPoint" /> classe usando coordenadas especificadas (x, y), um <paramref name="pressureFactor" />e parâmetros adicionais especificados no <see cref="T:System.Windows.Input.StylusPointDescription" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir demonstra como criar um <xref:System.Windows.Input.StylusPoint>.  
  
 [!code-csharp[PacketSpy#5](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#5)]
 [!code-vb[PacketSpy#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="pressureFactor" /> é menor que 0 ou maior que 1.  
  
 -ou-  
  
 Os valores em <paramref name="additionalValues" /> que correspondem às propriedades de botão não são 0 ou 1.</exception>
        <exception cref="T:System.ArgumentException">O número de valores em <paramref name="additionalValues" /> não coincide com o número de propriedades no <paramref name="stylusPointDescription" /> menos 3.</exception>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public System.Windows.Input.StylusPointDescription Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusPointDescription Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusPointDescription</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o <see cref="T:System.Windows.Input.StylusPointDescription" /> que especifica as propriedades armazenadas no <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <value>O <see cref="T:System.Windows.Input.StylusPointDescription" /> Especifica as propriedades armazenadas no <see cref="T:System.Windows.Input.StylusPoint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir usa o <xref:System.Windows.Input.StylusPoint.Description%2A> valores de propriedade para obter a propriedade de <xref:System.Windows.Input.StylusPoint> em um <xref:System.Windows.Input.StylusPointCollection>. Este exemplo supõe que haja uma <xref:System.Windows.Controls.TextBlock> chamado `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">O <see cref="T:System.Windows.Input.StylusPoint" /> para comparar com a atual <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Retorna um valor que indica se o objeto especificado é igual de <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <returns>
          <see langword="true" /> se os objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir verifica dois <xref:System.Windows.Input.StylusPoint> objetos para igualdade. Porque o <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, e <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> propriedades `point1` e `point2` são definidos para o mesmo valor, o "os dois objetos StylusPoint são iguais." Será exibida a mensagem.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#7](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#7)]
[!code-vb[PacketSpy#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Input.StylusPoint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Windows.Input.StylusPoint value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="value">O <see cref="T:System.Windows.Input.StylusPoint" /> para comparar com a atual <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Retorna um valor booliano que indica se o especificado <see cref="T:System.Windows.Input.StylusPoint" /> é igual à atual <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <returns>
          <see langword="true" />Se o <see cref="T:System.Windows.Input.StylusPoint" /> objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir verifica dois <xref:System.Windows.Input.StylusPoint> objetos para igualdade. Porque o <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, e <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> propriedades `point1` e `point2` são definidos para o mesmo valor, o "os dois objetos StylusPoint são iguais." Será exibida a mensagem.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#7](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#7)]
[!code-vb[PacketSpy#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Input.StylusPoint stylusPoint1, valuetype System.Windows.Input.StylusPoint stylusPoint2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.Equals(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint1" Type="System.Windows.Input.StylusPoint" />
        <Parameter Name="stylusPoint2" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint1">O primeiro <see cref="T:System.Windows.Input.StylusPoint" /> a ser comparado.</param>
        <param name="stylusPoint2">O segundo <see cref="T:System.Windows.Input.StylusPoint" /> a ser comparado.</param>
        <summary>Retorna um valor booliano que indica se os dois especificada <see cref="T:System.Windows.Input.StylusPoint" /> objetos são iguais.</summary>
        <returns>
          <see langword="true" />Se o <see cref="T:System.Windows.Input.StylusPoint" /> objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir verifica dois <xref:System.Windows.Input.StylusPoint> objetos para igualdade. Porque o <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, e <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> propriedades `point1` e `point2` são definidos para o mesmo valor, o "os dois objetos StylusPoint são iguais." Será exibida a mensagem.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#8](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#8)]
[!code-vb[PacketSpy#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o código hash para essa instância.</summary>
        <returns>Um inteiro com sinal de 32 bits que é o código hash para esta instância.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValue">
      <MemberSignature Language="C#" Value="public int GetPropertyValue (System.Windows.Input.StylusPointProperty stylusPointProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetPropertyValue(class System.Windows.Input.StylusPointProperty stylusPointProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.GetPropertyValue(System.Windows.Input.StylusPointProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPointProperty" Type="System.Windows.Input.StylusPointProperty" />
      </Parameters>
      <Docs>
        <param name="stylusPointProperty">O <see cref="T:System.Windows.Input.StylusPointProperty" /> que especifica o valor da propriedade para obter.</param>
        <summary>Retorna o valor da propriedade especificada.</summary>
        <returns>O valor especificado <see cref="T:System.Windows.Input.StylusPointProperty" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para verificar se o <xref:System.Windows.Input.StylusPoint> contém a propriedade especificada, a chamada a <xref:System.Windows.Input.StylusPoint.HasProperty%2A> antes de chamar qualquer uma de <xref:System.Windows.Input.StylusPoint.GetPropertyValue%2A> método ou o <xref:System.Windows.Input.StylusPoint.SetPropertyValue%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir verifica a existência de uma propriedade de ponto de caneta antes de obter o valor da propriedade. Este exemplo supõe que haja uma <xref:System.Windows.Input.StylusPoint> chamado `point`.  
  
 [!code-csharp[PacketSpy#11](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#11)]
 [!code-vb[PacketSpy#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stylusPointProperty" />não é uma das propriedades no <see cref="P:System.Windows.Input.StylusPoint.Description" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasProperty">
      <MemberSignature Language="C#" Value="public bool HasProperty (System.Windows.Input.StylusPointProperty stylusPointProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasProperty(class System.Windows.Input.StylusPointProperty stylusPointProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.HasProperty(System.Windows.Input.StylusPointProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPointProperty" Type="System.Windows.Input.StylusPointProperty" />
      </Parameters>
      <Docs>
        <param name="stylusPointProperty">O <see cref="T:System.Windows.Input.StylusPointProperty" /> para verificar a <see cref="T:System.Windows.Input.StylusPoint" />.</param>
        <summary>Retorna se o atual <see cref="T:System.Windows.Input.StylusPoint" /> contém a propriedade especificada.</summary>
        <returns>
          <see langword="true" />Se especificado <see cref="T:System.Windows.Input.StylusPointProperty" /> é atual <see cref="T:System.Windows.Input.StylusPoint" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para verificar se o <xref:System.Windows.Input.StylusPoint> contém a propriedade especificada, a chamada a <xref:System.Windows.Input.StylusPoint.HasProperty%2A> antes de chamar qualquer uma de <xref:System.Windows.Input.StylusPoint.GetPropertyValue%2A> método ou o <xref:System.Windows.Input.StylusPoint.SetPropertyValue%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir verifica a existência de uma propriedade de ponto de caneta antes de obter o valor da propriedade. Este exemplo supõe que haja uma <xref:System.Windows.Input.StylusPoint> chamado `point`.  
  
 [!code-csharp[PacketSpy#11](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#11)]
 [!code-vb[PacketSpy#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxXY">
      <MemberSignature Language="C#" Value="public static readonly double MaxXY;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxXY" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.StylusPoint.MaxXY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica o maior valor válido para um par de (x, y) coordenadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir garante que o <xref:System.Windows.Input.StylusPoint.X%2A> propriedade o <xref:System.Windows.Input.StylusPoint> é definido como um valor válido.  
  
 [!code-csharp[PacketSpy#14](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#14)]
 [!code-vb[PacketSpy#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinXY">
      <MemberSignature Language="C#" Value="public static readonly double MinXY;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinXY" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.StylusPoint.MinXY" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica o menor valor válido para um par de (x, y) coordenadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir garante que o <xref:System.Windows.Input.StylusPoint.X%2A> propriedade o <xref:System.Windows.Input.StylusPoint> é definido como um valor válido.  
  
 [!code-csharp[PacketSpy#14](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#14)]
 [!code-vb[PacketSpy#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Input.StylusPoint stylusPoint1, valuetype System.Windows.Input.StylusPoint stylusPoint2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.op_Equality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint1" Type="System.Windows.Input.StylusPoint" />
        <Parameter Name="stylusPoint2" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint1">O primeiro <see cref="T:System.Windows.Input.StylusPoint" /> a ser comparado.</param>
        <param name="stylusPoint2">O segundo <see cref="T:System.Windows.Input.StylusPoint" /> a ser comparado.</param>
        <summary>Compara dois especificado <see cref="T:System.Windows.Input.StylusPoint" /> objetos e determina se eles são iguais.</summary>
        <returns>
          <see langword="true" />Se o <see cref="T:System.Windows.Input.StylusPoint" /> objetos forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[O método equivalente para esse operador é<xref:System.Windows.Input.StylusPoint.Equals%28System.Windows.Input.StylusPoint%2CSystem.Windows.Input.StylusPoint%29?displayProperty=nameWithType>  
  
## Examples  
 O exemplo a seguir verifica dois <xref:System.Windows.Input.StylusPoint> objetos para igualdade. Porque o <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, e <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> propriedades `point1` e `point2` são definidos para o mesmo valor, o "os dois objetos StylusPoint são iguais." Será exibida a mensagem.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#9](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#9)]
[!code-vb[PacketSpy#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Input.StylusPoint stylusPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Input.StylusPoint stylusPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.op_Explicit(System.Windows.Input.StylusPoint)~System.Windows.Point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint">To be added.</param>
        <summary>Converte especificado <see cref="T:System.Windows.Input.StylusPoint" /> para um <see cref="T:System.Windows.Point" />.</summary>
        <returns>Um <see cref="T:System.Windows.Point" /> que contém as coordenadas mesmas (x, y) como <paramref name="stylusPoint" />. </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[O exemplo a seguir demonstra como converter uma <xref:System.Windows.Input.StylusPoint> para um <xref:System.Windows.Point> objeto ao desenhar um círculo no início de cada traço. Este exemplo supõe que haja uma <xref:System.Windows.Controls.InkCanvas> objeto chamado `inkcanvas1` e que o <xref:System.Windows.UIElement.StylusDown> evento está conectado ao manipulador de eventos no exemplo.

           [!code-csharp[PacketSpy#13](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#13)]
           [!code-vb[PacketSpy#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#13)]  

           ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Input.StylusPoint stylusPoint1, System.Windows.Input.StylusPoint stylusPoint2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Input.StylusPoint stylusPoint1, valuetype System.Windows.Input.StylusPoint stylusPoint2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.op_Inequality(System.Windows.Input.StylusPoint,System.Windows.Input.StylusPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPoint1" Type="System.Windows.Input.StylusPoint" />
        <Parameter Name="stylusPoint2" Type="System.Windows.Input.StylusPoint" />
      </Parameters>
      <Docs>
        <param name="stylusPoint1">O primeiro <see cref="T:System.Windows.Input.StylusPoint" /> a ser comparado.</param>
        <param name="stylusPoint2">O segundo <see cref="T:System.Windows.Input.StylusPoint" /> a ser comparado.</param>
        <summary>Retorna um valor booliano que indica se o especificado <see cref="T:System.Windows.Input.StylusPoint" /> objetos são diferentes.</summary>
        <returns>
          <see langword="true" />Se especificado <see cref="T:System.Windows.Input.StylusPoint" /> objetos forem diferentes; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[O método equivalente para esse operador é a negação de<xref:System.Windows.Input.StylusPoint.Equals%2A>  
  
## Examples  
 O exemplo a seguir demonstra como verificar dois <xref:System.Windows.Input.StylusPoint> objetos desigualdade. Porque o <xref:System.Windows.Input.StylusPoint.X%2A>, <xref:System.Windows.Input.StylusPoint.Y%2A>, e <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> propriedades `point1` e `point2` são definidos para o mesmo valor, o "os dois objetos StylusPoint são iguais." Será exibida a mensagem.  
  
 [!code-csharp[PacketSpy#6](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#6)]
 [!code-vb[PacketSpy#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#6)]  
[!code-csharp[PacketSpy#10](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#10)]
[!code-vb[PacketSpy#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PressureFactor">
      <MemberSignature Language="C#" Value="public float PressureFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PressureFactor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.PressureFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define se aplica um valor entre 0 e 1 que reflete a quantidade de pressão a caneta do digitalizador superfície quando o <see cref="T:System.Windows.Input.StylusPoint" /> é criado.</summary>
        <value>Valor entre 0 e 1 que indica a quantidade de pressão a caneta se aplica a superfície do digitalizador como o <see cref="T:System.Windows.Input.StylusPoint" /> é criado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> propriedade é expressa como um valor entre 0 e 1. Um valor de 0 indica que nenhuma pressão é aplicada, enquanto um valor de 1 indica que a quantidade máxima de pressão é aplicada. Um valor de 0,5 indica que 50% de pressão de máximo é aplicado e assim por diante.  
  
   
  
## Examples  
 O exemplo a seguir usa o <xref:System.Windows.Input.StylusPoint.PressureFactor%2A> propriedade para recuperar e exibir o valor de pressão para cada <xref:System.Windows.Input.StylusPoint> em uma <xref:System.Windows.Input.StylusPointCollection> chamado `points`. Este exemplo supõe que haja uma <xref:System.Windows.Controls.TextBlock> chamado `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="P:System.Windows.Input.StylusPoint.PressureFactor" /> propriedade é definida como um valor menor que 0 ou maior que 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValue">
      <MemberSignature Language="C#" Value="public void SetPropertyValue (System.Windows.Input.StylusPointProperty stylusPointProperty, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPropertyValue(class System.Windows.Input.StylusPointProperty stylusPointProperty, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.SetPropertyValue(System.Windows.Input.StylusPointProperty,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylusPointProperty" Type="System.Windows.Input.StylusPointProperty" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stylusPointProperty">O <see cref="T:System.Windows.Input.StylusPointProperty" /> que especifica o valor de propriedade a ser definido.</param>
        <param name="value">O valor da propriedade.</param>
        <summary>Define a propriedade especificada como o valor especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para verificar se o <xref:System.Windows.Input.StylusPoint> contém a propriedade especificada, a chamada a <xref:System.Windows.Input.StylusPoint.HasProperty%2A> antes de chamar qualquer uma de <xref:System.Windows.Input.StylusPoint.GetPropertyValue%2A> método ou o <xref:System.Windows.Input.StylusPoint.SetPropertyValue%2A> método.  
  
   
  
## Examples  
 O exemplo a seguir verifica a existência de uma propriedade de ponto de caneta antes de definir o valor da propriedade. Este exemplo supõe que haja uma <xref:System.Windows.Input.StylusPoint> chamado `point`.  
  
 [!code-csharp[PacketSpy#12](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#12)]
 [!code-vb[PacketSpy#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stylusPointProperty" />não é uma das propriedades no <see cref="P:System.Windows.Input.StylusPoint.Description" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Point ToPoint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point ToPoint() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusPoint.ToPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converte uma <see cref="T:System.Windows.Input.StylusPoint" /> em uma <see cref="T:System.Windows.Point" />.</summary>
        <returns>Uma estrutura <see cref="T:System.Windows.Point" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o valor da coordenada x do <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <value>A coordenada x do <see cref="T:System.Windows.Input.StylusPoint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir obtém o <xref:System.Windows.Input.StylusPoint.X%2A> propriedade para cada <xref:System.Windows.Input.StylusPoint> em um <xref:System.Windows.Input.StylusPointCollection>. Este exemplo supõe que haja uma <xref:System.Windows.Controls.TextBlock> chamado `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusPoint.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define a coordenada y do <see cref="T:System.Windows.Input.StylusPoint" />.</summary>
        <value>A coordenada y do <see cref="T:System.Windows.Input.StylusPoint" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo a seguir obtém o <xref:System.Windows.Input.StylusPoint.Y%2A> propriedade para cada <xref:System.Windows.Input.StylusPoint> em um <xref:System.Windows.Input.StylusPointCollection>. Este exemplo supõe que haja uma <xref:System.Windows.Controls.TextBlock> chamado `packetOutput`.  
  
 [!code-csharp[PacketSpy#3](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#3)]
 [!code-vb[PacketSpy#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#3)]  
[!code-csharp[PacketSpy#4](~/samples/snippets/csharp/VS_Snippets_Wpf/PacketSpy/CSharp/Window1.xaml.cs#4)]
[!code-vb[PacketSpy#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PacketSpy/VisualBasic/Window1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
