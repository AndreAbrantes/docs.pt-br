<Type Name="StylusSystemGestureEventArgs" FullName="System.Windows.Input.StylusSystemGestureEventArgs">
  <TypeSignature Language="C#" Value="public class StylusSystemGestureEventArgs : System.Windows.Input.StylusEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StylusSystemGestureEventArgs extends System.Windows.Input.StylusEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.StylusSystemGestureEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.StylusEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece dados para o evento de <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> .</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StylusSystemGestureEventArgs (System.Windows.Input.StylusDevice stylusDevice, int timestamp, System.Windows.Input.SystemGesture systemGesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.StylusDevice stylusDevice, int32 timestamp, valuetype System.Windows.Input.SystemGesture systemGesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusSystemGestureEventArgs.#ctor(System.Windows.Input.StylusDevice,System.Int32,System.Windows.Input.SystemGesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stylusDevice" Type="System.Windows.Input.StylusDevice" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="systemGesture" Type="System.Windows.Input.SystemGesture" />
      </Parameters>
      <Docs>
        <param name="stylusDevice">O <see cref="T:System.Windows.Input.StylusDevice" /> para associar o evento.</param>
        <param name="timestamp">A hora em que o evento ocorre.</param>
        <param name="systemGesture">O <see cref="T:System.Windows.Input.SystemGesture" /> que gera o evento.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.StylusSystemGestureEventArgs" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.StylusSystemGestureEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">O manipulador genérico para chamar em uma forma de um tipo específico.</param>
        <param name="genericTarget">O destino para chamar o manipulador no.</param>
        <summary>Invoca um manipulador de tipo específico no destino sempre que o <see cref="E:System.Windows.UIElement.StylusSystemGesture" /> é gerado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa implementação converte o manipulador genérico como um <xref:System.Windows.Input.StylusSystemGestureEventHandler> e, em seguida, invoca. Para obter detalhes sobre esse padrão de implementação e os motivos para ele, consulte <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> e [visão geral sobre eventos roteados](~/docs/framework/wpf/advanced/routed-events-overview.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemGesture">
      <MemberSignature Language="C#" Value="public System.Windows.Input.SystemGesture SystemGesture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.SystemGesture SystemGesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.StylusSystemGestureEventArgs.SystemGesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.SystemGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Windows.Input.SystemGesture" /> que gera o evento.</summary>
        <value>O <see cref="T:System.Windows.Input.SystemGesture" /> que gera o evento.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
