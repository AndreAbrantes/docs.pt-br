<Type Name="InputScopeConverter" FullName="System.Windows.Input.InputScopeConverter">
  <TypeSignature Language="C#" Value="public class InputScopeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputScopeConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputScopeConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Converte um <see cref="T:System.Windows.Input.InputScope" /> para e de outros tipos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_InputScopeConverter"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputScopeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Input.InputScopeConverter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto que descreve qualquer contexto de descritor de tipo.  Este objeto deve implementar a <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  Esse parâmetro pode ser <see langword="null" />.</param>
        <param name="sourceType">Um <see cref="T:System.Type" /> para verificar a compatibilidade de conversão.</param>
        <summary>Determina se um <see cref="T:System.Windows.Input.InputScope" /> objeto pode ser convertido em um objeto de um tipo especificado.</summary>
        <returns>
          <see langword="true" />Se <paramref name="sourceType" /> é do tipo <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto que descreve qualquer contexto de descritor de tipo.  Este objeto deve implementar a <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  Esse parâmetro pode ser <see langword="null" />.</param>
        <param name="destinationType">Um <see cref="T:System.Type" /> para verificar a compatibilidade de conversão.</param>
        <summary>Determina se um <see cref="T:System.Windows.Input.InputScope" /> objeto pode ser convertido em um objeto de um tipo especificado.</summary>
        <returns>
          <see langword="true" />Se <paramref name="destinationType" /> é do tipo <see cref="T:System.String" />; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto que descreve qualquer contexto de descritor de tipo.  Este objeto deve implementar a <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  Esse parâmetro pode ser <see langword="null" />.</param>
        <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> objeto que contém qualquer contexto cultura para a conversão.  Esse parâmetro pode ser <see langword="null" />.</param>
        <param name="source">Um objeto de origem para converter.  Esse objeto deve ser uma cadeia de caracteres.</param>
        <summary>Converte um objeto de origem (string) em um <see cref="T:System.Windows.Input.InputScope" /> objeto.</summary>
        <returns>Um <see cref="T:System.Windows.Input.InputScope" /> converter objeto do objeto de origem especificado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um objeto que descreve qualquer contexto de descritor de tipo.  Este objeto deve implementar a <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> interface.  Esse parâmetro pode ser <see langword="null" />.</param>
        <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> objeto que contém qualquer contexto cultura para a conversão.  Esse parâmetro pode ser <see langword="null" />.</param>
        <param name="value">Um objeto para converter.  Este objeto deve ser do tipo <see cref="T:System.Windows.Input.InputScope" />.</param>
        <param name="destinationType">Um tipo de destino para converter o tipo.  Esse tipo deve ser uma cadeia de caracteres.</param>
        <summary>Converte um <see cref="T:System.Windows.Input.InputScope" /> objeto em um tipo de objeto especificado (string).</summary>
        <returns>Um novo objeto do tipo especificado (string) convertido a partir de determinado <see cref="T:System.Windows.Input.InputScope" /> objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destinationType`deve ser <xref:System.String>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
