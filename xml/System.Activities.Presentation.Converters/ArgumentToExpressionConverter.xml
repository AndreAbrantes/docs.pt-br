<Type Name="ArgumentToExpressionConverter" FullName="System.Activities.Presentation.Converters.ArgumentToExpressionConverter">
  <TypeSignature Language="C#" Value="public class ArgumentToExpressionConverter : System.Windows.Data.IValueConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ArgumentToExpressionConverter extends System.Object implements class System.Windows.Data.IValueConverter" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Data.IValueConverter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define o mapeamento entre os argumentos e expressões e fornece a funcionalidade para converter entre esses objetos. Normalmente, esse conversor é usado declarativamente ao usar um <see cref="T:System.Activities.Presentation.View.ExpressionTextBox" /> em um designer de atividade personalizada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este conversor também pode ser usado imperativa; No entanto, esse uso não é recomendável.  
  
   
  
## Examples  
 O trecho XAML a seguir mostra como usar o ArgumentToExpressionConverter em um designer de atividade personalizada que usa um ExpressionTextBox.  
  
```  
<sapv:ExpressionTextBox   
    Expression="{Binding Path=ModelItem.SampleValue,   
                         Mode=TwoWay,   
                         Converter={StaticResource ArgumentToExpressionConverter},   
                         ConverterParameter=In }"  
    ExpressionType="s:String"  
    OwnerActivity="{Binding Path=ModelItem}"  
   />  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArgumentToExpressionConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Activities.Presentation.Converters.ArgumentToExpressionConverter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public object Convert (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Convert(object value, class System.Type targetType, object parameter, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">O valor produzido pela fonte de associação.</param>
        <param name="targetType">O tipo da propriedade de destino da associação.</param>
        <param name="parameter">O parâmetro de conversor a ser usado.</param>
        <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> para usar o conversor.</param>
        <summary>Converte o argumento especificado em uma expressão.</summary>
        <returns>Uma instância de <see cref="T:System.Object" /> que contém o Argument.Expression convertido.  
  
 Contém o Argument.Expression convertido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O `parameter`,  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertBack">
      <MemberSignature Language="C#" Value="public object ConvertBack (object value, Type targetType, object parameter, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertBack(object value, class System.Type targetType, object parameter, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Converters.ArgumentToExpressionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="parameter" Type="System.Object" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">Argument.Expression para converter.</param>
        <param name="targetType">Não implementado.</param>
        <param name="parameter">Não implementado.</param>
        <param name="culture">Não implementado.</param>
        <summary>Converte o Argument.Expression especificado em um argumento.</summary>
        <returns>Retorna <see cref="T:System.Object" />.  
  
 Contém o argumento convertido.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
