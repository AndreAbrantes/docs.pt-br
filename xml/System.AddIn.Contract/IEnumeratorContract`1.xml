<Type Name="IEnumeratorContract&lt;T&gt;" FullName="System.AddIn.Contract.IEnumeratorContract&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IEnumeratorContract&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumeratorContract`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.IEnumeratorContract`1" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">O tipo de objetos que estão sendo enumeradas.</typeparam>
    <summary>Enumera os elementos em um <see cref="T:System.AddIn.Contract.IListContract`1" /> coleção.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Enumeradores podem ser usados para ler os dados na coleção, mas eles não podem ser usados para modificar a coleção.  
  
 Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção. Nesta posição, o valor de retorno de <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> é indefinido. Portanto, você deve chamar <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> para avançar o enumerador para o primeiro elemento da coleção antes de chamar <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>.  
  
 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>Retorna o mesmo objeto até <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> é chamado. <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A>Define o valor de retorno <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> para o próximo elemento.  
  
 Caso <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> retorna `false`. Quando o enumerador está nessa posição, as chamadas subsequentes para <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> também retornam `false`. Se a última chamada <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> retornou `false`, o valor de retorno de <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> é indefinido.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public T GetCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.GetCurrent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna o objeto da coleção na posição atual do enumerador.</summary>
        <returns>O <see cref="T:System.AddIn.Contract.IContract" /> na coleção na posição atual do enumerador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor de retorno <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> não está definida em qualquer uma das seguintes condições:  
  
-   O enumerador está posicionado antes do primeiro elemento na coleção, imediatamente após a criação do enumerador ou depois <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> é chamado. <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A>deve ser chamado para avançar o enumerador para o primeiro elemento da coleção antes de chamar <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>.  
  
-   A última chamada a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> retornou `false`, que indica o final da coleção.  
  
-   O enumerador é invalidado devido a alterações feitas na coleção, como adicionar, modificar ou excluir elementos.  
  
 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>Retorna o mesmo objeto até <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> é chamado. <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A>Define o valor de retorno <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> para o próximo elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.MoveNext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avança o enumerador para o próximo elemento da coleção.</summary>
        <returns>
          <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Após a criação de um enumerador ou depois do <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> método é chamado, um enumerador está posicionado antes do primeiro elemento da coleção. A primeira chamada para o <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> método Move o enumerador para o primeiro elemento da coleção.  
  
 Caso <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> retorna `false`. Quando o enumerador está nessa posição, chamadas subsequentes para <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> também retornam `false` até <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> é chamado.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações na coleção, como adicionar, modificar, ou excluir elementos, o enumerador é invalidado invalidado e a próxima chamada para <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> ou <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> lança um <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações na coleção, como adicionar, modificar, ou excluir elementos, o enumerador é invalidado invalidado e a próxima chamada para <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> ou <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> lança um <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
