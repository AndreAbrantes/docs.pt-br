<Type Name="ToolboxCategory" FullName="System.Activities.Presentation.Toolbox.ToolboxCategory">
  <TypeSignature Language="C#" Value="public sealed class ToolboxCategory : System.Collections.IList, System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ToolboxCategory extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Uma coleção de itens que foram categorizados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> coleção contém itens do tipo <xref:System.Activities.Presentation.Toolbox.ToolboxItemWrapper> que são adicionados e removidos de uma instância de coleção usando o <xref:System.Activities.Presentation.Toolbox.ToolboxCategory.Add%2A> e <xref:System.Activities.Presentation.Toolbox.ToolboxCategory.Remove%2A> métodos.  
  
 A classe <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.ComponentModel.INotifyPropertyChanged>. Isso permite que a coleção que está armazenando os itens da caixa de ferramentas para fornecer notificações quando propriedades como o <xref:System.Activities.Presentation.Toolbox.ToolboxCategory.CategoryName%2A> propriedade são alterados e métodos como <xref:System.Activities.Presentation.Toolbox.ToolboxCategory.Add%2A> e <xref:System.Activities.Presentation.Toolbox.ToolboxCategory.Remove%2A> são usadas para alterar o conteúdo da coleção.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolboxCategory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Cria uma instância de <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> classe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nome padrão atribuído para o <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> coleção está vazio `string`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolboxCategory (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">O nome da coleção de categoria da caixa de ferramentas.</param>
        <summary>Cria uma instância de <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> classe com um nome especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O nome atribuído ao <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> coleção pode ser vazio `string`. Este é o valor atribuído pelo construtor padrão, <xref:System.Activities.Presentation.Toolbox.ToolboxCategory.%23ctor%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Activities.Presentation.Toolbox.ToolboxItemWrapper tool);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Activities.Presentation.Toolbox.ToolboxItemWrapper tool) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.Add(System.Activities.Presentation.Toolbox.ToolboxItemWrapper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tool" Type="System.Activities.Presentation.Toolbox.ToolboxItemWrapper" />
      </Parameters>
      <Docs>
        <param name="tool">O <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> item a ser adicionado à coleção.</param>
        <summary>Adiciona uma ferramenta especificada ao final da coleção de categoria da caixa de ferramentas.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="tool" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CategoryName">
      <MemberSignature Language="C#" Value="public string CategoryName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryName" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.CategoryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o nome da categoria de caixa de ferramentas.</summary>
        <value>O nome da categoria de caixa de ferramentas.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando definido, a propriedade fornece uma notificação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Activities.Presentation.Toolbox.ToolboxItemWrapper this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Presentation.Toolbox.ToolboxItemWrapper Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Presentation.Toolbox.ToolboxItemWrapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice baseado em zero da ferramenta para obter ou definir.</param>
        <summary>Obtém ou define a ferramenta no índice especificado.</summary>
        <value>O <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> objeto no local especificado <paramref name="index" />...</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="index" /> não é válido para o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> coleção.</exception>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Activities.Presentation.Toolbox.ToolboxCategory.PropertyChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando um valor de propriedade é alterado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Activities.Presentation.Toolbox.ToolboxItemWrapper tool);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(class System.Activities.Presentation.Toolbox.ToolboxItemWrapper tool) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.Remove(System.Activities.Presentation.Toolbox.ToolboxItemWrapper)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tool" Type="System.Activities.Presentation.Toolbox.ToolboxItemWrapper" />
      </Parameters>
      <Docs>
        <param name="tool">O <see cref="T:System.Activities.Presentation.Toolbox.ToolboxItemWrapper" /> item a ser removido da coleção.</param>
        <summary>Remove a primeira ocorrência de uma ferramenta especificada da coleção de categoria da caixa de ferramentas.</summary>
        <returns>
          <see langword="true" />Se a ferramenta for removida com êxito; Caso contrário, <see langword="false" />. Esse método também retorna <see langword="false" /> se a ferramenta não foi encontrada na coleção.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="tool" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">O unidimensional <see cref="T:System.Array" /> que é o destino dos elementos copiados a partir de <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> coleção. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
        <param name="index">O índice da matriz na qual a cópia começa.</param>
        <summary>Copia todo o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> coleção para um unidimensional compatível <see cref="T:System.Array" />, começando no índice especificado do destino <see cref="T:System.Array" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Os elementos são copiados para o <xref:System.Array> na mesma ordem em que o enumerador que itera por meio de <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> coleção.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="array" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de ferramentas contidas no <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <value>O número de elementos contidos no <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o acesso a <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> é sincronizado (thread-safe).</summary>
        <value>
          <see langword="true" /> caso o acesso ao <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.ICollection>. O <xref:System.Activities.Presentation.Toolbox.ToolboxCategory.System%23Collections%23ICollection%23SyncRoot%2A> propriedade retorna um objeto, que pode ser usado para sincronizar o acesso a <xref:System.Activities.Presentation.Toolbox.ToolboxCategory>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <value>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.ICollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um enumerador que itera por meio da coleção <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <returns>Um <see cref="T:System.Collections.IEnumerator`1" /> para o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Enumeradores podem ser usados para ler os dados em uma coleção, mas eles não podem ser usados para modificar a coleção subjacente.  
  
 Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção. Nesta posição, <xref:System.Collections.Generic.IEnumerator%601.Current> está indefinido. Por isso, você deve chamar <xref:System.Collections.IEnumerator.MoveNext> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.Generic.IEnumerator%601.Current>. Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador não é mais válido e seu comportamento é indefinido.  
  
 O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A posição na qual o novo elemento é inserido.</param>
        <summary>Adiciona uma ferramenta para o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <returns>O índice baseado em zero da ferramenta adicionado à coleção.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="value" /> é de um tipo que não é atribuível para o <see cref="T:System.Collections.IList" /> implementada pela coleção.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove todas as ferramentas do <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A ferramenta <see cref="T:System.Object" /> a ser localizado na coleção.</param>
        <summary>Determina se o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> contém uma ferramenta específica.</summary>
        <returns>
          <see langword="true" /> se o <paramref name="value" /> for encontrado no <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="value" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">O <see cref="T:System.Object" /> a ser localizado no <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</param>
        <summary>Determina o índice de uma ferramenta específica de <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <returns>O índice com base em zero do <paramref name="value" /> se encontrado no <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />; caso contrário, -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="value" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">O índice de base zero no qual <c>valor</c> devem ser inseridos.</param>
        <param name="value">A ferramenta adicionada à coleção.</param>
        <summary>Insere uma ferramenta para o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> no índice especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 Se `index` é igual ao número de itens no <xref:System.Collections.IList>, em seguida, `value` é acrescentado ao final.  
  
 Em coleções de elementos contíguos, como listas, os elementos que seguem o ponto de inserção descem para acomodar o novo elemento. Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="index" /> não é válido para o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> coleção.</exception>
        <exception cref="T:System.ArgumentNullException">O <paramref name="value" /> é <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">O <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> é somente leitura, ou ele tem um tamanho fixo que foi excedido.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> tem um tamanho fixo.</summary>
        <value>
          <see langword="true" /> se o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> tiver um valor fixo; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> é somente leitura.</summary>
        <value>
          <see langword="true" /> se o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> for somente leitura; caso contrário, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>. Uma coleção que seja somente leitura não permite a adição, a remoção ou a modificação de elementos após a coleção ser criada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice de base zero do item de ferramenta para obter ou definir.</param>
        <summary>Obtém ou define a ferramenta no índice especificado.</summary>
        <value>A ferramenta <see cref="T:System.Object" /> no índice especificado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>. Esta propriedade fornece a capacidade de acessar um elemento específico na coleção usando a seguinte sintaxe: `myCollection[index]`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">A ferramenta <see cref="T:System.Object" /> para remover do <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</param>
        <summary>Remove a primeira ocorrência de uma ferramenta específica do <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 Em coleções de elementos contíguos, como listas, os elementos que seguem o elemento removido sobem para ocupar o ponto vazio. Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Toolbox.ToolboxCategory.System#Collections#IList#RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice com base em zero do item de ferramenta a ser removido.</param>
        <summary>Remove a ferramenta no índice especificado do <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.Toolbox.ToolboxCategory> implementa a interface <xref:System.Collections.IList>.  
  
 Em coleções de elementos contíguos, como listas, os elementos que seguem o elemento removido sobem para ocupar o ponto vazio. Caso a coleção seja indexada, os índices dos elementos que são movidos também são atualizados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="index" /> não é válido para o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" /> coleção.</exception>
      </Docs>
    </Member>
    <Member MemberName="Tools">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Activities.Presentation.Toolbox.ToolboxItemWrapper&gt; Tools { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;class System.Activities.Presentation.Toolbox.ToolboxItemWrapper&gt; Tools" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Toolbox.ToolboxCategory.Tools" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Activities.Presentation.Toolbox.ToolboxItemWrapper&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém as ferramentas de <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</summary>
        <value>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém o <see cref="T:System.Activities.Presentation.Toolbox.ToolboxCategory" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
