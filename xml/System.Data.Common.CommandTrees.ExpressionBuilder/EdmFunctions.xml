<Type Name="EdmFunctions" FullName="System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
  <TypeSignature Language="C#" Value="public static class EdmFunctions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EdmFunctions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece uma API para construir <see cref="T:System.Data.Common.CommandTrees.DbExpression" />s que invocam funções canônicas do EDM e permite que a API a seja acessada como métodos de extensão no próprio tipo de expressão.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Abs (this System.Data.Common.CommandTrees.DbExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Abs(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">Uma expressão que especifica o valor numérico.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Abs' canônica com o argumento especificado, o que cada um deve ter um tipo de resultado numérico. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **valor**.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor absoluto de **valor**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value**</exception>
        <exception cref="T:System.ArgumentException">**value**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddDays (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddDays(class System.Data.Common.CommandTrees.DbExpression dateValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de dias para adicionar a **dateValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddDays' canônica com os argumentos especificados, o que deve ter tipos de resultado de DateTime ou DateTimeOffset e inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **dateValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de dias especificado pelo **addValue** para o valor especificado pelo **dateValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddHours (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddHours(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de horas para adicionar a **timeValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddHours' canônica com os argumentos especificados, o que deve ter DateTime, DateTimeOffset ou hora e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **timeValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de horas especificado por **addValue** para o valor especificado pelo **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMicroseconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMicroseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMicroseconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de microssegundos para adicionar a **timeValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddMicroseconds' canônica com os argumentos especificados, o que deve ter DateTime, DateTimeOffset ou hora e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **timeValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de microssegundos especificado por **addValue** para o valor especificado pelo **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMilliseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMilliseconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de milissegundos para adicionar a **timeValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddMilliseconds' canônica com os argumentos especificados, o que deve ter DateTime, DateTimeOffset ou hora e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **timeValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de milissegundos especificado pela **addValue** para o valor especificado pelo **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMinutes (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMinutes(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de minutos para adicionar a **timeValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddMinutes' canônica com os argumentos especificados, o que deve ter DateTime, DateTimeOffset ou hora e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **timeValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de minutos especificado pela **addValue** para o valor especificado pelo **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddMonths (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddMonths(class System.Data.Common.CommandTrees.DbExpression dateValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de meses a adicionar a **dateValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddMonths' canônica com os argumentos especificados, o que deve ter tipos de resultado de DateTime ou DateTimeOffset e inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **dateValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de meses especificado por **addValue** para o valor especificado pelo **dateValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddNanoseconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddNanoseconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddNanoseconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de nanossegundos para adicionar a **timeValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddNanoseconds' canônica com os argumentos especificados, o que deve ter DateTime, DateTimeOffset ou hora e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **timeValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de nanossegundos especificado por **addValue** para o valor especificado pelo **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddSeconds (this System.Data.Common.CommandTrees.DbExpression timeValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddSeconds(class System.Data.Common.CommandTrees.DbExpression timeValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de segundos para adicionar a **timeValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddSeconds' canônica com os argumentos especificados, o que deve ter DateTime, DateTimeOffset ou hora e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **timeValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de segundos especificado por **addValue** para o valor especificado pelo **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression AddYears (this System.Data.Common.CommandTrees.DbExpression dateValue, System.Data.Common.CommandTrees.DbExpression addValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression AddYears(class System.Data.Common.CommandTrees.DbExpression dateValue, class System.Data.Common.CommandTrees.DbExpression addValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="addValue" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor para o qual **addValue**devem ser adicionados.</param>
        <param name="addValue">Uma expressão que especifica o número de anos para adicionar a **dateValue**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'AddYears' canônica com os argumentos especificados, o que deve ter tipos de resultado de DateTime ou DateTimeOffset e inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **dateValue**.</summary>
        <returns>Um novo DbFunctionExpression que adiciona o número de anos especificado por **addValue** para o valor especificado pelo **dateValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue** **addValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue** **addValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Average (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Average(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção com base na qual o valor médio deve ser calculado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Avg' canônica na coleção especificada. O tipo de resultado da expressão é o mesmo que o tipo de elemento da coleção.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor médio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="BitwiseAnd">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseAnd (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseAnd(class System.Data.Common.CommandTrees.DbExpression value1, class System.Data.Common.CommandTrees.DbExpression value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="value2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="value1">Uma expressão que especifica o primeiro operando.</param>
        <param name="value2">Uma expressão que especifica o segundo operando.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'BitwiseAnd' canônica com os argumentos especificados, o que deve ter o mesmo tipo de resultado numérico inteiro. O tipo de resultado da expressão é o mesmo que o tipo dos argumentos.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor produzido por executar o AND bit a bit de **value1** e **value2**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value1** **value2**</exception>
        <exception cref="T:System.ArgumentException">**value1** **value2**</exception>
      </Docs>
    </Member>
    <Member MemberName="BitwiseNot">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseNot (this System.Data.Common.CommandTrees.DbExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseNot(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">Uma expressão que especifica o primeiro operando.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'BitwiseNot' canônica com o argumento especificado, que deve ter um tipo de resultado numérico inteiro. O tipo de resultado da expressão é o mesmo que o tipo dos argumentos.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor produzido por executar o bit a bit não de **valor**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value**</exception>
        <exception cref="T:System.ArgumentException">**value**</exception>
      </Docs>
    </Member>
    <Member MemberName="BitwiseOr">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseOr (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseOr(class System.Data.Common.CommandTrees.DbExpression value1, class System.Data.Common.CommandTrees.DbExpression value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="value2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="value1">Uma expressão que especifica o primeiro operando.</param>
        <param name="value2">Uma expressão que especifica o segundo operando.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'BitwiseOr' canônica com os argumentos especificados, o que deve ter o mesmo tipo de resultado numérico inteiro. O tipo de resultado da expressão é o mesmo que o tipo dos argumentos.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor produzido por executar o OR bit a bit de **value1** e **value2**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value1** **value2**</exception>
        <exception cref="T:System.ArgumentException">**value1** **value2**</exception>
      </Docs>
    </Member>
    <Member MemberName="BitwiseXor">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression BitwiseXor (this System.Data.Common.CommandTrees.DbExpression value1, System.Data.Common.CommandTrees.DbExpression value2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression BitwiseXor(class System.Data.Common.CommandTrees.DbExpression value1, class System.Data.Common.CommandTrees.DbExpression value2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="value2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="value1">Uma expressão que especifica o primeiro operando.</param>
        <param name="value2">Uma expressão que especifica o segundo operando.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'BitwiseXor' canônica com os argumentos especificados, o que deve ter o mesmo tipo de resultado numérico inteiro. O tipo de resultado da expressão é o mesmo que o tipo dos argumentos.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor produzido por executar o XOR bit a bit (OR exclusivo) de **value1** e **value2**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value1** **value2**</exception>
        <exception cref="T:System.ArgumentException">**value1** **value2**</exception>
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Ceiling (this System.Data.Common.CommandTrees.DbExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Ceiling(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">Uma expressão que especifica o valor numérico.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Ceiling' canônica com o argumento especificado, que deve ter um tipo de resultado single, double ou decimal. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **valor**.</summary>
        <returns>Um novo DbFunctionExpression que retorna o menor valor de inteiro não menor que **valor**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value**</exception>
        <exception cref="T:System.ArgumentException">**value**</exception>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Concat (this System.Data.Common.CommandTrees.DbExpression string1, System.Data.Common.CommandTrees.DbExpression string2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Concat(class System.Data.Common.CommandTrees.DbExpression string1, class System.Data.Common.CommandTrees.DbExpression string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="string2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="string1">Uma expressão que especifica a cadeia de caracteres que deve aparecer primeira na cadeia de caracteres de resultado concatenado.</param>
        <param name="string2">Uma expressão que especifica a cadeia de caracteres que deve aparecer em segundo lugar na cadeia de caracteres de resultado concatenado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Concat' canônica com os argumentos especificados, o que cada um deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão é uma cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que produz a cadeia de caracteres concatenada.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**string1** **string2**</exception>
        <exception cref="T:System.ArgumentException">**string1** **string2**</exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbExpression Contains (this System.Data.Common.CommandTrees.DbExpression searchedString, System.Data.Common.CommandTrees.DbExpression searchedForString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbExpression Contains(class System.Data.Common.CommandTrees.DbExpression searchedString, class System.Data.Common.CommandTrees.DbExpression searchedForString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchedString" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="searchedForString" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="searchedString">Uma expressão que especifica a cadeia de caracteres para pesquisar qualquer ocorrência de **searchedForString**.</param>
        <param name="searchedForString">Uma expressão que especifica a cadeia de caracteres a ser pesquisado em **searchedString**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Contém' canônica com os argumentos especificados, o que cada um deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão é booliana.</summary>
        <returns>Um novo DbFunctionExpression que retorna um valor booliano que indica se ou não **searchedForString** ocorre em **searchedString**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**searchedString** **searchedForString**</exception>
        <exception cref="T:System.ArgumentException">**searchedString** **searchedForString**</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Count (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Count(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção pela qual o valor da contagem deve ser calculado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Count' canônica na coleção especificada. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor da contagem.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDateTime">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CreateDateTime (System.Data.Common.CommandTrees.DbExpression year, System.Data.Common.CommandTrees.DbExpression month, System.Data.Common.CommandTrees.DbExpression day, System.Data.Common.CommandTrees.DbExpression hour, System.Data.Common.CommandTrees.DbExpression minute, System.Data.Common.CommandTrees.DbExpression second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CreateDateTime(class System.Data.Common.CommandTrees.DbExpression year, class System.Data.Common.CommandTrees.DbExpression month, class System.Data.Common.CommandTrees.DbExpression day, class System.Data.Common.CommandTrees.DbExpression hour, class System.Data.Common.CommandTrees.DbExpression minute, class System.Data.Common.CommandTrees.DbExpression second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="month" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="day" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="hour" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="minute" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="second" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="year">Uma expressão que fornece o valor de ano para a nova instância de DateTime.</param>
        <param name="month">Uma expressão que fornece o valor de mês para a nova instância de DateTime.</param>
        <param name="day">Uma expressão que fornece o valor do dia para a nova instância de DateTime.</param>
        <param name="hour">Uma expressão que fornece o valor de hora para a nova instância de DateTime.</param>
        <param name="minute">Uma expressão que fornece o valor de minuto para a nova instância de DateTime.</param>
        <param name="second">Uma expressão que fornece o valor de segundo para a nova instância de DateTime.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'CreateDateTime' canônica com os argumentos especificados. **segundo** devem ter um tipo de resultado de EDM, enquanto todos os outros argumentos devem ter um tipo de resultado de Int32. O tipo de resultado da expressão é Edm.DateTime.</summary>
        <returns>Um novo DbFunctionExpression que retorna um novo DateTime com base nos valores especificados.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**ano** **mês** **dia** **hora** **minuto** **segundo**</exception>
        <exception cref="T:System.ArgumentException">**ano** **mês** **dia** **hora** **minuto** **segundo**</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDateTimeOffset">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CreateDateTimeOffset (System.Data.Common.CommandTrees.DbExpression year, System.Data.Common.CommandTrees.DbExpression month, System.Data.Common.CommandTrees.DbExpression day, System.Data.Common.CommandTrees.DbExpression hour, System.Data.Common.CommandTrees.DbExpression minute, System.Data.Common.CommandTrees.DbExpression second, System.Data.Common.CommandTrees.DbExpression timeZoneOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CreateDateTimeOffset(class System.Data.Common.CommandTrees.DbExpression year, class System.Data.Common.CommandTrees.DbExpression month, class System.Data.Common.CommandTrees.DbExpression day, class System.Data.Common.CommandTrees.DbExpression hour, class System.Data.Common.CommandTrees.DbExpression minute, class System.Data.Common.CommandTrees.DbExpression second, class System.Data.Common.CommandTrees.DbExpression timeZoneOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="month" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="day" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="hour" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="minute" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="second" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="timeZoneOffset" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="year">Uma expressão que fornece o valor de ano para a nova instância de DateTimeOffset.</param>
        <param name="month">Uma expressão que fornece o valor de mês para a nova instância de DateTimeOffset.</param>
        <param name="day">Uma expressão que fornece o valor do dia para a nova instância de DateTimeOffset.</param>
        <param name="hour">Uma expressão que fornece o valor de hora para a nova instância de DateTimeOffset.</param>
        <param name="minute">Uma expressão que fornece o valor de minuto para a nova instância de DateTimeOffset.</param>
        <param name="second">Uma expressão que fornece o valor de segundo para a nova instância de DateTimeOffset.</param>
        <param name="timeZoneOffset">Uma expressão que fornece o número de minutos em que o valor de deslocamento de fuso horário para a nova instância de DateTimeOffset.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'CreateDateTimeOffset' canônica com os argumentos especificados. **segundo** devem ter um tipo de resultado de EDM, enquanto todos os outros argumentos devem ter um tipo de resultado de Int32. O tipo de resultado da expressão é Edm.DateTimeOffset.</summary>
        <returns>Um novo DbFunctionExpression que retorna um novo DateTimeOffset com base nos valores especificados.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**ano** **mês** **dia** **hora** **minuto** **segundo** ** timeZoneOffset**</exception>
        <exception cref="T:System.ArgumentException">**ano** **mês** **dia** **hora** **minuto** **segundo** ** timeZoneOffset**</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateTime">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CreateTime (System.Data.Common.CommandTrees.DbExpression hour, System.Data.Common.CommandTrees.DbExpression minute, System.Data.Common.CommandTrees.DbExpression second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CreateTime(class System.Data.Common.CommandTrees.DbExpression hour, class System.Data.Common.CommandTrees.DbExpression minute, class System.Data.Common.CommandTrees.DbExpression second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hour" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="minute" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="second" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="hour">Uma expressão que fornece o valor de hora para a nova instância de DateTime.</param>
        <param name="minute">Uma expressão que fornece o valor de minuto para a nova instância de DateTime.</param>
        <param name="second">Uma expressão que fornece o valor de segundo para a nova instância de DateTime.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'CreateTime' canônica com os argumentos especificados. **segundo** devem ter um tipo de resultado de EDM, enquanto todos os outros argumentos devem ter um tipo de resultado de Int32. O tipo de resultado da expressão é Edm.Time.</summary>
        <returns>Um novo DbFunctionExpression que retorna uma nova hora com base nos valores especificados.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**hora** **minuto** **segundo**</exception>
        <exception cref="T:System.ArgumentException">**hora** **minuto** **segundo**</exception>
      </Docs>
    </Member>
    <Member MemberName="CurrentDateTime">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CurrentDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CurrentDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'CurrentDateTime' canônica.</summary>
        <returns>Um novo DbFunctionExpression que retorna a data e hora atuais como uma instância de Edm.DateTime.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDateTimeOffset">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CurrentDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CurrentDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'CurrentDateTimeOffset' canônica.</summary>
        <returns>Um novo DbFunctionExpression que retorna a data e hora atuais como uma instância de Edm.DateTimeOffset.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUtcDateTime">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression CurrentUtcDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression CurrentUtcDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'CurrentUtcDateTime' canônica.</summary>
        <returns>Um novo DbFunctionExpression que retorna a data UTC atual e a hora como uma instância de Edm.DateTime.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Day (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Day(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor do qual o dia deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Day' canônica com o argumento especificado, que deve ter um tipo de resultado DateTime ou DateTimeOffset. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de dia inteiro de **dateValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DayOfYear (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DayOfYear(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor do qual o dia do ano deve ser recuperada.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DayOfYear' canônica com o argumento especificado, que deve ter um tipo de resultado DateTime ou DateTimeOffset. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o dia inteiro do valor de ano de **dateValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="DiffDays">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffDays (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffDays(class System.Data.Common.CommandTrees.DbExpression dateValue1, class System.Data.Common.CommandTrees.DbExpression dateValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="dateValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="dateValue1">Uma expressão que especifica o primeiro argumento de valor de data.</param>
        <param name="dateValue2">Uma expressão que especifica o segundo argumento de valor de data.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffDays' canônica com os argumentos especificados, que devem ter cada resultado DateTime ou DateTimeOffset de tipo. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de dias que é a diferença entre **dateValue1** e **dateValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffHours">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffHours (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffHours(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue1">Uma expressão que especifica o primeiro argumento de valor de tempo.</param>
        <param name="timeValue2">Uma expressão que especifica o segundo argumento de valor de tempo.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffHours' canônica com os argumentos especificados, o que cada um deve ter DateTime, DateTimeOffset ou Time que tipo de resultado. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de horas que é a diferença entre **timeValue1** e **timeValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffMicroseconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMicroseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMicroseconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue1">Uma expressão que especifica o primeiro argumento de valor de tempo.</param>
        <param name="timeValue2">Uma expressão que especifica o segundo argumento de valor de tempo.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffMicroseconds' canônica com os argumentos especificados, o que cada um deve ter DateTime, DateTimeOffset ou Time que tipo de resultado. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de microssegundos que é a diferença entre **timeValue1** e **timeValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffMilliseconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMilliseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMilliseconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue1">Uma expressão que especifica o primeiro argumento de valor de tempo.</param>
        <param name="timeValue2">Uma expressão que especifica o segundo argumento de valor de tempo.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffMilliseconds' canônica com os argumentos especificados, o que cada um deve ter DateTime, DateTimeOffset ou Time que tipo de resultado. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de milissegundos que é a diferença entre **timeValue1** e **timeValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffMinutes">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMinutes (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMinutes(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue1">Uma expressão que especifica o primeiro argumento de valor de tempo.</param>
        <param name="timeValue2">Uma expressão que especifica o segundo argumento de valor de tempo.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffMinutes' canônica com os argumentos especificados, o que cada um deve ter DateTime, DateTimeOffset ou Time que tipo de resultado. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de minutos que é a diferença entre **timeValue1** e **timeValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffMonths">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffMonths (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffMonths(class System.Data.Common.CommandTrees.DbExpression dateValue1, class System.Data.Common.CommandTrees.DbExpression dateValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="dateValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="dateValue1">Uma expressão que especifica o primeiro argumento de valor de data.</param>
        <param name="dateValue2">Uma expressão que especifica o segundo argumento de valor de data.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffMonths' canônica com os argumentos especificados, que devem ter cada resultado DateTime ou DateTimeOffset de tipo. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de meses que é a diferença entre **dateValue1** e **dateValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffNanoseconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffNanoseconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffNanoseconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue1">Uma expressão que especifica o primeiro argumento de valor de tempo.</param>
        <param name="timeValue2">Uma expressão que especifica o segundo argumento de valor de tempo.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffNanoseconds' canônica com os argumentos especificados, o que cada um deve ter DateTime, DateTimeOffset ou Time que tipo de resultado. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de nanossegundos que é a diferença entre **timeValue1** e **timeValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffSeconds">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffSeconds (this System.Data.Common.CommandTrees.DbExpression timeValue1, System.Data.Common.CommandTrees.DbExpression timeValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffSeconds(class System.Data.Common.CommandTrees.DbExpression timeValue1, class System.Data.Common.CommandTrees.DbExpression timeValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="timeValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="timeValue1">Uma expressão que especifica o primeiro argumento de valor de tempo.</param>
        <param name="timeValue2">Uma expressão que especifica o segundo argumento de valor de tempo.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffSeconds' canônica com os argumentos especificados, o que cada um deve ter DateTime, DateTimeOffset ou Time que tipo de resultado. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de segundos que a diferença entre **timeValue1** e **timeValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DiffYears">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression DiffYears (this System.Data.Common.CommandTrees.DbExpression dateValue1, System.Data.Common.CommandTrees.DbExpression dateValue2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression DiffYears(class System.Data.Common.CommandTrees.DbExpression dateValue1, class System.Data.Common.CommandTrees.DbExpression dateValue2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue1" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="dateValue2" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="dateValue1">Uma expressão que especifica o primeiro argumento de valor de data.</param>
        <param name="dateValue2">Uma expressão que especifica o segundo argumento de valor de data.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'DiffYears' canônica com os argumentos especificados, que devem ter cada resultado DateTime ou DateTimeOffset de tipo. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de anos é a diferença entre **dateValue1** e **dateValue2**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression EndsWith (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression EndsWith(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="suffix" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres que é pesquisada no final de cadeia de caracteres **sufixo**.</param>
        <param name="suffix">Uma expressão que especifica a cadeia de caracteres de destino que é procurada no final da **stringArgument**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'EndsWith' canônica com os argumentos especificados, o que cada um deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão é booliana.</summary>
        <returns>Um novo DbFunctionExpression que retorna um valor booliano que indica se ou não **stringArgument** termina com **sufixo**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Floor (this System.Data.Common.CommandTrees.DbExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Floor(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">Uma expressão que especifica o valor numérico.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Floor' canônica com o argumento especificado, que deve ter um tipo de resultado single, double ou decimal. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **valor**.</summary>
        <returns>Um novo DbFunctionExpression que retorna o maior valor de inteiro não é maior que **valor**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value**</exception>
        <exception cref="T:System.ArgumentException">**value**</exception>
      </Docs>
    </Member>
    <Member MemberName="GetTotalOffsetMinutes">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression GetTotalOffsetMinutes (this System.Data.Common.CommandTrees.DbExpression dateTimeOffsetArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression GetTotalOffsetMinutes(class System.Data.Common.CommandTrees.DbExpression dateTimeOffsetArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffsetArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffsetArgument">Uma expressão que especifica o valor de DateTimeOffset em que o minuto deslocamento do GMT deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'GetTotalOffsetMinutes' canônica com o argumento especificado, que deve ter um tipo de resultado de DateTimeOffset. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o número de minutos **dateTimeOffsetArgument** é deslocada do GMT.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateTimeOffsetArgument**</exception>
        <exception cref="T:System.ArgumentException">**dateTimeOffsetArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Hour (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Hour(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor em que a hora deve ser recuperada.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Hour' canônica com o argumento especificado, que deve ter um DateTime, DateTimeOffset ou tipo de resultado de tempo. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de hora de inteiro de **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression IndexOf (this System.Data.Common.CommandTrees.DbExpression searchString, System.Data.Common.CommandTrees.DbExpression stringToFind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression IndexOf(class System.Data.Common.CommandTrees.DbExpression searchString, class System.Data.Common.CommandTrees.DbExpression stringToFind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchString" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="stringToFind" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="searchString">Uma expressão que especifica a cadeia de caracteres para pesquisar **stringToFind**.</param>
        <param name="stringToFind">Uma expressão que especifica a cadeia de caracteres a ser localizado em **SequênciaDePesquisa** devem ser verificados.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'IndexOf' canônica com os argumentos especificados, o que cada um deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o primeiro índice de **stringToFind** na **SequênciaDePesquisa**.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 É o índice retornado pela IndexOf \<b > com base em 1 \< /b >.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">**SequênciaDePesquisa** **stringToFind**</exception>
        <exception cref="T:System.ArgumentException">**SequênciaDePesquisa** **stringToFind**</exception>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Left (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Left(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="length" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres do qual extrair a subcadeia de caracteres mais à esquerda.</param>
        <param name="length">Uma expressão que especifica o comprimento da subcadeia de caracteres mais à esquerda para extrair **stringArgument**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função canônica 'Left' com os argumentos especificados, o que deve ter um resultado numérico inteiro e de cadeia de caracteres de tipo. O tipo de resultado da expressão é uma cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna a subcadeia de caracteres mais à esquerda de comprimento **comprimento** de **stringArgument**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument** **comprimento**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Length (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Length(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres para o qual o comprimento deve ser calculado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Length' canônica com o argumento especificado, que deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o comprimento de **stringArgument**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="LongCount">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression LongCount (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression LongCount(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção pela qual o valor da contagem deve ser calculado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'BigCount' canônica na coleção especificada. O tipo de resultado da expressão é Edm.Int64.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor da contagem.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Max (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Max(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção com base na qual o valor máximo deve ser recuperado</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Max' canônica na coleção especificada. O tipo de resultado da expressão é o mesmo que o tipo de elemento da coleção.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor máximo.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Millisecond (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Millisecond(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor do qual o milissegundo deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Milissegundo' canônica com o argumento especificado, que deve ter um DateTime, DateTimeOffset ou tipo de resultado de tempo. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de milissegundos de inteiro de **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Min (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Min(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção com base na qual o valor mínimo deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Min' canônica na coleção especificada. O tipo de resultado da expressão é o mesmo que o tipo de elemento da coleção.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor mínimo.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Minute (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Minute(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor do qual o minuto deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Minute' canônica com o argumento especificado, que deve ter um DateTime, DateTimeOffset ou tipo de resultado de tempo. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de minuto de inteiro de **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Month (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Month(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor do qual o mês deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Month' canônica com o argumento especificado, que deve ter um tipo de resultado DateTime ou DateTimeOffset. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de mês inteiro de **dateValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="NewGuid">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression NewGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression NewGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'NewGuid' canônica.</summary>
        <returns>Um novo DbFunctionExpression que retorna um novo valor GUID.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Power (this System.Data.Common.CommandTrees.DbExpression baseArgument, System.Data.Common.CommandTrees.DbExpression exponent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Power(class System.Data.Common.CommandTrees.DbExpression baseArgument, class System.Data.Common.CommandTrees.DbExpression exponent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="exponent" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="baseArgument">Uma expressão que especifica o valor numérico para elevar à potência especificada.</param>
        <param name="exponent">Uma expressão que especifica a potência à qual **baseArgument** deve ser gerado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função de 'Power' canônica com os argumentos especificados, que devem ter tipos de resultado numérico. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **baseArgument**.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de **baseArgument** elevado à potência especificada por **expoente**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**baseArgument** **expoente**</exception>
        <exception cref="T:System.ArgumentException">**baseArgument** **expoente**</exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Replace (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression toReplace, System.Data.Common.CommandTrees.DbExpression replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Replace(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression toReplace, class System.Data.Common.CommandTrees.DbExpression replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="toReplace" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="replacement" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres no qual realizar a operação de substituição.</param>
        <param name="toReplace">Uma expressão que especifica a cadeia de caracteres que será substituída.</param>
        <param name="replacement">Uma expressão que especifica a cadeia de caracteres de substituição.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função canônica 'Replace' com os argumentos especificados, o que cada um deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão também é cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna uma nova cadeia de caracteres com base em **stringArgument** onde todas as ocorrências do **toReplace** é substituído por **substituição**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument** **toReplace** **substituição**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument** **toReplace** **substituição**</exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Reverse (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Reverse(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres para reverter.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função canônica 'Reverter' com o argumento especificado, que deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão também é cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que produz o valor invertido **stringArgument**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Right (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Right(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="length" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres do qual extrair a subcadeia de caracteres mais à direita.</param>
        <param name="length">Uma expressão que especifica o comprimento da subcadeia de caracteres mais à direita para extrair **stringArgument**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função canônica 'Right' com os argumentos especificados, o que deve ter um resultado numérico inteiro e de cadeia de caracteres de tipo. O tipo de resultado da expressão é uma cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna a subcadeia de caracteres mais à direita de comprimento **comprimento** de **stringArgument**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument** **comprimento**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Common.CommandTrees.DbExpression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Round(class System.Data.Common.CommandTrees.DbExpression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="value">Uma expressão que especifica o valor numérico para arredondar.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Round' canônica com o argumento especificado, que deve ter um tipo de resultado single, double ou decimal. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **valor**.</summary>
        <returns>Um novo DbFunctionExpression que Arredonda o argumento especificado para o valor inteiro mais próximo.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**value**</exception>
        <exception cref="T:System.ArgumentException">**value**</exception>
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Round (this System.Data.Common.CommandTrees.DbExpression value, System.Data.Common.CommandTrees.DbExpression digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Round(class System.Data.Common.CommandTrees.DbExpression value, class System.Data.Common.CommandTrees.DbExpression digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="digits" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="value">Uma expressão que especifica o valor numérico para arredondar.</param>
        <param name="digits">Uma expressão que especifica o número de dígitos de precisão para usar ao arredondamento.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Round' canônica com os argumentos especificados, o que devem ter um único, duplo ou decimal e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **valor**.</summary>
        <returns>Um novo DbFunctionExpression que Arredonda o argumento especificado para o valor inteiro mais próximo, com precisão conforme especificado por **dígitos**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**valor** **dígitos**</exception>
        <exception cref="T:System.ArgumentException">**valor** **dígitos**</exception>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Second (this System.Data.Common.CommandTrees.DbExpression timeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Second(class System.Data.Common.CommandTrees.DbExpression timeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="timeValue">Uma expressão que especifica o valor do qual o segundo deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função canônica 'Segunda' com o argumento especificado, que deve ter um DateTime, DateTimeOffset ou tipo de resultado de tempo. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o segundo valor de inteiro de **timeValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**timeValue**</exception>
        <exception cref="T:System.ArgumentException">**timeValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StartsWith (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StartsWith(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="prefix" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres que é pesquisada no início de cadeia de caracteres **prefixo**.</param>
        <param name="prefix">Uma expressão que especifica a cadeia de caracteres de destino que é procurada no início de **stringArgument**.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'StartsWith' canônica com os argumentos especificados, o que cada um deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão é booliana.</summary>
        <returns>Um novo DbFunctionExpression que retorna um valor booliano que indica se ou não **stringArgument** começa com **prefixo**.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StDev">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StDev (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StDev(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção para a qual o desvio padrão deve ser calculado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'StDev' canônica nos membros não nulos da coleção especificada. O tipo de resultado da expressão é Edm.Double.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor do desvio padrão nos membros não nulos da coleção.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="StDevP">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression StDevP (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression StDevP(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção para a qual o desvio padrão deve ser calculado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'StDevP' canônica na população da coleção especificada. O tipo de resultado da expressão é Edm.Double.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor do desvio padrão.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Substring (this System.Data.Common.CommandTrees.DbExpression stringArgument, System.Data.Common.CommandTrees.DbExpression start, System.Data.Common.CommandTrees.DbExpression length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Substring(class System.Data.Common.CommandTrees.DbExpression stringArgument, class System.Data.Common.CommandTrees.DbExpression start, class System.Data.Common.CommandTrees.DbExpression length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="start" Type="System.Data.Common.CommandTrees.DbExpression" />
        <Parameter Name="length" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres do qual extrair a subcadeia de caracteres.</param>
        <param name="start">Uma expressão que especifica o índice inicial do qual a subcadeia de caracteres deve ser feita.</param>
        <param name="length">Uma expressão que especifica o comprimento da subcadeia de caracteres.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Substring' canônica com os argumentos especificados, que devem ter tipos de resultado numérico uma cadeia de caracteres e inteiros. O tipo de resultado da expressão é uma cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna a subcadeia de caracteres de comprimento **comprimento** de **stringArgument** começando em **iniciar**.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Subcadeia de caracteres requer que o índice especificado pelo **iniciar** ser \<b > com base em 1 \< /b >.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument** **iniciar** **comprimento**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument** **iniciar** **comprimento**</exception>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Sum (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Sum(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção com base na qual a soma deve ser calculada.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Sum' canônica na coleção especificada. O tipo de resultado da expressão é o mesmo que o tipo de elemento da coleção.</summary>
        <returns>Uma nova DbFunctionExpression que produz a soma.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression ToLower (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression ToLower(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres que deve ser convertida em letras minúsculas.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'ToLower' canônica com o argumento especificado, que deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão também é cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de **stringArgument** convertidos em letras minúsculas.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression ToUpper (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression ToUpper(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres que deve ser convertida em letras maiusculas.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'ToUpper' canônica com o argumento especificado, que deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão também é cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de **stringArgument** convertido em letras maiusculas.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Trim (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Trim(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres da qual à esquerda e à direita espaço devem ser removidos.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função canônica 'Trim' com o argumento especificado, que deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão também é cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de **stringArgument** à esquerda e à direita removido.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression TrimEnd (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression TrimEnd(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres da qual espaço à direita deve ser removido.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'RTrim' canônica com o argumento especificado, que deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão também é cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de **stringArgument** com à direita removido.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression TrimStart (this System.Data.Common.CommandTrees.DbExpression stringArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression TrimStart(class System.Data.Common.CommandTrees.DbExpression stringArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringArgument" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="stringArgument">Uma expressão que especifica a cadeia de caracteres do que levam o espaço deve ser removido.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'LTrim' canônica com o argumento especificado, que deve ter um tipo de resultado de cadeia de caracteres. O tipo de resultado da expressão também é cadeia de caracteres.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de **stringArgument** com à esquerda removido.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**stringArgument**</exception>
        <exception cref="T:System.ArgumentException">**stringArgument**</exception>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Truncate (this System.Data.Common.CommandTrees.DbExpression value, System.Data.Common.CommandTrees.DbExpression digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Truncate(class System.Data.Common.CommandTrees.DbExpression value, class System.Data.Common.CommandTrees.DbExpression digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Common.CommandTrees.DbExpression,System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
        <Parameter Name="digits" Type="System.Data.Common.CommandTrees.DbExpression" />
      </Parameters>
      <Docs>
        <param name="value">Uma expressão que especifica o valor numérico para truncar.</param>
        <param name="digits">Uma expressão que especifica o número de dígitos de precisão para usar ao truncar.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Truncate' canônica com os argumentos especificados, o que devem ter um único, duplo ou decimal e tipos de resultados inteiro. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **valor**.</summary>
        <returns>Um novo DbFunctionExpression que trunca o argumento especificado para o valor inteiro mais próximo, com precisão conforme especificado por **dígitos**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**valor** **dígitos**</exception>
        <exception cref="T:System.ArgumentException">**valor** **dígitos**</exception>
      </Docs>
    </Member>
    <Member MemberName="TruncateTime">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression TruncateTime (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression TruncateTime(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor para o qual a parte de hora deve ser truncada.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'TruncateTime' canônica com o argumento especificado, que deve ter um tipo de resultado DateTime ou DateTimeOffset. O tipo de resultado da expressão é o mesmo que o tipo de resultado de **dateValue**.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de **dateValue** com hora definida como zero.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue**</exception>
      </Docs>
    </Member>
    <Member MemberName="Var">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Var (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Var(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção para a qual a variação estatística deve ser calculada.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Var' canônica nos membros não nulos da coleção especificada. O tipo de resultado da expressão é Edm.Double.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor da variação estatística dos membros não nulos da coleção.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="VarP">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression VarP (this System.Data.Common.CommandTrees.DbExpression collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression VarP(class System.Data.Common.CommandTrees.DbExpression collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="collection">Uma expressão que especifica a coleção para a qual a variação estatística deve ser calculada.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'VarP' canônica na população da coleção especificada. O tipo de resultado da expressão Edm.Double.</summary>
        <returns>Uma nova DbFunctionExpression que produz o valor da variação estatística.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**coleção**</exception>
        <exception cref="T:System.ArgumentException">**coleção**</exception>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static System.Data.Common.CommandTrees.DbFunctionExpression Year (this System.Data.Common.CommandTrees.DbExpression dateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.Common.CommandTrees.DbFunctionExpression Year(class System.Data.Common.CommandTrees.DbExpression dateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Common.CommandTrees.DbExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbFunctionExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateValue" Type="System.Data.Common.CommandTrees.DbExpression" RefType="this" />
      </Parameters>
      <Docs>
        <param name="dateValue">Uma expressão que especifica o valor em que o ano deve ser recuperado.</param>
        <summary>Cria um <see cref="T:System.Data.Common.CommandTrees.DbFunctionExpression" /> que invoca a função 'Year' canônica com o argumento especificado, que deve ter um tipo de resultado DateTime ou DateTimeOffset. O tipo de resultado da expressão é Edm.Int32.</summary>
        <returns>Um novo DbFunctionExpression que retorna o valor de ano inteiro de **dateValue**.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">**dateValue**</exception>
        <exception cref="T:System.ArgumentException">**dateValue**</exception>
      </Docs>
    </Member>
  </Members>
</Type>
