<Type Name="Control+ControlCollection" FullName="System.Windows.Forms.Control+ControlCollection">
  <TypeSignature Language="C#" Value="public class Control.ControlCollection : System.Windows.Forms.Layout.ArrangedElementCollection, ICloneable, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Control/ControlCollection extends System.Windows.Forms.Layout.ArrangedElementCollection implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Control.ControlCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Layout.ArrangedElementCollection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa uma coleção de objetos <see cref="T:System.Windows.Forms.Control" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Control.ControlCollection.Add%2A>, <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A>, e <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A> métodos permitem que você adicione e remova os controles individuais da coleção. Você também pode usar o <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> ou <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> métodos para adicionar ou remover todos os controles da coleção.  
  
 Você pode determinar se um <xref:System.Windows.Forms.Control> é um membro da coleção, passando o controle para o <xref:System.Windows.Forms.Control.ControlCollection.Contains%2A> método. Para obter o valor de índice do local de um <xref:System.Windows.Forms.Control> na coleção, passar o controle para o <xref:System.Windows.Forms.Control.ControlCollection.IndexOf%2A> método. A coleção pode ser copiada em uma matriz chamando o <xref:System.Windows.Forms.Layout.ArrangedElementCollection.CopyTo%2A> método.  
  
   
  
## Examples  
 O código a seguir exemplo remove uma <xref:System.Windows.Forms.Control> do <xref:System.Windows.Forms.Control.ControlCollection> da classe derivada <xref:System.Windows.Forms.Panel> se ele é um membro da coleção. O exemplo requer que você tenha criado um <xref:System.Windows.Forms.Panel>, um <xref:System.Windows.Forms.Button>e pelo menos um <xref:System.Windows.Forms.RadioButton> control em um <xref:System.Windows.Forms.Form>. O <xref:System.Windows.Forms.RadioButton> controles são adicionados ao <xref:System.Windows.Forms.Panel> controle e o <xref:System.Windows.Forms.Panel> controle adicionado para o <xref:System.Windows.Forms.Form>. Quando o botão é clicado, o botão de opção denominado `radioButton2` é removido do <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Windows.Forms.Control owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.#ctor(System.Windows.Forms.Control)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="owner">Um <see cref="T:System.Windows.Forms.Control" /> que representa o controle proprietário da coleção de controles.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (System.Windows.Forms.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Windows.Forms.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="value">O <see cref="T:System.Windows.Forms.Control" /> a adicionar à coleção de controles.</param>
        <summary>Adiciona o controle especificado à coleção de controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> método permite que você adicione <xref:System.Windows.Forms.Control> objetos ao final da coleção de controle.  
  
 Você também pode adicionar novas <xref:System.Windows.Forms.Control> objetos na coleção usando o <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> método.  
  
 Para remover um <xref:System.Windows.Forms.Control> que você adicionou anteriormente, use o <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A>, <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A>, ou <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> métodos.  
  
> [!NOTE]
>  Um <xref:System.Windows.Forms.Control> só pode ser atribuída a um <xref:System.Windows.Forms.Control.ControlCollection> por vez. Se o <xref:System.Windows.Forms.Control> já é filho de outro controle é removido deste controle antes de ser adicionado a outro controle.  
  
   
  
## Examples  
 O exemplo de código a seguir adiciona uma <xref:System.Windows.Forms.Control> para o <xref:System.Windows.Forms.Control.ControlCollection> da classe derivada <xref:System.Windows.Forms.Panel>. O exemplo requer que você tenha criado um <xref:System.Windows.Forms.Panel> controle e um <xref:System.Windows.Forms.Button> control em um <xref:System.Windows.Forms.Form>. Quando o botão é clicado, um <xref:System.Windows.Forms.TextBox> controle é adicionado ao painel de <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#2)]
 [!code-csharp[ControlCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#2)]
 [!code-vb[ControlCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">O controle especificado é um controle de nível superior ou uma referência de controle circular resultaria caso esse controle fosse adicionado à coleção de controles.</exception>
        <exception cref="T:System.ArgumentException">O objeto atribuído ao parâmetro <paramref name="value" /> não é um <see cref="T:System.Windows.Forms.Control" />.</exception>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.Add(System.Windows.Forms.Control)" /> método para garantir que o controle é adicionado à coleção.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.Control[] controls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.Control[] controls) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controls" Type="System.Windows.Forms.Control[]" />
      </Parameters>
      <Docs>
        <param name="controls">Uma matriz de objetos <see cref="T:System.Windows.Forms.Control" /> a serem adicionados à coleção.</param>
        <summary>Adiciona uma matriz de objetos de controle à coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Control> objetos contidos na `controls` matriz são acrescentados ao final da coleção.  
  
 Você pode usar o <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> método para adicionar rapidamente um grupo de <xref:System.Windows.Forms.Control> objetos na coleção em vez de adicionar manualmente cada <xref:System.Windows.Forms.Control> à coleção usando o <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> método.  
  
 Para remover um <xref:System.Windows.Forms.Control> que você adicionou anteriormente, use o <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A>, <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A>, ou <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir adiciona duas <xref:System.Windows.Forms.Control> objetos para o <xref:System.Windows.Forms.Control.ControlCollection> da classe derivada <xref:System.Windows.Forms.Panel>. O exemplo requer que você tenha criado um <xref:System.Windows.Forms.Panel> controle e um <xref:System.Windows.Forms.Button> control em um <xref:System.Windows.Forms.Form>. Quando o botão é clicado, dois <xref:System.Windows.Forms.RadioButton> controles são adicionados para o painel <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#3](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#3)]
 [!code-csharp[ControlCollection#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#3)]
 [!code-vb[ControlCollection#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.AddRange(System.Windows.Forms.Control[])" /> método para garantir que os controles são adicionados à coleção.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove todos os controles da coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Você pode usar o <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> método para remover toda a coleção de controles de um controle pai.  
  
 Para remover um controle individual da coleção, use o <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A> ou <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A> métodos.  
  
> [!IMPORTANT]
>  Chamar o <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> método não remove as alças de controle de memória. Você deve chamar explicitamente o <xref:System.Windows.Forms.Control.Dispose%2A> perdas de método para evitar a memória.  
  
 Para adicionar uma nova <xref:System.Windows.Forms.Control> objetos na coleção, use o <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> ou <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir remove todos os <xref:System.Windows.Forms.Control> objetos no <xref:System.Windows.Forms.Control.ControlCollection> da classe derivada <xref:System.Windows.Forms.Panel>. O exemplo requer que você tenha criado um <xref:System.Windows.Forms.Panel>, um <xref:System.Windows.Forms.Button>e pelo menos um outro controle em um <xref:System.Windows.Forms.Form>. Os outros controles são adicionados ao <xref:System.Windows.Forms.Panel> controle e o <xref:System.Windows.Forms.Panel> adicionado para o <xref:System.Windows.Forms.Form>. Quando o botão é clicado, todos os controles contidos no painel são removidos do <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#1)]
 [!code-csharp[ControlCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#1)]
 [!code-vb[ControlCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="M:System.Windows.Forms.Control.ControlCollection.Clear" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.Clear" /> método para garantir que todos os controles são removidos da coleção.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">O <see cref="T:System.Windows.Forms.Control" /> a ser localizado na coleção.</param>
        <summary>Determina se o controle especificado é membro da coleção.</summary>
        <returns>
          <see langword="true" /> se o <see cref="T:System.Windows.Forms.Control" /> é um membro da coleção; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método permite que você determine se um <xref:System.Windows.Forms.Control> é um membro da coleção antes de tentar realizar operações de <xref:System.Windows.Forms.Control>. Você pode usar esse método para confirmar que um <xref:System.Windows.Forms.Control> foi adicionado ao ou ainda é um membro da coleção.  
  
   
  
## Examples  
 O código a seguir exemplo remove uma <xref:System.Windows.Forms.Control> do <xref:System.Windows.Forms.Control.ControlCollection> da classe derivada <xref:System.Windows.Forms.Panel> se ele é um membro da coleção. O exemplo requer que você tenha criado um <xref:System.Windows.Forms.Panel>, um <xref:System.Windows.Forms.Button>e pelo menos um <xref:System.Windows.Forms.RadioButton> control em um <xref:System.Windows.Forms.Form>. O <xref:System.Windows.Forms.RadioButton> controles são adicionados ao <xref:System.Windows.Forms.Panel> controle e o <xref:System.Windows.Forms.Panel> controle adicionado para o <xref:System.Windows.Forms.Form>. Quando o botão é clicado, o botão de opção denominado `removeButton` é removido do <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.ContainsKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">A chave a ser localizada no <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</param>
        <summary>Determina se o <see cref="T:System.Windows.Forms.Control.ControlCollection" /> atual contém um item com a chave especificada.</summary>
        <returns>
          <see langword="true" /> se o <see cref="T:System.Windows.Forms.Control.ControlCollection" /> contém um item com a chave especificada; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Control.Name%2A> propriedade de um <xref:System.Windows.Forms.Control> corresponde à chave para um <xref:System.Windows.Forms.Control> no <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Find(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">A chave a ser localizada no <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</param>
        <param name="searchAllChildren">
          <see langword="true" /> para pesquisar todos os controles filho; caso contrário, <see langword="false" />.</param>
        <summary>Pesquisa controles por sua propriedade <see cref="P:System.Windows.Forms.Control.Name" /> e cria uma matriz de todos os controles que correspondam.</summary>
        <returns>Uma matriz do tipo <see cref="T:System.Windows.Forms.Control" /> que contém os controles correspondentes.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">O parâmetro <paramref name="key" /> é <see langword="null" /> ou a cadeia de caracteres vazia ("").</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChildIndex">
      <MemberSignature Language="C#" Value="public int GetChildIndex (System.Windows.Forms.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetChildIndex(class System.Windows.Forms.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="child">O <see cref="T:System.Windows.Forms.Control" /> pelo qual pesquisar na coleção de controles.</param>
        <summary>Recupera o índice do controle filho especificado na coleção de controles.</summary>
        <returns>Um valor de índice baseado em zero que representa a localização do controle filho especificado na coleção de controles.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O controle com um valor de índice de zero é na parte superior da ordem z e números mais altos são mais próximos à parte inferior.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="child" /><see cref="T:System.Windows.Forms.Control" /> não está no <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChildIndex">
      <MemberSignature Language="C#" Value="public virtual int GetChildIndex (System.Windows.Forms.Control child, bool throwException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChildIndex(class System.Windows.Forms.Control child, bool throwException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.GetChildIndex(System.Windows.Forms.Control,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.Forms.Control" />
        <Parameter Name="throwException" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="child">O <see cref="T:System.Windows.Forms.Control" /> pelo qual pesquisar na coleção de controles.</param>
        <param name="throwException">
          <see langword="true" />para lançar uma exceção se o <see cref="T:System.Windows.Forms.Control" /> especificado no <c>filho</c> parâmetro não é um controle no <see cref="T:System.Windows.Forms.Control.ControlCollection" />; caso contrário, <see langword="false" />.</param>
        <summary>Recupera o índice do controle filho especificado dentro da coleção de controle e, opcionalmente, gera uma exceção se o controle especificado não está dentro da coleção de controle.</summary>
        <returns>Um valor de índice de base zero que representa o local do controle filho especificado dentro da coleção de controle; Caso contrário,-1 se especificado <see cref="T:System.Windows.Forms.Control" /> não foi encontrado no <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O controle com um valor de índice de zero é na parte superior da ordem z e números mais altos são mais próximos à parte inferior. Um valor de retorno de -1 é retornado somente quando o `throwException` parâmetro é `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="child" /> <see cref="T:System.Windows.Forms.Control" /> não está no <see cref="T:System.Windows.Forms.Control.ControlCollection" />e o <paramref name="throwException" /> é o valor do parâmetro <see langword="true" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public override System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera uma referência a um objeto de enumerador que é usado para iterar sobre uma <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
        <returns>Um <see cref="T:System.Collections.IEnumerator" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.IndexOf(System.Windows.Forms.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="control">O <see cref="T:System.Windows.Forms.Control" /> a ser localizado na coleção.</param>
        <summary>Recupera o índice do controle especificado na coleção de controles.</summary>
        <returns>Um valor de índice baseado em zero que representa a posição do <see cref="T:System.Windows.Forms.Control" /> especificado no <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o controle não for encontrado na coleção, o <xref:System.Windows.Forms.Control.ControlCollection.IndexOf%2A> método de valor de retorno é -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.IndexOfKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">O nome do controle a ser pesquisado.</param>
        <summary>Recupera o índice da primeira ocorrência do item especificado na coleção.</summary>
        <returns>O índice baseado em zero da primeira ocorrência do controle com o nome especificado na coleção.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se <xref:System.Windows.Forms.Control.ControlCollection.IndexOfKey%2A> é chamado sucessivamente, a última retornou o índice será verificado para uma correspondência de chave pela primeira vez e se não houver nenhuma correspondência, a pesquisa começa no início da coleção.  
  
 A chave comparação não diferencia maiusculas de minúsculas. Se o `key` parâmetro é `null` ou uma cadeia de caracteres vazia ou um item com a chave não for encontrada, <xref:System.Windows.Forms.Control.ControlCollection.IndexOfKey%2A> retornará -1.  
  
 O <xref:System.Windows.Forms.Control.Name%2A> propriedade de um <xref:System.Windows.Forms.Control> corresponde à chave para um <xref:System.Windows.Forms.Control> no <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Control this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ControlCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice do controle a ser recuperado da coleção de controles.</param>
        <summary>Indica o <see cref="T:System.Windows.Forms.Control" /> no local indexado especificado na coleção.</summary>
        <value>O <see cref="T:System.Windows.Forms.Control" /> localizado no local de índice especificado na coleção de controles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para recuperar um <xref:System.Windows.Forms.Control> do <xref:System.Windows.Forms.Control.ControlCollection>, fazem referência ao objeto de coleção com um valor de índice específico. O valor de índice de <xref:System.Windows.Forms.Control.ControlCollection> é um índice com base em zero.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor <paramref name="index" /> é menor que zero ou maior ou igual ao número de controles na coleção.</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Control this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ControlCollection.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">O nome do controle a ser recuperado da coleção de controles.</param>
        <summary>Indica um <see cref="T:System.Windows.Forms.Control" /> com a chave especificada na coleção.</summary>
        <value>O <see cref="T:System.Windows.Forms.Control" /> com a chave especificada no <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Control.Name%2A> propriedade de um <xref:System.Windows.Forms.Control> corresponde à chave para um <xref:System.Windows.Forms.Control> no <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ControlCollection.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o controle que possui essa <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</summary>
        <value>O <see cref="T:System.Windows.Forms.Control" /> que possui essa <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Windows.Forms.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Windows.Forms.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="value">O <see cref="T:System.Windows.Forms.Control" /> a ser removido de <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</param>
        <summary>Remove o controle especificado da coleção do controle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um <xref:System.Windows.Forms.Control> é removido da coleção de controle, todos os controles subsequentes são movidos para cima de uma posição na coleção.  
  
 Você também pode remover um <xref:System.Windows.Forms.Control> usando o <xref:System.Windows.Forms.Control.ControlCollection.RemoveAt%2A> método, ou remova todos os controles usando a <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> método.  
  
 Para adicionar uma nova <xref:System.Windows.Forms.Control> objetos na coleção, use o <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> ou <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> métodos.  
  
   
  
## Examples  
 O código a seguir exemplo remove uma <xref:System.Windows.Forms.Control> do <xref:System.Windows.Forms.Control.ControlCollection> da classe derivada <xref:System.Windows.Forms.Panel> se ele é um membro da coleção. O exemplo requer que você tenha criado um <xref:System.Windows.Forms.Panel>, um <xref:System.Windows.Forms.Button>e um ou mais <xref:System.Windows.Forms.RadioButton> controles em um <xref:System.Windows.Forms.Form>. O <xref:System.Windows.Forms.RadioButton> controles são adicionados para o <xref:System.Windows.Forms.Panel> controle e o <xref:System.Windows.Forms.Panel> controle for adicionado ao <xref:System.Windows.Forms.Form>. Quando o botão é clicado, o botão de opção denominado `radioButton2` é removido do <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Ao substituir <see cref="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" /> em uma classe derivada, certifique-se de chamar a classe base <see cref="M:System.Windows.Forms.Control.ControlCollection.Remove(System.Windows.Forms.Control)" /> método para garantir que o controle é removido da coleção.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O valor de índice do <see cref="T:System.Windows.Forms.Control" /> a ser removido.</param>
        <summary>Remove um controle da coleção de controles no local indexado especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando um <xref:System.Windows.Forms.Control> é removido da coleção de controle, todos os controles subsequentes são movidos para cima de uma posição na coleção.  
  
 Você também pode remover um <xref:System.Windows.Forms.Control> que você adicionou anteriormente usando o <xref:System.Windows.Forms.Control.ControlCollection.Remove%2A> ou <xref:System.Windows.Forms.Control.ControlCollection.Clear%2A> métodos.  
  
 Para adicionar uma nova <xref:System.Windows.Forms.Control> objetos na coleção, use o <xref:System.Windows.Forms.Control.ControlCollection.Add%2A> ou <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> métodos.  
  
   
  
## Examples  
 O exemplo de código a seguir remove a primeira <xref:System.Windows.Forms.Control> no <xref:System.Windows.Forms.Control.ControlCollection> da classe derivada <xref:System.Windows.Forms.Panel> se a contagem da coleção é maior que zero. O exemplo requer que você tenha criado um <xref:System.Windows.Forms.Panel>, um <xref:System.Windows.Forms.Button>e pelo menos um outro controle em um <xref:System.Windows.Forms.Form>. Outros controles são adicionados para o <xref:System.Windows.Forms.Panel> controle e o <xref:System.Windows.Forms.Panel> controle adicionado para o <xref:System.Windows.Forms.Form>. Quando o botão é clicado, o primeiro contido no painel de controle é removido do <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 [!code-cpp[ControlCollection#5](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#5)]
 [!code-csharp[ControlCollection#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#5)]
 [!code-vb[ControlCollection#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.RemoveByKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">O nome do controle filho a ser removido.</param>
        <summary>Remove o controle filho com a chave especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Control.Name%2A> propriedade de um <xref:System.Windows.Forms.Control> corresponde à chave para um <xref:System.Windows.Forms.Control> no <xref:System.Windows.Forms.Control.ControlCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetChildIndex">
      <MemberSignature Language="C#" Value="public virtual void SetChildIndex (System.Windows.Forms.Control child, int newIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetChildIndex(class System.Windows.Forms.Control child, int32 newIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.SetChildIndex(System.Windows.Forms.Control,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.Forms.Control" />
        <Parameter Name="newIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="child">O <c>filho</c> <see cref="T:System.Windows.Forms.Control" /> para pesquisar.</param>
        <param name="newIndex">O novo valor de índice do controle.</param>
        <summary>Define o índice do controle filho especificado na coleção com o valor de índice especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Quando <xref:System.Windows.Forms.Control.ControlCollection.SetChildIndex%2A> é chamado, o <xref:System.Windows.Forms.Control> referenciado pelo `child` parâmetro é movido para a posição especificada pelo `newIndex` e outros <xref:System.Windows.Forms.Control> referências no <xref:System.Windows.Forms.Control.ControlCollection> são reordenadas para acomodar a mudança. O controle com um valor de índice de zero é na parte superior da ordem z e números mais altos são mais próximos à parte inferior.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O controle <paramref name="child" /> não está no <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Windows.Forms.Control.ControlCollection> é convertida em uma interface de <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Windows.Forms.Control.ControlCollection> é convertida em uma interface de <xref:System.Collections.IList>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ControlCollection.System#ICloneable#Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.ICloneable.Clone" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este membro é uma implementação do membro de interface explícita. Ele só pode ser usado quando a instância de <xref:System.Windows.Forms.Control.ControlCollection> é convertida em uma interface de <xref:System.ICloneable>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
