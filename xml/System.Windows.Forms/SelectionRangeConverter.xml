<Type Name="SelectionRangeConverter" FullName="System.Windows.Forms.SelectionRangeConverter">
  <TypeSignature Language="C#" Value="public class SelectionRangeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SelectionRangeConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SelectionRangeConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece um conversor de tipo para converter <see cref="T:System.Windows.Forms.SelectionRange" /> para e de vários outros tipos de objetos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.SelectionRange> classe representa uma única data ou um intervalo de datas. Essa classe é comumente associada com o <xref:System.Windows.Forms.MonthCalendar> controlar, onde ele representa as datas selecionadas e realçadas. O <xref:System.Windows.Forms.SelectionRangeConverter> classe é uma classe complementar para <xref:System.Windows.Forms.SelectionRange> que permite que você converter para e de outros tipos, cadeias de caracteres com mais frequência.  
  
 Para obter mais informações sobre conversores de tipo, consulte o <xref:System.ComponentModel.TypeConverter> classe base [conversão do tipo generalizada](http://msdn.microsoft.com/library/49253ae6-7657-4810-82ab-1176a6feeada), e [como: implementar um conversor de tipo](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56).  
  
> [!NOTE]
>  Você nunca deve criar um <xref:System.Windows.Forms.SelectionRangeConverter>. Em vez disso, chame o <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> método o <xref:System.ComponentModel.TypeDescriptor> classe. Para obter mais informações, consulte os exemplos de <xref:System.ComponentModel.TypeConverter> classe base.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SelectionRangeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Forms.SelectionRangeConverter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.SelectionRangeConverter.%23ctor%2A>o construtor padrão é fornecido pelo compilador.  
  
 Você nunca deve criar um <xref:System.Windows.Forms.SelectionRangeConverter>. Em vez disso, chame o <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> método o <xref:System.ComponentModel.TypeDescriptor> classe. Para obter mais informações, consulte os exemplos de <xref:System.ComponentModel.TypeConverter> classe base.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="sourceType">A fonte <see cref="T:System.Type" /> a ser convertido.</param>
        <summary>Determina se esse conversor pode converter um objeto do tipo de origem especificado para o tipo nativo do conversor consultando o contexto do descritor de tipo fornecido.</summary>
        <returns>
          <see langword="true" />Se o conversor puder realizar a conversão especificada; Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.SelectionRangeConverter> classe é especializada para converter entre os tipos de <xref:System.String> e <xref:System.Windows.Forms.SelectionRange>. Como resultado, o <xref:System.Windows.Forms.SelectionRangeConverter.CanConvertFrom%2A> método `true` se o `sourceType` parâmetro é do tipo <xref:System.String>. Caso contrário, ele passa a chamada para a implementação base desse método <xref:System.ComponentModel.TypeConverter.CanConvertFrom%28System.ComponentModel.ITypeDescriptorContext%2CSystem.Type%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Substitua este método para fornecer seus próprios requisitos de conversão.  
  
 O <paramref name="context" /> parâmetro pode ser usado para extrair informações adicionais sobre o ambiente está sendo invocado este conversor de. O parâmetro pode ser <see langword="null" />, portanto, você deve verificar as informações. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="destinationType">O destino <see cref="T:System.Type" /> para converter em.</param>
        <summary>Obtém um valor que indica se esse conversor pode converter um objeto para o tipo de destino especificado usando o contexto especificado.</summary>
        <returns>
          <see langword="true" />Se esse conversor puder realizar a conversão especificada; Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.SelectionRangeConverter.CanConvertTo%2A> método `true` se o `destinationType` parâmetro é do tipo <xref:System.String> ou <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor>. Caso contrário, ele passa a chamada para a implementação base desse método <xref:System.ComponentModel.TypeConverter.CanConvertTo%28System.ComponentModel.ITypeDescriptorContext%2CSystem.Type%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Substitua este método para fornecer seus próprios requisitos de conversão.  
  
 O <paramref name="context" /> parâmetro pode ser usado para extrair informações adicionais sobre o ambiente está sendo invocado este conversor de. O parâmetro pode ser <see langword="null" />, portanto, você deve verificar as informações. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="culture">As informações de localidade para a conversão.</param>
        <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
        <summary>Converte o valor especificado para o tipo nativo do conversor usando a localidade especificada.</summary>
        <returns>Um <see cref="T:System.Object" /> que representa o objeto <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.SelectionRangeConverter.ConvertFrom%2A> método é especializado para converter <xref:System.String> valores que representam um intervalo de datas para seus <xref:System.Windows.Forms.SelectionRange> representações. Tipos diferentes de <xref:System.String> são passados para a implementação da classe base deste método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" />é do tipo <see cref="T:System.String" /> , mas não pôde ser analisado em duas cadeias de caracteres que representam datas.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" />é do tipo <see cref="T:System.String" /> que foi analisado em duas cadeias de caracteres, mas a conversão de uma ou ambas para o <see cref="T:System.DateTime" /> tipo não foi bem-sucedida.</exception>
        <block subset="none" type="overrides">
          <para>Substitua este método para fornecer seus próprios requisitos de conversão.  
  
 O <paramref name="context" /> parâmetro pode ser usado para extrair informações adicionais sobre o ambiente está sendo invocado este conversor de. O parâmetro pode ser <see langword="null" />, portanto, você deve verificar as informações. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="culture">As informações de localidade para a conversão.</param>
        <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
        <param name="destinationType">O destino <see cref="T:System.Type" /> para converter em.</param>
        <summary>Converte especificado <see cref="T:System.Windows.Forms.SelectionRangeConverter" /> objeto em outro tipo usando a cultura especificada.</summary>
        <returns>Um <see cref="T:System.Object" /> que representa o objeto <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.SelectionRangeConverter.ConvertTo%2A> método é especializado para converter <xref:System.Windows.Forms.SelectionRange> valores para seus <xref:System.String> ou <xref:System.ComponentModel.Design.Serialization.InstanceDescriptor> representações. Outros tipos são passados para a implementação da classe base deste método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationType" /> é <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="value" />não é possível converter o <paramref name="destinationType" />.</exception>
        <block subset="none" type="overrides">
          <para>Substitua este método para fornecer seus próprios requisitos de conversão.  
  
 O <paramref name="context" /> parâmetro pode ser usado para extrair informações adicionais sobre o ambiente está sendo invocado este conversor de. O parâmetro pode ser <see langword="null" />, portanto, você deve verificar as informações. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public override object CreateInstance (System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary propertyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object CreateInstance(class System.ComponentModel.ITypeDescriptorContext context, class System.Collections.IDictionary propertyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="propertyValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="propertyValues">Um <see cref="T:System.Collections.IDictionary" /> que contém os novos valores de propriedade.</param>
        <summary>Cria um <see cref="T:System.Windows.Forms.SelectionRange" /> objeto usando o descritor do tipo especificado e o conjunto de valores de propriedade para esse objeto.</summary>
        <returns>Se for bem-sucedido, recém-criado <see cref="T:System.Windows.Forms.SelectionRange" />; caso contrário, esse método lançará uma exceção.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Forms.SelectionRangeConverter.CreateInstance%2A> método para fazer alterações a um objeto imutável existente por meio da criação de uma versão modificada do mesmo. Este método espera o `propertyValues` parâmetro ter elementos com valores de chave de `Start` e `End`, cada um com a correspondente <xref:System.DateTime> valor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyValues" />é <see langword="null" /> ou seus <c>iniciar</c> e <c>final</c> elementos não podem ser convertidos em um <see cref="T:System.Windows.Forms.SelectionRange" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCreateInstanceSupported">
      <MemberSignature Language="C#" Value="public override bool GetCreateInstanceSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetCreateInstanceSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <summary>Determina se a alteração de um valor em uma instância deve exigir uma chamada para <see cref="Overload:System.Windows.Forms.SelectionRangeConverter.CreateInstance" /> para criar um novo valor.</summary>
        <returns>
          <see langword="true" />Se <see cref="Overload:System.Windows.Forms.SelectionRangeConverter.CreateInstance" /> deve ser chamado para fazer uma alteração em uma ou mais propriedades; caso contrário <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão sempre retorna `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.PropertyDescriptorCollection GetProperties (System.ComponentModel.ITypeDescriptorContext context, object value, Attribute[] attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.PropertyDescriptorCollection GetProperties(class System.ComponentModel.ITypeDescriptorContext context, object value, class System.Attribute[] attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="attributes" Type="System.Attribute[]" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
        <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usado como um filtro.</param>
        <summary>Retorna o conjunto de propriedades filtradas para o <see cref="T:System.Windows.Forms.SelectionRange" /> tipo</summary>
        <returns>Se for bem-sucedido, o conjunto de propriedades que devem ser expostos para o <see cref="T:System.Windows.Forms.SelectionRange" /> tipo; caso contrário, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão desse método não usa o `context` ou `value` parâmetros, mas simplesmente refere-se a chamada para o TypeDescriptor.<xref:System.ComponentModel.TypeDescriptor.GetProperties%28System.Type%2CSystem.Attribute%5B%5D%29?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertiesSupported">
      <MemberSignature Language="C#" Value="public override bool GetPropertiesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetPropertiesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SelectionRangeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <summary>Determina se o objeto atual oferece suporte a propriedades que usam o contexto de descritor do tipo especificado.</summary>
        <returns>
          <see langword="true" />Se <see cref="Overload:System.Windows.Forms.SelectionRangeConverter.GetProperties" /> pode ser chamado para localizar as propriedades de um <see cref="T:System.Windows.Forms.SelectionRange" /> objeto; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A implementação padrão sempre retorna `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
