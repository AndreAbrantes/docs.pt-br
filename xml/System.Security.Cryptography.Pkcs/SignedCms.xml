<Type Name="SignedCms" FullName="System.Security.Cryptography.Pkcs.SignedCms">
  <TypeSignature Language="C#" Value="public sealed class SignedCms" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SignedCms extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Pkcs.SignedCms" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A classe <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> permite a autorização e verificação de mensagens CMS/PKCS #7.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A criptografia RFC de sintaxe de mensagem especifica os seguintes tipos MIME e extensões de nome de arquivo para mensagens CMS/PKCS n º 7 com esses tipos de conteúdo.  
  
|Tipo de conteúdo|Tipo MIME|Extensão|  
|------------------|---------------|---------------|  
|envelopedData|aplicativo/pkcs7-mime|. p7m|  
|signedData|aplicativo/pkcs7-assinatura|. p7s.p7c|  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedCms ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>O construtor <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor" /> cria uma instância da classe <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Security.Cryptography.Pkcs.SignedCms> classe tem os seguintes valores de propriedade padrão.  
  
|Propriedade|Valor padrão|  
|--------------|-------------------|  
|<xref:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo%2A>|1.2.840.113549.1.7.1 (dados) de comprimento: zero|  
|<xref:System.Security.Cryptography.Pkcs.SignedCms.Detached%2A>|Desanexado estado: `false` o conteúdo que está assinado é incluído na mensagem de CMS/PKCS #7 junto com as informações de assinatura.|  
  
 O padrão <xref:System.Security.Cryptography.Pkcs.SubjectIdentifierType> para signatários é SubjectIdentifierType.IssuerAndSerialNumber.  
  
 Se o estado desanexado for `false` (padrão), o conteúdo assinado é incluído na mensagem de CMS/PKCS #7 junto com as informações de assinatura. Se o estado desanexado for `true`, os clientes que não é possível decodificar mensagens de S/MIME ainda podem ver o conteúdo da mensagem se ela é enviada separadamente. Isso pode ser útil em um aplicativo de arquivamento que arquiva o conteúdo da mensagem se o remetente da mensagem pode ser verificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedCms (System.Security.Cryptography.Pkcs.ContentInfo content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.Pkcs.ContentInfo content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contentInfo" Type="System.Security.Cryptography.Pkcs.ContentInfo" />
      </Parameters>
      <Docs>
        <param name="content">To be added.</param>
        <summary>O construtor <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo)" /> cria uma instância da classe <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> usando as informações de conteúdo especificadas como o conteúdo interno.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para os valores de propriedade padrão usados com esse construtor, consulte <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  
  
 Se o estado desanexado for `false` (padrão), o conteúdo que está assinado é incluído na mensagem de CMS/PKCS #7 junto com as informações de assinatura. Se o estado desanexado for `true`, os clientes que não é possível decodificar mensagens de S/MIME ainda podem ver o conteúdo da mensagem se ela é enviada separadamente. Isso pode ser útil em um aplicativo de arquivamento que arquiva o conteúdo da mensagem se o remetente da mensagem pode ser verificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedCms (System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="signerIdentifierType" Type="System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
      </Parameters>
      <Docs>
        <param name="signerIdentifierType">Um <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> membro que especifica o tipo de identificador do assunto padrão para signatários.</param>
        <summary>O <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType)" /> construtor cria uma instância de <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> classe usando o tipo de identificador de entidade especificado como o tipo de identificador do assunto padrão para signatários.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para os valores de propriedade padrão usados com esse construtor, consulte <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  
  
 Se o estado desanexado for `false` (padrão), o conteúdo que está assinado é incluído na mensagem de CMS/PKCS #7 junto com as informações de assinatura. Se o estado desanexado for `true`, os clientes que não é possível decodificar mensagens de S/MIME ainda podem ver o conteúdo da mensagem se ela é enviada separadamente. Isso pode ser útil em um aplicativo de arquivamento que arquiva o conteúdo da mensagem se o remetente da mensagem pode ser verificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedCms (System.Security.Cryptography.Pkcs.ContentInfo content, bool detached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.Pkcs.ContentInfo content, bool detached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="contentInfo" Type="System.Security.Cryptography.Pkcs.ContentInfo" />
        <Parameter Name="detached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="content">To be added.</param>
        <param name="detached">Um valor <see cref="T:System.Boolean" /> que especifica se o objeto <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> refere-se a uma assinatura desanexada. Se <c>desanexado</c> é <see langword="true" />, a assinatura é desanexada. Se <c>desanexado</c> é <see langword="false" />, a assinatura não pode ser desanexada.</param>
        <summary>O construtor <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" /> cria uma instância da classe <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> usando as informações de conteúdo especificadas como o conteúdo interno e usando o estado desanexado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para os valores de propriedade padrão usados com esse construtor, consulte <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  
  
 Se o estado desanexado for `false` (padrão), o conteúdo que está assinado é incluído na mensagem de CMS/PKCS #7 junto com as informações de assinatura. Se o estado desanexado for `true`, os clientes que não é possível decodificar mensagens de S/MIME ainda podem ver o conteúdo da mensagem se ela é enviada separadamente. Isso pode ser útil em um aplicativo de arquivamento que arquiva o conteúdo da mensagem se o remetente da mensagem pode ser verificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedCms (System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType, System.Security.Cryptography.Pkcs.ContentInfo content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType, class System.Security.Cryptography.Pkcs.ContentInfo content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="signerIdentifierType" Type="System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
        <Parameter Name="contentInfo" Type="System.Security.Cryptography.Pkcs.ContentInfo" />
      </Parameters>
      <Docs>
        <param name="signerIdentifierType">Um <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> membro que especifica o tipo de identificador do assunto padrão para signatários.</param>
        <param name="content">To be added.</param>
        <summary>O <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo)" /> construtor cria uma instância de <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> classe usando o tipo de identificador de entidade especificado como o tipo de identificador do assunto padrão para signatários e informações de conteúdo como o conteúdo interno.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para os valores de propriedade padrão usados com esse construtor, consulte <xref:System.Security.Cryptography.Pkcs.SignedCms.%23ctor>.  
  
 Se o estado desanexado for `false` (padrão), o conteúdo que está assinado é incluído na mensagem de CMS/PKCS #7 junto com as informações de assinatura. Se o estado desanexado for `true`, os clientes que não é possível decodificar mensagens de S/MIME ainda podem ver o conteúdo da mensagem se ela é enviada separadamente. Isso pode ser útil em um aplicativo de arquivamento que arquiva o conteúdo da mensagem se o remetente da mensagem pode ser verificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SignedCms (System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType, System.Security.Cryptography.Pkcs.ContentInfo content, bool detached);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Cryptography.Pkcs.SubjectIdentifierType signerIdentifierType, class System.Security.Cryptography.Pkcs.ContentInfo content, bool detached) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="signerIdentifierType" Type="System.Security.Cryptography.Pkcs.SubjectIdentifierType" />
        <Parameter Name="contentInfo" Type="System.Security.Cryptography.Pkcs.ContentInfo" />
        <Parameter Name="detached" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="signerIdentifierType">Um <see cref="T:System.Security.Cryptography.Pkcs.SubjectIdentifierType" /> membro que especifica o tipo de identificador do assunto padrão para signatários.</param>
        <param name="content">To be added.</param>
        <param name="detached">Um valor <see cref="T:System.Boolean" /> que especifica se o objeto <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> refere-se a uma assinatura desanexada. Se <c>desanexado</c> é <see langword="true" />, a assinatura é desanexada. Se desanexado é <see langword="false" />, a assinatura não pode ser desanexada.</param>
        <summary>O <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.#ctor(System.Security.Cryptography.Pkcs.SubjectIdentifierType,System.Security.Cryptography.Pkcs.ContentInfo,System.Boolean)" /> construtor cria uma instância do <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> classe usando o tipo de identificador de entidade especificado como o tipo de identificador do assunto padrão para signatários, as informações de conteúdo como conteúdo interno e usando o estado desanexado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se o estado desanexado for `false` (padrão), o conteúdo que está assinado é incluído na mensagem de CMS/PKCS #7 junto com as informações de assinatura. Se o estado desanexado for `true`, os clientes que não é possível decodificar mensagens de S/MIME ainda podem ver o conteúdo da mensagem se ela é enviada separadamente. Isso pode ser útil em um aplicativo de arquivamento que arquiva o conteúdo da mensagem ou não o remetente da mensagem pode ser verificado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Certificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509Certificate2Collection Certificates" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.SignedCms.Certificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509Certificate2Collection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A propriedade <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Certificates" /> recupera os certificados associados à mensagem CMS/PKCS #7 codificada.</summary>
        <value>Uma coleção <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> que representa o conjunto de certificados para a mensagem CMS/PKCS #7 codificada.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckHash">
      <MemberSignature Language="C#" Value="public void CheckHash ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckHash() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>O <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" /> método verifica a integridade dos dados da mensagem CMS/PKCS #7. <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" />é que um método especializado usado em aplicativos de infraestrutura de segurança específicos que desejo apenas para verificar o hash da mensagem CMS, em vez de executar uma verificação de assinatura digital completo. <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckHash" />autenticar o remetente da mensagem nem autor porque esse método não envolve verificar uma assinatura digital. Para a verificação de uso geral da integridade e a autenticidade de uma mensagem CMS/PKCS n º 7, use o <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" /> ou <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" /> métodos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não fornece autenticação da mensagem CMS/PKCS #7.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Uma chamada de método era inválida para o estado atual do objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public void CheckSignature (bool verifySignatureOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckSignature(bool verifySignatureOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verifySignatureOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="verifySignatureOnly">Um valor <see cref="T:System.Boolean" /> que especifica se apenas as assinaturas digitais são verificadas sem os certificados dos signatários serem validados.  
  
 Se <c>verifySignatureOnly</c> é <see langword="true" />, somente as assinaturas digitais são verificadas. Se for <see langword="false" />, as assinaturas digitais serão verificadas, os certificados de signatários serão validados e as finalidades dos certificados serão validadas. As finalidades de um certificado são consideradas válidas se o certificado não tiver nenhum uso de chave ou se o uso da chave dá suporte a assinaturas digitais ou não-repúdio.</param>
        <summary>O método <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" /> verifica as assinaturas digitais na mensagem CMS/PKCS #7 assinada e, opcionalmente, valida os certificados do signatário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método verifica todas as assinaturas, incluindo referendas, a mensagem CMS/PKCS #7. Se houver assinados atributos incluídos com a mensagem, esses atributos também são verificados. Se a opção for escolhida para validar certificados, a parte inteira incluída da cadeia de certificado é validada.  
  
 Este método lança uma exceção se a verificação de uma assinatura digital falhar ou os requisitos de validação não forem atendidos.  
  
   
  
## Examples  
 O exemplo a seguir mostra a colocação do <xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29> entre as etapas necessárias para verificar as assinaturas em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem. Neste exemplo, o conteúdo da mensagem não é desanexado. O conteúdo da mensagem está incluído no <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#1)]
 [!code-vb[mpkcs_SignedCMS#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#1)]  
  
 O exemplo a seguir mostra a colocação do <xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Boolean%29> entre as etapas necessárias para verificar as assinaturas em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem. Neste exemplo, o conteúdo da mensagem é desanexado, o conteúdo da mensagem deve ser verificada independentemente do <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#2](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#2)]
 [!code-vb[mpkcs_SignedCMS#2](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
        <exception cref="T:System.InvalidOperationException">Uma chamada de método era inválida para o estado atual do objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckSignature">
      <MemberSignature Language="C#" Value="public void CheckSignature (System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraStore, bool verifySignatureOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CheckSignature(class System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraStore, bool verifySignatureOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraStore" Type="System.Security.Cryptography.X509Certificates.X509Certificate2Collection" />
        <Parameter Name="verifySignatureOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="extraStore">Um objeto <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> que pode ser usado para validar a cadeia de certificados. Se nenhum certificado adicional a ser usado para validar a cadeia de certificado, use <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Boolean)" /> em vez de <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" />.</param>
        <param name="verifySignatureOnly">Um valor <see cref="T:System.Boolean" /> que especifica se apenas as assinaturas digitais são verificadas sem os certificados dos signatários serem validados.  
  
 Se <c>verifySignatureOnly</c> é <see langword="true" />, somente as assinaturas digitais são verificadas. Se for <see langword="false" />, as assinaturas digitais serão verificadas, os certificados de signatários serão validados e as finalidades dos certificados serão validadas. As finalidades de um certificado são consideradas válidas se o certificado não tiver nenhum uso de chave ou se o uso da chave dá suporte a assinaturas digitais ou não-repúdio.</param>
        <summary>O método <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.Boolean)" /> verifica as assinaturas digitais na mensagem CMS/PKCS #7 assinada usando a coleção de certificados especificada e, opcionalmente, valida os certificados do signatário.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método verifica todas as assinaturas, incluindo referendas, a mensagem CMS/PKCS #7. Se houver assinados atributos incluídos com a mensagem, esses atributos também são verificados. Se a opção for escolhida para validar certificados, a parte inteira incluída da cadeia de certificado é validada.  
  
 Este método lança uma exceção se a verificação de uma assinatura digital falhar ou os requisitos de validação não forem atendidos.  
  
   
  
## Examples  
 O exemplo a seguir mostra a colocação do <xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Security.Cryptography.X509Certificates.X509Certificate2Collection%2CSystem.Boolean%29> entre as etapas necessárias para verificar as assinaturas em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem. Neste exemplo, o conteúdo da mensagem não desanexado, para que o conteúdo da mensagem está incluído no <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#1)]
 [!code-vb[mpkcs_SignedCMS#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#1)]  
  
 O exemplo a seguir mostra a colocação do <xref:System.Security.Cryptography.Pkcs.SignedCms.CheckSignature%28System.Security.Cryptography.X509Certificates.X509Certificate2Collection%2CSystem.Boolean%29> entre as etapas necessárias para verificar as assinaturas em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem. Neste exemplo, o conteúdo da mensagem é desanexado, o conteúdo da mensagem deve ser verificada independentemente do <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#2](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#2)]
 [!code-vb[mpkcs_SignedCMS#2](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
        <exception cref="T:System.InvalidOperationException">Uma chamada de método era inválida para o estado atual do objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>O método <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature" /> solicita que o usuário selecione um certificado de assinatura, cria uma assinatura e adiciona a assinatura à mensagem CMS/PKCS #7.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método exibe uma interface do usuário em que você escolher signatários desta mensagem. Isso requer que o processo atual está em execução *modo interativo do usuário*, o que significa que o <xref:System.Environment.UserInteractive%2A?displayProperty=nameWithType> está definida como `true`. Um processo geralmente está no modo interativo do usuário, a menos que ele é um processo de serviço ou em execução dentro de um aplicativo Web.  
  
 Signatários cujos certificados atendem às seguintes condições serão exibidos na lista:  
  
-   O certificado tem uma chave privada associada.  
  
-   O certificado está dentro do período de validade.  
  
-   O certificado tem nenhum uso de chave ou um uso de chave com suporte para assinaturas digitais ou não-repúdio.  
  
 Certificados de assinante são escolhidos do meu repositório.  
  
## <a name="net-framework-security"></a>Segurança do .NET Framework  
 As seguintes permissões são necessárias para exibir a interface do usuário:  
  
-   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=nameWithType>  
  
 As seguintes permissões são necessárias para acessar a chave de assinatura:  
  
-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=nameWithType>  
  
-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=nameWithType>  
  
   
  
## Examples  
 O exemplo a seguir mostra as etapas para calcular uma assinatura em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem com o conteúdo da mensagem que não está desanexado. Nesse caso, o conteúdo da mensagem está incluído no <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#3](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#3)]
 [!code-vb[mpkcs_SignedCMS#3](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#3)]  
  
 O exemplo a seguir mostra as etapas para calcular uma assinatura em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem com o conteúdo da mensagem que está desanexado. Nesse caso, o conteúdo da mensagem deve ser verificado independentemente do <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#4](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#4)]
 [!code-vb[mpkcs_SignedCMS#4](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature (System.Security.Cryptography.Pkcs.CmsSigner signer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature(class System.Security.Cryptography.Pkcs.CmsSigner signer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signer" Type="System.Security.Cryptography.Pkcs.CmsSigner" />
      </Parameters>
      <Docs>
        <param name="signer">Um objeto <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> que representa o signatário.</param>
        <summary>O método <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner)" /> cria uma assinatura usando o signatário especificado e adiciona a assinatura à mensagem CMS/PKCS #7.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a>Segurança do .NET Framework  
 As seguintes permissões são necessárias para acessar a chave de assinatura:  
  
-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=nameWithType>  
  
-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=nameWithType>  
  
   
  
## Examples  
 O exemplo a seguir mostra as etapas para calcular uma assinatura em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem com o conteúdo da mensagem que não está desanexado. Nesse caso, o conteúdo da mensagem está incluído no <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#3](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#3)]
 [!code-vb[mpkcs_SignedCMS#3](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#3)]  
  
 O exemplo a seguir mostra as etapas para calcular uma assinatura em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem com o conteúdo da mensagem que está desanexado. Nesse caso, o conteúdo da mensagem deve ser verificado independentemente do <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#4](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#4)]
 [!code-vb[mpkcs_SignedCMS#4](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
      </Docs>
    </Member>
    <Member MemberName="ComputeSignature">
      <MemberSignature Language="C#" Value="public void ComputeSignature (System.Security.Cryptography.Pkcs.CmsSigner signer, bool silent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ComputeSignature(class System.Security.Cryptography.Pkcs.CmsSigner signer, bool silent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.ComputeSignature(System.Security.Cryptography.Pkcs.CmsSigner,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signer" Type="System.Security.Cryptography.Pkcs.CmsSigner" />
        <Parameter Name="silent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="signer">Um objeto <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> que representa o signatário.</param>
        <param name="silent">
          <see langword="false" />para solicitar ao usuário para selecionar um certificado de assinatura.</param>
        <summary>Cria uma assinatura usando o signatário especificado e adiciona a assinatura à mensagem CMS/PKCS #7. Se o valor do parâmetro silencioso for <see langword="false" /> e a propriedade <see cref="P:System.Security.Cryptography.Pkcs.CmsSigner.Certificate" /> do objeto <see cref="T:System.Security.Cryptography.Pkcs.CmsSigner" /> especificada pelo parâmetro do signatário não for definida como um certificado válido, esse método solicitará que o usuário selecione um certificado de autenticação.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="net-framework-security"></a>Segurança do .NET Framework  
 As seguintes permissões são necessárias para exibir a interface do usuário:  
  
-   <xref:System.Security.Permissions.UIPermissionWindow?displayProperty=nameWithType>  
  
 As seguintes permissões são necessárias para acessar a chave de assinatura:  
  
-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=nameWithType>  
  
-   <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
        <exception cref="T:System.InvalidOperationException">O valor do parâmetro <paramref name="silent" /> é <see langword="true" /> e um certificado de autenticação não está especificado.</exception>
      </Docs>
    </Member>
    <Member MemberName="ContentInfo">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.ContentInfo ContentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Pkcs.ContentInfo ContentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.ContentInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A propriedade <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.ContentInfo" /> recupera o conteúdo interno da mensagem CMS/PKCS nº 7 codificada.</summary>
        <value>Um objeto <see cref="T:System.Security.Cryptography.Pkcs.ContentInfo" /> que representa o conteúdo da mensagem CMS/PKCS nº 7 codificada.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public void Decode (byte[] encodedMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Decode(unsigned int8[] encodedMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedMessage" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="encodedMessage">Matriz de valores de bytes que representa a mensagem CMS/PKCS #7 codificada a ser decodificada.</param>
        <summary>O método <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])" /> decodifica uma mensagem <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> codificada. Após a decodificação bem-sucedida, é possível recuperar as informações decodificadas das propriedades do objeto <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método redefine todas as variáveis de membro do objeto, usando as informações obtidas de decodificação bem-sucedida.  
  
   
  
## Examples  
 O exemplo a seguir mostra a colocação do <xref:System.Security.Cryptography.Pkcs.SignedCms.Decode%2A> método no processo de verificar as assinaturas em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem. Neste exemplo, o conteúdo da mensagem não desanexado, para que o conteúdo da mensagem está incluído no <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#1)]
 [!code-vb[mpkcs_SignedCMS#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#1)]  
  
 O exemplo a seguir mostra a colocação do <xref:System.Security.Cryptography.Pkcs.SignedCms.Decode%2A> método no processo de verificar as assinaturas em um <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem. Neste exemplo, o conteúdo da mensagem é desanexado, o conteúdo da mensagem deve ser verificada independentemente do <xref:System.Security.Cryptography.Pkcs.SignedCms> mensagem.  
  
 [!code-csharp[mpkcs_SignedCMS#2](~/samples/snippets/csharp/VS_Snippets_WindowsServer/mpkcs_SignedCMS/cs/Program.cs#2)]
 [!code-vb[mpkcs_SignedCMS#2](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/mpkcs_SignedCMS/vb/Program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
      </Docs>
    </Member>
    <Member MemberName="Detached">
      <MemberSignature Language="C#" Value="public bool Detached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Detached" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.SignedCms.Detached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>O <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Detached" /> propriedade recupera se o <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> objeto é para uma assinatura separada.</summary>
        <value>Um valor <see cref="T:System.Boolean" /> que especifica se o objeto <see cref="T:System.Security.Cryptography.Pkcs.SignedCms" /> refere-se a uma assinatura desanexada. Se essa propriedade for <see langword="true" />, a assinatura é desanexada. Se essa propriedade for <see langword="false" />, a assinatura não pode ser desanexada.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public byte[] Encode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.Encode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>O método <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Encode" /> codifica as informações no objeto em uma mensagem CMS/PKCS #7.</summary>
        <returns>Uma matriz de valores de byte que representa a mensagem codificada. A mensagem codificada pode ser decodificada pelo <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.Decode(System.Byte[])" /> método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
        <exception cref="T:System.InvalidOperationException">Uma chamada de método era inválida para o estado atual do objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveSignature">
      <MemberSignature Language="C#" Value="public void RemoveSignature (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveSignature(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">O índice baseado em zero da assinatura para remover.</param>
        <summary>Remove a assinatura no índice especificado do <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos" /> coleção.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Uma mensagem CMS/PKCS #7 não estiver assinada, e <paramref name="index" /> é inválido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> é menor que zero.  
  
 -ou-  
  
 <paramref name="index" />é maior que a contagem de assinatura menos 1.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">A assinatura não pôde ser removida.  
  
 -ou-  
  
 Ocorreu um erro interno de criptografia.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveSignature">
      <MemberSignature Language="C#" Value="public void RemoveSignature (System.Security.Cryptography.Pkcs.SignerInfo signerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveSignature(class System.Security.Cryptography.Pkcs.SignerInfo signerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signerInfo" Type="System.Security.Cryptography.Pkcs.SignerInfo" />
      </Parameters>
      <Docs>
        <param name="signerInfo">Um <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> objeto que representa a referenda que está sendo removida.</param>
        <summary>O <see cref="M:System.Security.Cryptography.Pkcs.SignedCms.RemoveSignature(System.Security.Cryptography.Pkcs.SignerInfo)" /> método remove a assinatura especificada <see cref="T:System.Security.Cryptography.Pkcs.SignerInfo" /> objeto.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Uma referência nula foi passada para um método que não a aceita como um argumento válido.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">O valor de um argumento estava fora do intervalo permitido de valores conforme definido pelo método chamado.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Não foi possível concluir uma operação de criptografia.</exception>
      </Docs>
    </Member>
    <Member MemberName="SignerInfos">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Pkcs.SignerInfoCollection SignerInfos { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Pkcs.SignerInfoCollection SignerInfos" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Pkcs.SignerInfoCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A propriedade <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.SignerInfos" /> recupera a coleção <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> associada à mensagem CMS/PKCS #7.</summary>
        <value>Um objeto <see cref="T:System.Security.Cryptography.Pkcs.SignerInfoCollection" /> que representa as informações de signatário da mensagem CMS/PKCS #7.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public int Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Version" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Pkcs.SignedCms.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>O <see cref="P:System.Security.Cryptography.Pkcs.SignedCms.Version" /> propriedade recupera a versão da mensagem CMS/PKCS #7.</summary>
        <value>Um valor inteiro que representa a versão de mensagem CMS/PKCS #7.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A versão determina se a mensagem é uma mensagem de PKCS #7 ou uma sintaxe de mensagem criptográfico (CMS). CMS é um superconjunto mais recente do PKCS #7.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
