<Type Name="XmlDsigXsltTransform" FullName="System.Security.Cryptography.Xml.XmlDsigXsltTransform">
  <TypeSignature Language="C#" Value="public class XmlDsigXsltTransform : System.Security.Cryptography.Xml.Transform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlDsigXsltTransform extends System.Security.Cryptography.Xml.Transform" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.Xml.Transform</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa a transformação XSLT para uma assinatura digital, conforme definido pelo W3C.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Security.Cryptography.Xml.XmlDsigXPathTransform> classe permite que você resolver um documento XML usando uma transformação XSLT.  Essa classe usa XSLT para transformar nós XML em outros nós XML que você deseja assinar ou criptografar.  
  
 Use o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe para assinar ou criptografar partes específicas de um documento XML usando uma transformação XSLT.  
  
 O URI Uniform Resource Identifier () que descreve o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe é definida pelo <xref:System.Security.Cryptography.Xml.SignedXml.XmlDsigXsltTransformUrl> campo.  
  
 Para obter mais informações sobre a transformação XSLT, consulte a seção 6.6.5 da especificação XMLDSIG, que está disponível a partir do W3C em www.w3.org/TR/xmldsig-core/.  
  
   
  
## Examples  
 Esta seção contém dois exemplos de código. O primeiro exemplo de código mostra como assinar e verificar um documento XML usando o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe com uma assinatura de envelope.  O segundo exemplo de código demonstra como usar membros de <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe.  
  
 **Exemplo &#1;**  
  
 [!code-cpp[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/CS/sample.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/VB/sample.vb#1)]  
  
 **Exemplo &#2;**  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#2)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#2)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDsigXsltTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir mostra como assinar e verificar um documento XML usando o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe com uma assinatura de envelope.  
  
 [!code-cpp[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/CS/sample.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlDsigXsltTransform (bool includeComments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool includeComments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.#ctor(System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="includeComments" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includeComments">
          <see langword="true" />para incluir comentários; Caso contrário, <see langword="false" />.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> classe com comentários, se especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInnerXml">
      <MemberSignature Language="C#" Value="protected override System.Xml.XmlNodeList GetInnerXml ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Xml.XmlNodeList GetInnerXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetInnerXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma representação XML dos parâmetros a <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto adequados ser incluída como subelementos de um XMLDSIG <see langword="&lt;Transform&gt;" /> elemento.</summary>
        <returns>Uma lista de nós XML que representam o conteúdo específico da transformação necessário para descrever atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto em um XMLDSIG <see langword="&lt;Transform&gt;" /> elemento.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutput">
      <MemberSignature Language="C#" Value="public override object GetOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna a saída do atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</summary>
        <returns>A saída do atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tipo do objeto retornado deve ser <xref:System.IO.Stream>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput%2A> método para recuperar a saída do atual <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> objeto. Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#8)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#8)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutput">
      <MemberSignature Language="C#" Value="public override object GetOutput (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetOutput(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">O tipo de saída para retornar. <see cref="T:System.IO.Stream" />é o tipo só é válido para esse parâmetro.</param>
        <summary>Retorna a saída do atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto do tipo <see cref="T:System.IO.Stream" />.</summary>
        <returns>A saída do atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto do tipo <see cref="T:System.IO.Stream" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tipo do objeto retornado deve ser <xref:System.IO.Stream>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput%2A> método para recuperar a saída do atual <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> objeto. Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#7)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#7)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="type" /> parâmetro não é um <see cref="T:System.IO.Stream" /> objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputTypes">
      <MemberSignature Language="C#" Value="public override Type[] InputTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] InputTypes" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma matriz de tipos que são entradas válidas para o <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)" /> método atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</summary>
        <value>Uma matriz de tipos de entrada válidas para o atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto; você pode passar apenas os objetos de um desses tipos para o <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)" /> método atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipos de entrada válida para <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> são <xref:System.IO.Stream>, <xref:System.Xml.XmlDocument>, e <xref:System.Xml.XmlNodeList>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes%2A> propriedade para recuperar os tipos de entrada válidos para a transformação atual. Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#4)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#4)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadInnerXml">
      <MemberSignature Language="C#" Value="public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadInnerXml(class System.Xml.XmlNodeList nodeList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml(System.Xml.XmlNodeList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodeList" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodeList">Um <see cref="T:System.Xml.XmlNodeList" /> objeto que encapsula uma folha de estilo XSLT para carregar no atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto. Esta folha de estilos é aplicada ao documento carregado pelo <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)" /> método.</param>
        <summary>Analisa especificado <see cref="T:System.Xml.XmlNodeList" /> objeto como conteúdo de transformação específica de um <see langword="&lt;Transform&gt;" /> elemento e configura o estado interno do atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto para corresponder a <see langword="&lt;Transform&gt;" /> elemento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é usado para processar os subelementos de um `<Transform>` elemento.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como assinar e verificar um documento XML usando o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe com uma assinatura de envelope.  
  
 [!code-cpp[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/CPP/sample.cpp#1)]
 [!code-csharp[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/CS/sample.cs#1)]
 [!code-vb[Cryptography.Xml.XmlDsigXsltTransform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.XML.XmlDsigXsltTransform/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">O parâmetro <paramref name="nodeList" /> é <see langword="null" />.  
  
 -ou-  
  
 O <paramref name="nodeList" /> parâmetro não tem um <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadInput">
      <MemberSignature Language="C#" Value="public override void LoadInput (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void LoadInput(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">A entrada para carregar no atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</param>
        <summary>Carrega a entrada especificada em atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O tipo de objeto de entrada deve ser um dos tipos de <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes%2A> propriedade. Tipos de entrada válida para <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> são <xref:System.IO.Stream>, <xref:System.Xml.XmlDocument>, e <xref:System.Xml.XmlNodeList>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput%2A> método usando especificado <xref:System.Xml.XmlDocument> objeto como entrada. Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#11)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#11)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputTypes">
      <MemberSignature Language="C#" Value="public override Type[] OutputTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] OutputTypes" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma matriz de tipos que são possíveis saídas provenientes de <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput" /> métodos do atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</summary>
        <value>Uma matriz de tipos de saída válido para o atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto; somente os objetos de um desses tipos são retornados do <see cref="M:System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput" /> métodos do atual <see cref="T:System.Security.Cryptography.Xml.XmlDsigXsltTransform" /> objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Stream>é o tipo de saída só é válida para <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como chamar o <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes%2A> propriedade para recuperar os tipos de saída válido para a transformação atual. Este exemplo de código é parte de um exemplo maior fornecido para a <xref:System.Security.Cryptography.Xml.XmlDsigXsltTransform> classe.  
  
 [!code-cpp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CPP/members.cpp#5)]
 [!code-csharp[System.Security.Cryptography.Xml.XmlDsigXsltTransform#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/CS/members.cs#5)]
 [!code-vb[System.Security.Cryptography.Xml.XmlDsigXsltTransform#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.Xml.XmlDsigXsltTransform/VB/members.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
