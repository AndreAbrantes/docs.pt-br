<Type Name="PropertyMap" FullName="System.Windows.Forms.Integration.PropertyMap">
  <TypeSignature Language="C#" Value="public class PropertyMap" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyMap extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Integration.PropertyMap" />
  <AssemblyInfo>
    <AssemblyName>WindowsFormsIntegration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece uma maneira de converter valores de propriedade entre elementos do Windows Presentation Foundation (WPF) e controles de formulários do Windows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Windows.Forms.Integration.PropertyMap> classe para definir traduções entre [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] propriedades e [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] propriedades em um aplicativo híbrido. O <xref:System.Windows.Forms.Integration.ElementHost.PropertyMap%2A?displayProperty=nameWithType> e <xref:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap%2A?displayProperty=nameWithType> propriedades de <xref:System.Windows.Forms.Integration.ElementHost> e <xref:System.Windows.Forms.Integration.WindowsFormsHost> classes definem mapeamentos de uma tecnologia para o outro.  
  
 Para obter mais informações, consulte [passo a passo: mapeamento de propriedades usando o controle ElementHost](https://msdn.microsoft.com/en-us/library/ms788740\(v=vs.100\).aspx) e [passo a passo: mapeamento de propriedades usando o elemento WindowsFormsHost](https://msdn.microsoft.com/en-us/library/ms788729\(v=vs.100\).aspx).  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como adicionar um mapeamento para o <xref:System.Windows.Forms.Control.Margin%2A> propriedade para um <xref:System.Windows.Forms.Integration.ElementHost> controle.  
  
 [!code-csharp[PropertyMappingWithElementHost#12](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithElementHost/CSharp/PropertyMappingWithElementHost/Form1.cs#12)]
 [!code-vb[PropertyMappingWithElementHost#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithElementHost/VisualBasic/PropertyMappingWithElementHost/Form1.vb#12)]  
  
 O exemplo de código a seguir mostra como substituir o mapeamento padrão para o <xref:System.Windows.FrameworkElement.FlowDirection%2A> propriedade em um <xref:System.Windows.Forms.Integration.WindowsFormsHost> controle.  
  
 [!code-csharp[PropertyMappingWithWfh#12](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithWfhSample/CSharp/PropertyMappingWithWfh/Window1.xaml.cs#12)] 
 [!code-vb[PropertyMappingWithWfh#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithWfhSample/VisualBasic/PropertyMappingWithWfh/Window1.xaml.vb#12)]   
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para confiança total do chamador imediato. Este membro não pode ser usado pelo código parcialmente confiável.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">para confiança total de herdeiros. Este membro não pode ser herdado por código parcialmente confiável.</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Forms.Integration.PropertyMap" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyMap (object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.#ctor(System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">O objeto que tem as propriedades a serem convertidos.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> classe com o objeto de origem especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `source`é a origem das propriedades que são convertidas pelo <xref:System.Windows.Forms.Integration.PropertyMap>. As propriedades que estão mapeadas no <xref:System.Windows.Forms.Integration.PropertyMap> deve existir no <xref:System.Windows.Forms.Integration.PropertyMap.SourceObject%2A>.  
  
 <xref:System.Windows.Forms.Integration.PropertyTranslator>delegados são chamados usando os valores de propriedade atuais em <xref:System.Windows.Forms.Integration.PropertyMap.SourceObject%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string propertyName, System.Windows.Forms.Integration.PropertyTranslator translator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string propertyName, class System.Windows.Forms.Integration.PropertyTranslator translator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.Add(System.String,System.Windows.Forms.Integration.PropertyTranslator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="translator" Type="System.Windows.Forms.Integration.PropertyTranslator" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade para mapear.</param>
        <param name="translator">O <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegado que é chamado quando <c>propertyName</c> alterações.</param>
        <summary>Adiciona um <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegar para a propriedade especificada para o <see cref="T:System.Windows.Forms.Integration.PropertyMap" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante a configuração, se nenhum <xref:System.Windows.Forms.Integration.PropertyTranslator> existe para `propertyName`, o representante novo é adicionado para o <xref:System.Windows.Forms.Integration.PropertyMap>. Se um <xref:System.Windows.Forms.Integration.PropertyTranslator> já existe para `propertyName`, uma <xref:System.InvalidOperationException> é gerado.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como adicionar um mapeamento para o <xref:System.Windows.Forms.Control.Margin%2A> propriedade para um <xref:System.Windows.Forms.Integration.ElementHost> controle.  
  
 [!code-csharp[PropertyMappingWithElementHost#12](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithElementHost/CSharp/PropertyMappingWithElementHost/Form1.cs#12)] 
 [!code-vb[PropertyMappingWithElementHost#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithElementHost/VisualBasic/PropertyMappingWithElementHost/Form1.vb#12)]  
  
 O exemplo de código a seguir mostra como adicionar um mapeamento para o <xref:System.Windows.UIElement.Clip%2A> propriedade para um <xref:System.Windows.Forms.Integration.WindowsFormsHost> controle.  
  
 [!code-csharp[PropertyMappingWithWfh#14](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithWfhSample/CSharp/PropertyMappingWithWfh/Window1.xaml.cs#14)] 
 [!code-vb[PropertyMappingWithWfh#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithWfhSample/VisualBasic/PropertyMappingWithWfh/Window1.xaml.vb#14)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="propertyName" />tem um mapeamento existente.</exception>
      </Docs>
    </Member>
    <Member MemberName="Apply">
      <MemberSignature Language="C#" Value="public void Apply (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Apply(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.Apply(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade para traduzir.</param>
        <summary>Executa o tradutor de propriedade para a propriedade especificada, com base no valor da propriedade atual do objeto de origem.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">A propriedade fornecida pelo <paramref name="propertyName" /> não existe no <see cref="P:System.Windows.Forms.Integration.PropertyMap.SourceObject" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplyAll">
      <MemberSignature Language="C#" Value="public void ApplyAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.ApplyAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executa o tradutor de propriedade para cada propriedade mapeada, com base em valores de propriedade do objeto de origem atual.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Remove todos os mapeamentos de propriedade.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.Contains(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade para pesquisar.</param>
        <summary>Obtém um valor que indica se a propriedade especificada está mapeada.</summary>
        <returns>
          <see langword="true" />Se <paramref name="propertyName" /> existe no mapa de propriedade; caso contrário, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTranslators">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.Dictionary&lt;string,System.Windows.Forms.Integration.PropertyTranslator&gt; DefaultTranslators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2&lt;string, class System.Windows.Forms.Integration.PropertyTranslator&gt; DefaultTranslators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.PropertyMap.DefaultTranslators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;System.String,System.Windows.Forms.Integration.PropertyTranslator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de mapeamentos de propriedades que são definidas por padrão.</summary>
        <value>Um <see cref="T:System.Collections.Generic.Dictionary`2" /> que mapeia nomes de propriedade correspondente <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obter uma lista de mapeamentos de propriedade padrão, consulte [formulários do Windows e o mapeamento de propriedade do WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Integration.PropertyTranslator this[string propertyName] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Integration.PropertyTranslator Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.PropertyMap.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Integration.PropertyTranslator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade para mapear.</param>
        <summary>Obtém ou define o <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegar para a propriedade especificada.</summary>
        <value>O <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegar correspondente para a propriedade especificada pelo <paramref name="propertyName" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante a configuração, se nenhum <xref:System.Windows.Forms.Integration.PropertyTranslator> existe para `propertyName`, o representante novo é adicionado para o <xref:System.Windows.Forms.Integration.PropertyMap>. Se um <xref:System.Windows.Forms.Integration.PropertyTranslator> já existe para `propertyName`, ele será substituído.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como recuperar o <xref:System.Windows.Forms.Integration.PropertyTranslator> delegar o <xref:System.Windows.Forms.Control.BackColor%2A> propriedade de um <xref:System.Windows.Forms.Integration.ElementHost> controle.  
  
 [!code-csharp[PropertyMappingWithElementHost#15](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithElementHost/CSharp/PropertyMappingWithElementHost/Form1.cs#15)]
 [!code-vb[PropertyMappingWithElementHost#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithElementHost/VisualBasic/PropertyMappingWithElementHost/Form1.vb#15)]  
  
 O exemplo de código a seguir mostra como recuperar o <xref:System.Windows.Forms.Integration.PropertyTranslator> delegar o <xref:System.Windows.Controls.Control.Background%2A> propriedade de um <xref:System.Windows.Forms.Integration.WindowsFormsHost> controle.  
  
 [!code-csharp[PropertyMappingWithWfh#15](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithWfhSample/CSharp/PropertyMappingWithWfh/Window1.xaml.cs#15)] 
 [!code-vb[PropertyMappingWithWfh#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithWfhSample/VisualBasic/PropertyMappingWithWfh/Window1.xaml.vb#15)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" />é <see langword="null" /> ou vazio especificado; de cadeia de caracteres <see cref="T:System.Windows.Forms.Integration.PropertyTranslator" /> delegado é <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A propriedade fornecida pelo <paramref name="propertyName" /> não existe no <see cref="P:System.Windows.Forms.Integration.PropertyMap.SourceObject" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.PropertyMap.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um <see cref="T:System.Collections.ICollection" /> nomes de objeto que contém a propriedade no <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> coleção.</summary>
        <value>Um <see cref="T:System.Collections.ICollection" /> objeto que contém os nomes de propriedade do <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> coleção.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyMappingError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs&gt; PropertyMappingError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs&gt; PropertyMappingError" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Integration.PropertyMap.PropertyMappingError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ocorre quando uma exceção é gerada por um tradutor de propriedade.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Manipuladores para o <xref:System.Windows.Forms.Integration.PropertyMap.PropertyMappingError> evento, opcionalmente, pode disparar a exceção, definindo o <xref:System.Windows.Forms.Integration.IntegrationExceptionEventArgs.ThrowException%2A> sinalizador no <xref:System.Windows.Forms.Integration.PropertyMappingExceptionEventArgs>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.Remove(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade a ser removido.</param>
        <summary>Exclui a propriedade especificada do mapeamento.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir mostra como remover um mapeamento para o <xref:System.Windows.Forms.Control.Cursor%2A> propriedade para um <xref:System.Windows.Forms.Integration.ElementHost> controle.  
  
 [!code-csharp[PropertyMappingWithElementHost#13](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithElementHost/CSharp/PropertyMappingWithElementHost/Form1.cs#13)]
 [!code-vb[PropertyMappingWithElementHost#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithElementHost/VisualBasic/PropertyMappingWithElementHost/Form1.vb#13)]  
  
 O exemplo de código a seguir mostra como adicionar um mapeamento para o <xref:System.Windows.FrameworkElement.Cursor%2A> propriedade para um <xref:System.Windows.Forms.Integration.WindowsFormsHost> controle.  
  
 [!code-csharp[PropertyMappingWithWfh#13](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithWfhSample/CSharp/PropertyMappingWithWfh/Window1.xaml.cs#13)] 
 [!code-vb[PropertyMappingWithWfh#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithWfhSample/VisualBasic/PropertyMappingWithWfh/Window1.xaml.vb#13)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.Reset(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">O nome da propriedade para restaurar.</param>
        <summary>Restaura o mapeamento de propriedade padrão para a propriedade especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Integration.PropertyMap.Reset%2A> método tem os seguintes efeitos o <xref:System.Windows.Forms.Integration.PropertyMap>.  
  
-   Um mapeamento de propriedade padrão que foi removido é restaurado.  
  
-   Um mapeamento de propriedade foi adicionado é removido.  
  
-   Um mapeamento de propriedade padrão que foi substituído é restaurado para seu valor padrão.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyName" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAll">
      <MemberSignature Language="C#" Value="public void ResetAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.PropertyMap.ResetAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restaura os mapeamentos de propriedade padrão.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Forms.Integration.PropertyMap.ResetAll%2A> método tem os seguintes efeitos o <xref:System.Windows.Forms.Integration.PropertyMap>.  
  
-   Mapeamentos de propriedade padrão que foram removidos são restaurados.  
  
-   Mapeamentos de propriedade que foram adicionados são removidos.  
  
-   Mapeamentos de propriedade padrão que foram substituídos são restaurados para os valores padrão.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceObject">
      <MemberSignature Language="C#" Value="protected object SourceObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SourceObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.PropertyMap.SourceObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o objeto que tem as propriedades a serem convertidos.</summary>
        <value>O objeto que tem as propriedades a serem convertidos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As propriedades que estão mapeadas no <xref:System.Windows.Forms.Integration.PropertyMap> deve existir no <xref:System.Windows.Forms.Integration.PropertyMap.SourceObject%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.PropertyMap.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém os tradutores de propriedade no <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> coleção.</summary>
        <value>Um <see cref="T:System.Collections.ICollection" /> que contém os tradutores de propriedade no <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> coleção.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
