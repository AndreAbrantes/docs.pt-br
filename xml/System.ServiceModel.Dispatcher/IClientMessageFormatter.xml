<Type Name="IClientMessageFormatter" FullName="System.ServiceModel.Dispatcher.IClientMessageFormatter">
  <TypeSignature Language="C#" Value="public interface IClientMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define métodos que são usados para controlar a conversão de mensagens em objetos e em mensagens para aplicativos cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar o <xref:System.ServiceModel.Dispatcher.IClientMessageFormatter> interface para criar um formatador de cliente personalizado que serializa objetos em mensagens e desserializa mensagens em objetos de uma determinada operação.  
  
 Anexar personalizado [!INCLUDE[indigo1](~/includes/indigo1-md.md)] formatadores do cliente para o <xref:System.ServiceModel.Dispatcher.ClientOperation.Formatter%2A> propriedade para lidar com essa conversão explicitamente.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DeserializeReply">
      <MemberSignature Language="C#" Value="public object DeserializeReply (System.ServiceModel.Channels.Message message, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object DeserializeReply(class System.ServiceModel.Channels.Message message, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.DeserializeReply(System.ServiceModel.Channels.Message,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="message">A mensagem de entrada.</param>
        <param name="parameters">Qualquer <see langword="out" /> valores.</param>
        <summary>Converte uma mensagem em um valor retornado e em parâmetros <see langword="out" /> que são passados de volta para a operação de chamada.</summary>
        <returns>O valor retornado da operação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamado depois que uma mensagem de resposta é recebida. Implementar para converter a mensagem de resposta em um valor de retorno (e qualquer `out` parâmetros) que é retornado ao aplicativo de chamada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message SerializeRequest (System.ServiceModel.Channels.MessageVersion messageVersion, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message SerializeRequest(class System.ServiceModel.Channels.MessageVersion messageVersion, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageFormatter.SerializeRequest(System.ServiceModel.Channels.MessageVersion,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageVersion" Type="System.ServiceModel.Channels.MessageVersion" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="messageVersion">A versão da mensagem SOAP a ser usada.</param>
        <param name="parameters">Os parâmetros passados para o [!INCLUDE[indigo2](~/includes/indigo2-md.md)] a operação de cliente.</param>
        <summary>Converte uma matriz <see cref="T:System.Object" /> em uma saída <see cref="T:System.ServiceModel.Channels.Message" />.</summary>
        <returns>A mensagem SOAP enviada à operação de serviço.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamado depois que uma operação é invocada no cliente, mas antes de serializar a mensagem de saída. Implemente para converter os objetos de parâmetro na mensagem de saída.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
