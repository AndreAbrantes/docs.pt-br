<Type Name="IBuildEngine3" FullName="Microsoft.Build.Framework.IBuildEngine3">
  <TypeSignature Language="C#" Value="public interface IBuildEngine3 : Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBuildEngine3 implements class Microsoft.Build.Framework.IBuildEngine, class Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Framework.IBuildEngine3" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.IBuildEngine2</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Essa interface estende IBuildEngine para fornecer um método que permita criando o projeto de arquivos em paralelo.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildProjectFilesInParallel">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.BuildEngineResult BuildProjectFilesInParallel (string[] projectFileNames, string[] targetNames, System.Collections.IDictionary[] globalProperties, System.Collections.Generic.IList&lt;string&gt;[] removeGlobalProperties, string[] toolsVersion, bool returnTargetOutputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.Build.Framework.BuildEngineResult BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, class System.Collections.IDictionary[] globalProperties, class System.Collections.Generic.IList`1&lt;string&gt;[] removeGlobalProperties, string[] toolsVersion, bool returnTargetOutputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.BuildEngineResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileNames" Type="System.String[]" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary[]" />
        <Parameter Name="removeGlobalProperties" Type="System.Collections.Generic.IList&lt;System.String&gt;[]" />
        <Parameter Name="toolsVersion" Type="System.String[]" />
        <Parameter Name="returnTargetOutputs" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="projectFileNames">O projeto seja compilado.</param>
        <param name="targetNames">Os destinos do projeto para criar (pode ser nulo).</param>
        <param name="globalProperties">Uma matriz de <see cref="T:System.Collections.IDictionary" /> de propriedades adicionais de global para aplicar ao projeto filho (entradas de matriz podem ser nulas).  
  
 As chaves e devem ser cadeias de caracteres.</param>
        <param name="removeGlobalProperties">Uma lista de propriedades globais que deve ser removido.</param>
        <param name="toolsVersion">Uma versão das ferramentas reconhecido pelo mecanismo que será usado durante a compilação (pode ser nulo).</param>
        <param name="returnTargetOutputs">As saídas de destino devem ser retornadas no BuildEngineResult.</param>
        <summary>Permite que as tarefas iniciar uma compilação em um arquivo de projeto</summary>
        <returns>Se a compilação for bem-sucedida, as saídas de destinos especificados são retornadas.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reacquire">
      <MemberSignature Language="C#" Value="public void Reacquire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reacquire() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine3.Reacquire" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Espera para readquirir o controle depois da concessão.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public void Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine3.Yield" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informa o sistema que esta tarefa tem um componente fora do processo de execução longa e outro trabalho pode ser feito na compilação, enquanto que o trabalho é concluído.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Há apenas um nó (processo msbuild.exe) por CPU. Podem criar apenas um projeto, destino e tarefas a qualquer momento em um nó. Se uma tarefa estiver esperando, por exemplo, para uma ferramenta gerada ou algum outro evento para ser concluída, a tarefa pode chamar rendimento, que retorna imediatamente. Isso permite que o nó de criar um destino em outro projeto, se estiverem disponíveis.  Quando a tarefa estiver pronta para continuar, é necessário chamar <xref:Microsoft.Build.Framework.IBuildEngine3.Reacquire%2A>. Como regra aproximada, se uma tarefa espera que uma operação irá demorar mais de 20 ou 30 segundos, ele poderá optar por chamar `Yield` antes de iniciar a operação, e `Reaquire` quando a operação for concluída.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
