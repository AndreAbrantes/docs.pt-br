<Type Name="ISoapServerVRoot" FullName="System.EnterpriseServices.Internal.ISoapServerVRoot">
  <TypeSignature Language="C#" Value="public interface ISoapServerVRoot" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISoapServerVRoot" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Internal.ISoapServerVRoot" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("A31B6577-71D2-4344-AEDF-ADC1B0DC5347")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Publica autenticadas e criptografadas raízes virtuais de SOAP em servidores.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Consulte <xref:System.EnterpriseServices.Internal.SoapServerVRoot> para a implementação do padrão.  
  
 <xref:System.EnterpriseServices.Internal.ISoapServerVRoot>é usado internamente pelo .NET Framework. Você não precisa usá-lo diretamente no seu código.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateVirtualRootEx">
      <MemberSignature Language="C#" Value="public void CreateVirtualRootEx (string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, out string baseUrl, out string virtualRoot, out string physicalPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateVirtualRootEx(string rootWebServer, string inBaseUrl, string inVirtualRoot, string homePage, string discoFile, string secureSockets, string authentication, string operation, [out] string&amp; baseUrl, [out] string&amp; virtualRoot, [out] string&amp; physicalPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapServerVRoot.CreateVirtualRootEx(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.String@,System.String@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="inBaseUrl" Type="System.String" />
        <Parameter Name="inVirtualRoot" Type="System.String" />
        <Parameter Name="homePage" Type="System.String" />
        <Parameter Name="discoFile" Type="System.String" />
        <Parameter Name="secureSockets" Type="System.String" />
        <Parameter Name="authentication" Type="System.String" />
        <Parameter Name="operation" Type="System.String" />
        <Parameter Name="baseUrl" Type="System.String&amp;" RefType="out" />
        <Parameter Name="virtualRoot" Type="System.String&amp;" RefType="out" />
        <Parameter Name="physicalPath" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rootWebServer">O servidor de Web raiz.</param>
        <param name="inBaseUrl">A URL base que contém a raiz virtual.</param>
        <param name="inVirtualRoot">O nome da raiz virtual.</param>
        <param name="homePage">
          <see langword="true" />Se o <see langword="EnableDefaultDoc" /> propriedade for definida; caso contrário, <see langword="false" />.</param>
        <param name="discoFile">
          <see langword="true" />Se um arquivo de descoberta padrão será criado; <see langword="false" /> se não houver nenhum arquivo de descoberta. Se <see langword="false" /> e existe um arquivo de Default.disco, o arquivo é excluído.</param>
        <param name="secureSockets">
          <see langword="true" />Se a criptografia SSL é obrigatória. Caso contrário, <see langword="false" />.</param>
        <param name="authentication">Especifique "anônimo" se nenhuma autenticação deve ser usado (usuário anônimo). Caso contrário, especifique uma cadeia de caracteres vazia.</param>
        <param name="operation">Não usado. Especifique <see langword="null" /> para esse parâmetro.</param>
        <param name="baseUrl">Quando este método retorna, este parâmetro contém a URL base.</param>
        <param name="virtualRoot">Quando este método retorna, este parâmetro contém o nome da raiz virtual.</param>
        <param name="physicalPath">Quando este método retorna, este parâmetro contém o endereço de disco do diretório Virtual raiz.</param>
        <summary>Cria uma raiz virtual do SOAP com opções de segurança.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">Um chamador na cadeia de chamadas não tem permissão para acessar o código não gerenciado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O utilitário SOAP não está disponível.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteVirtualRootEx">
      <MemberSignature Language="C#" Value="public void DeleteVirtualRootEx (string rootWebServer, string baseUrl, string virtualRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteVirtualRootEx(string rootWebServer, string baseUrl, string virtualRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapServerVRoot.DeleteVirtualRootEx(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="baseUrl" Type="System.String" />
        <Parameter Name="virtualRoot" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rootWebServer">O servidor de Web raiz.</param>
        <param name="baseUrl">A URL base que contém a raiz virtual.</param>
        <param name="virtualRoot">O nome da raiz virtual.</param>
        <summary>Exclui uma raiz virtual. Não foi totalmente implementado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A funcionalidade de excluir uma raiz virtual não está disponível no momento na implementação desta interface. A implementação retorna sem excluir a raiz.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Um chamador na cadeia de chamadas não tem permissão para acessar o código não gerenciado.</exception>
        <exception cref="T:System.PlatformNotSupportedException">O utilitário SOAP não está disponível.</exception>
        <exception cref="T:System.EnterpriseServices.ServicedComponentException">Falha na chamada para identificar o diretório do sistema.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetVirtualRootStatus">
      <MemberSignature Language="C#" Value="public void GetVirtualRootStatus (string rootWebServer, string inBaseUrl, string inVirtualRoot, out string exists, out string secureSockets, out string windowsAuth, out string anonymous, out string homePage, out string discoFile, out string physicalPath, out string baseUrl, out string virtualRoot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetVirtualRootStatus(string rootWebServer, string inBaseUrl, string inVirtualRoot, [out] string&amp; exists, [out] string&amp; secureSockets, [out] string&amp; windowsAuth, [out] string&amp; anonymous, [out] string&amp; homePage, [out] string&amp; discoFile, [out] string&amp; physicalPath, [out] string&amp; baseUrl, [out] string&amp; virtualRoot) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ISoapServerVRoot.GetVirtualRootStatus(System.String,System.String,System.String,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@,System.String@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rootWebServer" Type="System.String" />
        <Parameter Name="inBaseUrl" Type="System.String" />
        <Parameter Name="inVirtualRoot" Type="System.String" />
        <Parameter Name="exists" Type="System.String&amp;" RefType="out" />
        <Parameter Name="secureSockets" Type="System.String&amp;" RefType="out" />
        <Parameter Name="windowsAuth" Type="System.String&amp;" RefType="out" />
        <Parameter Name="anonymous" Type="System.String&amp;" RefType="out" />
        <Parameter Name="homePage" Type="System.String&amp;" RefType="out" />
        <Parameter Name="discoFile" Type="System.String&amp;" RefType="out" />
        <Parameter Name="physicalPath" Type="System.String&amp;" RefType="out" />
        <Parameter Name="baseUrl" Type="System.String&amp;" RefType="out" />
        <Parameter Name="virtualRoot" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rootWebServer">O servidor de Web raiz.</param>
        <param name="inBaseUrl">A URL base que contém a raiz virtual.</param>
        <param name="inVirtualRoot">O nome da raiz virtual.</param>
        <param name="exists">Quando este método retorna, este parâmetro contém um <see langword="true" /> se o diretório virtual existir; caso contrário, <see langword="false" />.</param>
        <param name="secureSockets">Quando este método retorna, este parâmetro contém um <see langword="true" /> se a criptografia SSL for necessário; caso contrário, <see langword="false" />.</param>
        <param name="windowsAuth">Quando este método retorna, este parâmetro contém <see langword="true" /> se a autenticação do Windows for definida, caso contrário, <see langword="false" />.</param>
        <param name="anonymous">Quando este método retorna, este parâmetro contém <see langword="true" /> se nenhuma autenticação é definida (usuário anônimo); caso contrário, <see langword="false" />.</param>
        <param name="homePage">Quando este método retorna, este parâmetro contém um <see langword="true" /> se do diretório raiz Virtual <see langword="EnableDefaultDoc" /> propriedade for definida; caso contrário, <see langword="false" />.</param>
        <param name="discoFile">Quando este método retorna, este parâmetro contém um <see langword="true" /> se existe um arquivo de Default.disco; caso contrário, <see langword="false" />.</param>
        <param name="physicalPath">Quando este método retorna, este parâmetro contém o endereço de disco do diretório Virtual raiz.</param>
        <param name="baseUrl">Quando este método retorna, este parâmetro contém a URL base.</param>
        <param name="virtualRoot">Quando este método retorna, este parâmetro contém o nome da raiz virtual.</param>
        <summary>Retorna o status de segurança de uma raiz virtual do SOAP existente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
