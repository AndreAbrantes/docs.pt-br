<Type Name="TransformManyBlock&lt;TInput,TOutput&gt;" FullName="System.Threading.Tasks.Dataflow.TransformManyBlock&lt;TInput,TOutput&gt;">
  <TypeSignature Language="C#" Value="public sealed class TransformManyBlock&lt;TInput,TOutput&gt; : System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;, System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransformManyBlock`2&lt;TInput, TOutput&gt; extends System.Object implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!TInput, !TOutput&gt;, class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!TOutput&gt;, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TOutput&gt;, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TInput&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TInput" />
    <TypeParameter Name="TOutput" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TInput">Especifica o tipo de dados recebidos e operado por este <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    <typeparam name="TOutput">Especifica o tipo de dados de saída por este <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    <summary>Fornece um bloco de fluxo de dados que invoca um fornecido <see cref="T:System.Func`2" /> delegar para cada elemento de dados recebido.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  A biblioteca de fluxo de dados TPL (<xref:System.Threading.Tasks.Dataflow?displayProperty=nameWithType> namespace) não é distribuído com o [!INCLUDE[net_v45](~/includes/net-v45-md.md)]. Para instalar o <xref:System.Threading.Tasks.Dataflow> namespace, abra seu projeto no [!INCLUDE[vs_dev11_long](~/includes/vs-dev11-long-md.md)], escolha **gerenciar pacotes NuGet** no menu projeto e pesquise online o `Microsoft.Tpl.Dataflow` pacote.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="transform">A função para chamar com cada elemento de dados recebido. Todos os dados de retornado <see cref="T:System.Collections.Generic.IEnumerable`1" /> será disponibilizado como saída neste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt; transform);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt;&gt; transform) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="transform">A função para chamar com cada elemento de dados recebido. Todos os dados retornados de forma assíncrona no <see cref="T:System.Collections.Generic.IEnumerable`1" /> será disponibilizado como saída neste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt; transform, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt; transform, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="transform">A função para chamar com cada elemento de dados recebido. Todos os dados do retornado no <see cref="T:System.Collections.Generic.IEnumerable`1" /> será disponibilizado como saída neste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <param name="dataflowBlockOptions">As opções com a qual configurar isso <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Inicializa uma nova <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.  
  
 -ou-  
  
 O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransformManyBlock (Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt; transform, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!TInput, class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;!TOutput&gt;&gt;&gt; transform, class System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Func&lt;TInput,System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;TOutput&gt;&gt;&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="transform">A função para chamar com cada elemento de dados recebido. Todos os dados retornados de forma assíncrona no <see cref="T:System.Collections.Generic.IEnumerable`1" /> será disponibilizado como saída neste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <param name="dataflowBlockOptions">As opções com a qual configurar isso <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
        <summary>Inicializa uma nova <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.  
  
 -ou-  
  
 O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens nem consumir as mensagens mais adiadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Depois de <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A> foi chamado em um bloco de fluxo de dados, esse bloco será concluída e seu <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> tarefa entrará em um estado final depois que ele tiver processado todos os dados disponíveis anteriormente. <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Complete%2A>será não bloco aguardando conclusão ocorra, mas em vez disso, iniciará a solicitação; para aguardar a conclusão ocorra, o <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> tarefa pode ser usada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
        <value>A tarefa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um bloco de fluxo de dados é considerado concluída quando ele não está processando uma mensagem e quando ele tem a garantia de que ele não processará mais mensagens. Retornado <xref:System.Threading.Tasks.Task> será a transição para um estado concluído quando o bloco associado foi concluída. Ela fará a transição para o <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> estado quando o bloco for concluído o processamento com êxito de acordo com o bloco de fluxo de dados definido pelo semântica. Ela fará a transição para o <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Faulted> estado quando o bloco de fluxo de dados concluiu o processamento prematuramente devido a uma exceção sem tratamento e ela fará a transição para o <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Canceled> estado quando o bloco de fluxo de dados concluiu o processamento prematuramente devido ao recebimento de uma solicitação de cancelamento. Se a tarefa é concluída no <xref:System.Threading.Tasks.TaskStatus.Faulted> estado, seu `Exception` propriedade retornará um <xref:System.AggregateException> que contém uma ou mais exceções que fez o bloco falha.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputCount">
      <MemberSignature Language="C#" Value="public int InputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 InputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de itens de entrada aguardando para serem processadas por este bloco.</summary>
        <value>O número de itens de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.InputCount%2A> não inclui todos os itens estão sendo processados pelo bloco ou todos os itens que já foram processados pelo bloco.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo">
      <MemberSignature Language="C#" Value="public IDisposable LinkTo (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable LinkTo(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
      </Parameters>
      <Docs>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual se conectar a essa fonte.</param>
        <param name="linkOptions">Um <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instância que configura o link.</param>
        <summary>Links de <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> especificado <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> .</summary>
        <returns>Um IDisposable que, após chamar Dispose, será desvincular a origem do destino.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" />é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="OutputCount">
      <MemberSignature Language="C#" Value="public int OutputCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OutputCount" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número de itens de saída disponíveis para ser recebida deste bloco.</summary>
        <value>O número de itens de saída.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IDataflowBlock.Fault">
      <MemberSignature Language="C#" Value="void IDataflowBlock.Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
        <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> para concluir um <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> estado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Depois de <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.System%23Threading%23Tasks%23Dataflow%23IDataflowBlock%23Fault%2A> foi chamado em um bloco de fluxo de dados, esse bloco será concluída e seu <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602.Completion%2A> tarefa entrará em um estado final. A falha de um bloco, como cancelar um bloco, faz com que mensagens em buffer (mensagens de entrada não processadas, bem como mensagens de saída unoffered) serão perdidos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage">
      <MemberSignature Language="C#" Value="TOutput ISourceBlock&lt;TOutput&gt;.ConsumeMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, out bool messageConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !TOutput System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ConsumeMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target, [out] bool&amp; messageConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="messageConsumed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que está sendo consumida.</param>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consumindo a mensagem.</param>
        <param name="messageConsumed">
          <see langword="true" />Se a mensagem foi consumida com êxito; Caso contrário, <see langword="false" />.</param>
        <summary>Chamado pelo vinculado <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecidos por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <returns>O valor da mensagem consumido. Isso pode corresponder a outro <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instância que foi reservado anteriormente e passado como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O consumo <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> devem usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de OfferMessage<see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />  
  
 Se a mensagem solicitada não está disponível, o valor de retorno será <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instâncias vinculados a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instância pode usar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>, e ele só deve ser usado para consumir <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instâncias anteriormente oferecidos por essa fonte para o destino.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation">
      <MemberSignature Language="C#" Value="void ISourceBlock&lt;TOutput&gt;.ReleaseReservation (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReleaseReservation(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada sendo lançada.</param>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> liberar a mensagem que reservado anteriormente.</param>
        <summary>Chamado pelo vinculado <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> para liberar reservado anteriormente <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instâncias vinculados a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instância pode usar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A>, e só deve ser usada para liberar <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instâncias anteriormente e com êxito são reservadas pelo destino.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage">
      <MemberSignature Language="C#" Value="bool ISourceBlock&lt;TOutput&gt;.ReserveMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;.ReserveMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock&lt;TOutput&gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que está sendo reservada.</param>
        <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> reservar a mensagem.</param>
        <summary>Chamado pelo vinculado <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> para reservar um anteriormente oferecidos <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
        <returns>
          <see langword="true" />Se a mensagem foi reservada com êxito; Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> instâncias vinculados a este <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> instância pode usar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>, e só deve ser usado para reservar <xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader> instâncias anteriormente oferecidos por essa fonte para o destino.  
  
 Se `true` for retornado, o <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> subsequentemente deve chamar <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A> ou <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A> para esta mensagem. Falha ao fazer isso pode resultar na fonte sendo não é possível propagar mensagens adicionais para este ou outros destinos.  
  
 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>não deve ser chamado enquanto o destino está mantendo todos os bloqueios internos. Isso violará a hierarquia de bloqueio necessária para evitar deadlocks em uma rede de fluxo de dados.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
        <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Dataflow.DataflowMessageStatus ITargetBlock&lt;TInput&gt;.OfferMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, TInput messageValue, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt; source, bool consumeToAccept);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Threading.Tasks.Dataflow.DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;.OfferMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, !TInput messageValue, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!TInput&gt; source, bool consumeToAccept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock&lt;TInput&gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.DataflowMessageStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="messageValue" Type="TInput" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TInput&gt;" />
        <Parameter Name="consumeToAccept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="messageHeader">Um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instância que representa o cabeçalho da mensagem que está sendo oferecido.</param>
        <param name="messageValue">O valor da mensagem que está sendo oferecido.</param>
        <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> oferta a mensagem. Isso pode ser <see langword="null" />.</param>
        <param name="consumeToAccept">
          <see langword="true" />Se o destino deve chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> forma síncrona durante a chamada para <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir a mensagem.</param>
        <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, dando a oportunidade para consumir ou adiar a mensagem de destino.</summary>
        <returns>O status da mensagem oferecido. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> for retornado, e a fonte não deve usar a mensagem oferecida, pois agora é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar mais tarde para consumir ou reservar a mensagem; enquanto isso, a fonte ainda possui a mensagem e pode oferecer aos outros blocos.  
  
 Se o destino seria adiaram caso contrário, mas fonte <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> em vez disso, é retornado.  
  
 Se o destino tentou aceitar a mensagem mas o perdido devido a fonte de entregar a mensagem para outro destino ou simplesmente descartando, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
  
 Se o destino optou por não aceitar a mensagem <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  
  
 -ou-  
  
 <paramref name="consumeToAccept" />só pode ser verdadeiro se fornecido com não null <paramref name="source" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o nome formatado deste <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instância.</summary>
        <returns>Uma cadeia de caracteres que representa o nome formatado deste <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instância.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Herdado de <xref:System.Object> . Usa o <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> opção.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;TOutput&gt; filter, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;!TOutput&gt; filter, [out] !TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;TOutput&gt;" />
        <Parameter Name="item" Type="TOutput&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter">O valor de predicado precisa ser aprovado para que sejam recebidas.  <c>filtro</c> pode ser <see langword="null" />, caso em que passará todos os itens.</param>
        <param name="item">O item recebido da origem.</param>
        <summary>Tentativas de forma síncrona receber um item de saída disponível da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
        <returns>
          <see langword="true" />Se um item pode ser recebido; Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não bloqueia a espera para a fonte para fornecer um item.  
  
 Será retornado após a verificação de um elemento, se um elemento estava disponível ou não.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveAll">
      <MemberSignature Language="C#" Value="public bool TryReceiveAll (out System.Collections.Generic.IList&lt;TOutput&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;!TOutput&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;TOutput&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items">Os itens recebidos da origem.</param>
        <summary>Tentativas de forma síncrona receber todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
        <returns>
          <see langword="true" />Se um ou mais itens foi recebidas; Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método não bloqueia a espera para a fonte para fornecer um item.  
  
 Será retornado após a verificação de elementos, se um elemento estava disponível ou não.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
