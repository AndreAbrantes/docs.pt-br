<Type Name="VirtualizationCacheLength" FullName="System.Windows.Controls.VirtualizationCacheLength">
  <TypeSignature Language="C#" Value="public struct VirtualizationCacheLength : IEquatable&lt;System.Windows.Controls.VirtualizationCacheLength&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit VirtualizationCacheLength extends System.ValueType implements class System.IEquatable`1&lt;valuetype System.Windows.Controls.VirtualizationCacheLength&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.VirtualizationCacheLength" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Windows.Controls.VirtualizationCacheLength&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Controls.VirtualizationCacheLengthConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa as medidas para o <see cref="P:System.Windows.Controls.VirtualizingPanel.CacheLength" /> propriedade anexada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Controls.VirtualizingPanel.CacheLength%2A?displayProperty=nameWithType> propriedade anexada Especifica a quantidade de espaço no qual um <xref:System.Windows.Controls.VirtualizingPanel> virtualiza os itens antes ou depois que o modo de exibição de porta (a área na qual os itens são visíveis).  Você pode especificar o tamanho de cache uniforme criasse uma <xref:System.Windows.Controls.VirtualizationCacheLength> usando o construtor que usa um único parâmetro.  Você pode usar o construtor que usa dois parâmetros para especificar valores diferentes para o <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> e <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> propriedades.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VirtualizationCacheLength (double cacheBeforeAndAfterViewport);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 cacheBeforeAndAfterViewport) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cacheBeforeAndAfterViewport" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="cacheBeforeAndAfterViewport">O tamanho do cache antes e depois do visor.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> classe com um comprimento de cache uniforme para cada lado do visor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VirtualizationCacheLength (double cacheBeforeViewport, double cacheAfterViewport);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 cacheBeforeViewport, float64 cacheAfterViewport) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.#ctor(System.Double,System.Double)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cacheBeforeViewport" Type="System.Double" />
        <Parameter Name="cacheAfterViewport" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="cacheBeforeViewport">O tamanho do cache antes do visor.</param>
        <param name="cacheAfterViewport">O tamanho do cache depois do visor.</param>
        <summary>Cria uma nova instância do <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> classe com os tamanhos de cache especificado para cada lado do visor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheAfterViewport">
      <MemberSignature Language="C#" Value="public double CacheAfterViewport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 CacheAfterViewport" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tamanho do cache antes do visor quando o <see cref="T:System.Windows.Controls.VirtualizingPanel" /> é virtualizar.</summary>
        <value>O tamanho do cache depois do visor quando o <see cref="T:System.Windows.Controls.VirtualizingPanel" /> é virtualizar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nesse contexto, "virtualiza" refere-se a uma técnica pela qual um subconjunto de [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elementos gerados a partir de um grande número de itens de dados com base em quais itens estão visíveis na tela. Usar um cache para evitar a geração de [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elementos conforme eles são rolados para a exibição.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheBeforeViewport">
      <MemberSignature Language="C#" Value="public double CacheBeforeViewport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 CacheBeforeViewport" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o tamanho do cache depois do visor quando o <see cref="T:System.Windows.Controls.VirtualizingPanel" /> é virtualizar.</summary>
        <value>O tamanho do cache depois do visor quando o <see cref="T:System.Windows.Controls.VirtualizingPanel" /> é virtualizar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nesse contexto, "virtualiza" refere-se a uma técnica pela qual um subconjunto de [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elementos gerados a partir de um grande número de itens de dados com base em quais itens estão visíveis na tela. Usar um cache para evitar a geração de [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elementos conforme eles são rolados para a exibição.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object oCompare);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object oCompare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oCompare" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oCompare">O objeto a ser comparado com o <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> atual.</param>
        <summary>Determina se o objeto especificado é igual ao atual <see cref="T:System.Windows.Controls.VirtualizationCacheLength" />.</summary>
        <returns>
          <see langword="true" />Se o objeto especificado for igual ao atual <see cref="T:System.Windows.Controls.VirtualizationCacheLength" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Controls.VirtualizationCacheLength> verifica a igualdade de valor.  Ou seja, os dois objetos são iguais se seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> valores de propriedade são iguais e seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> valores de propriedade são iguais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Controls.VirtualizationCacheLength cacheLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Windows.Controls.VirtualizationCacheLength cacheLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.Equals(System.Windows.Controls.VirtualizationCacheLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheLength" Type="System.Windows.Controls.VirtualizationCacheLength" />
      </Parameters>
      <Docs>
        <param name="cacheLength">O objeto a ser comparado com o <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> atual.</param>
        <summary>Determina se o <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> especificado é igual ao <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> atual.</summary>
        <returns>
          <see langword="true" />Se o objeto especificado for igual ao atual <see cref="T:System.Windows.Controls.VirtualizationCacheLength" />; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Controls.VirtualizationCacheLength> verifica a igualdade de valor.  Ou seja, os dois objetos são iguais se seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> valores de propriedade são iguais e seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> valores de propriedade são iguais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém um código hash para a atual <see cref="T:System.Windows.Controls.VirtualizationCacheLength" />.</summary>
        <returns>Um código hash do <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> atual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Controls.VirtualizationCacheLength cl1, System.Windows.Controls.VirtualizationCacheLength cl2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Controls.VirtualizationCacheLength cl1, valuetype System.Windows.Controls.VirtualizationCacheLength cl2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.op_Equality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cl1" Type="System.Windows.Controls.VirtualizationCacheLength" />
        <Parameter Name="cl2" Type="System.Windows.Controls.VirtualizationCacheLength" />
      </Parameters>
      <Docs>
        <param name="cl1">O primeiro objeto a ser comparado.</param>
        <param name="cl2">O segundo objeto a ser comparado.</param>
        <summary>Determina se os dois especificados <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> objetos são iguais.</summary>
        <returns>
          <see langword="true" />Se especificado <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Controls.VirtualizationCacheLength> verifica a igualdade de valor.  Ou seja, os dois objetos são iguais se seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> valores de propriedade são iguais e seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> valores de propriedade são iguais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Controls.VirtualizationCacheLength cl1, System.Windows.Controls.VirtualizationCacheLength cl2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Controls.VirtualizationCacheLength cl1, valuetype System.Windows.Controls.VirtualizationCacheLength cl2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.op_Inequality(System.Windows.Controls.VirtualizationCacheLength,System.Windows.Controls.VirtualizationCacheLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cl1" Type="System.Windows.Controls.VirtualizationCacheLength" />
        <Parameter Name="cl2" Type="System.Windows.Controls.VirtualizationCacheLength" />
      </Parameters>
      <Docs>
        <param name="cl1">O primeiro objeto a ser comparado.</param>
        <param name="cl2">O segundo objeto a ser comparado.</param>
        <summary>Determina se os dois especificados <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> objetos são iguais.</summary>
        <returns>
          <see langword="true" />Se especificado <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> forem iguais; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Controls.VirtualizationCacheLength> verifica a igualdade de valor.  Ou seja, os dois objetos são iguais se seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> valores de propriedade são iguais e seus <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> valores de propriedade são iguais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.VirtualizationCacheLength.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna uma cadeia de caracteres que representa o <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> atual.</summary>
        <returns>Uma cadeia de caracteres que representa o <see cref="T:System.Windows.Controls.VirtualizationCacheLength" /> atual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.Controls.VirtualizationCacheLength.ToString%2A> método retorna uma cadeia de caracteres que exibe os valores de <xref:System.Windows.Controls.VirtualizationCacheLength.CacheBeforeViewport%2A> e <xref:System.Windows.Controls.VirtualizationCacheLength.CacheAfterViewport%2A> propriedades.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
