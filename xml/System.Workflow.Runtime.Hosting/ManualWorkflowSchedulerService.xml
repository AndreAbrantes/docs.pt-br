<Type Name="ManualWorkflowSchedulerService" FullName="System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService">
  <TypeSignature Language="C#" Value="public class ManualWorkflowSchedulerService : System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManualWorkflowSchedulerService extends System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowSchedulerService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Fornece um serviço de threading que permite que o aplicativo host criando uma instância de fluxo de trabalho Doe o <see cref="T:System.Threading.Thread" /> no qual a instância de fluxo de trabalho é executada. Usando esse serviço de threading, hospedar aplicativos podem executar uma instância de fluxo de trabalho em um único <see cref="T:System.Threading.Thread" /> no modo síncrono (embora se o fluxo de trabalho contém uma atividade de atraso, o trabalho é adiado até depois que a atividade de atraso é executada em um thread separado gerado pelo <see cref="System.Threading.Timer" />). Esse modo bloqueia a execução do aplicativo host até que a instância de fluxo de trabalho ficar ociosa. Em seguida, a instância de fluxo de trabalho só pode ser executada usando o <see cref="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)" /> método desse serviço.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>não executar automaticamente uma instância de fluxo de trabalho que está na fila. O host deve chamar <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow%2A> para executar um fluxo de trabalho especificado.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualWorkflowSchedulerService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualWorkflowSchedulerService (bool useActiveTimers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useActiveTimers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useActiveTimers" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useActiveTimers">
          <see langword="Boolean" />que determina como são tratadas os atividades de atraso. Se <see langword="true" />, o serviço do Agendador retoma automaticamente fluxos de trabalho depois que as atividades de atraso expirarem (por meio de um timer na memória). Se <see langword="false" />, o host deve retomar manualmente o fluxo de trabalho depois que as atividades de atraso expirarem.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualWorkflowSchedulerService (System.Collections.Specialized.NameValueCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Specialized.NameValueCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="parameters">Um <see cref="T:System.Collections.Specialized.NameValueCollection" /> que contém parâmetros para <c>useActiveTimers</c>. Se <see langword="true" />, o serviço do Agendador retoma automaticamente fluxos de trabalho depois que as atividades de atraso expirarem (por meio de um timer na memória). Se <see langword="false" />, o host deve retomar manualmente o fluxo de trabalho depois que as atividades de atraso expirarem.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="protected override void Cancel (Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Cancel(valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Cancel(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="timerId">O <see cref="T:System.Guid" /> associado ao item de trabalho agendado existente para cancelar.</param>
        <summary>Cancela o item especificado de trabalho de instância de fluxo de trabalho existente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected override void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.OnStarted" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sobrecarga de <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted" />. Este método é chamado sempre que <see cref="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" /> é chamado e é usado pelo <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> para o trabalho necessário quando o <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> é iniciado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunWorkflow">
      <MemberSignature Language="C#" Value="public bool RunWorkflow (Guid workflowInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RunWorkflow(valuetype System.Guid workflowInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.RunWorkflow(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowInstanceId">O <see cref="T:System.Guid" /> para a instância de fluxo de trabalho seja executada.</param>
        <summary>Executa a instância de fluxo de trabalho especificado.</summary>
        <returns>
          <see langword="true" />Se o fluxo de trabalho começa a ser executado; Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Isso é uma chamada síncrona que usa o thread atual para executar o fluxo de trabalho. Ele não retorna até que o fluxo de trabalho ocioso, suspende, concluído, termina ou anulada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="workflowInstanceId" />é um GUID vazio.</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">Um <see cref="T:System.Threading.WaitCallback" /> delegado multicast que representa o método a ser executado.</param>
        <param name="workflowInstanceId">Um <see cref="T:System.Guid" /> que representa a instância de fluxo de trabalho.</param>
        <summary>Adiciona uma instância de fluxo de trabalho para a fila de itens de trabalho pendentes usando a instância de fluxo de trabalho especificado usando o delegado multicast especificado.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> contém uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId, valuetype System.DateTime whenUtc, valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
        <Parameter Name="whenUtc" Type="System.DateTime" />
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">Um <see cref="T:System.Threading.WaitCallback" /> delegado multicast que representa o método a ser executado.</param>
        <param name="workflowInstanceId">Um <see cref="T:System.Guid" /> que representa a instância de fluxo de trabalho.</param>
        <param name="whenUtc">O <see cref="T:System.DateTime" /> que indica a hora para começar a executar o thread.</param>
        <param name="timerId">Um <see cref="T:System.Guid" /> que representa o thread agendado.</param>
        <summary>Adiciona a instância de fluxo de trabalho especificado para a fila de itens de trabalho pendente usando o delegado multicast especificado, <see cref="T:System.DateTime" /> e GUIDs.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> contém uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workflowInstanceId" />ou <paramref name="timerId" /> é um GUID vazio.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected override void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sobrecarga de <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop" />. O <see cref="T:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService" /> usa esse método para o trabalho necessário quando o <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> para.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
