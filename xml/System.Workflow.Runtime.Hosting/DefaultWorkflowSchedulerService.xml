<Type Name="DefaultWorkflowSchedulerService" FullName="System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService">
  <TypeSignature Language="C#" Value="public class DefaultWorkflowSchedulerService : System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultWorkflowSchedulerService extends System.Workflow.Runtime.Hosting.WorkflowSchedulerService" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Workflow.Runtime.Hosting.WorkflowSchedulerService</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Cria e gerencia os threads que executam instâncias de fluxo de trabalho no mecanismo de tempo de execução do fluxo de trabalho.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>é usado pelo mecanismo de tempo de execução de fluxo de trabalho por padrão. Ele inclui o suporte para o fluxo de trabalho de várias instâncias em fila no pool de threads de tempo de execução padrão. Se você deseja controlar o thread que é responsável por executar o fluxo de trabalho, use <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultWorkflowSchedulerService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultWorkflowSchedulerService (System.Collections.Specialized.NameValueCollection parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Specialized.NameValueCollection parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor(System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameters" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="parameters">Um <see cref="T:System.Collections.Specialized.NameValueCollection" /> que contém informações de inicialização.</param>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor é invocado quando o mecanismo de tempo de execução do fluxo de trabalho carrega os serviços de um arquivo de configuração do aplicativo. O parâmetro só é válido é `maxSimultaneousWorkflows`, que pode especificar o número de fluxos de trabalho que podem ser executados ao mesmo tempo.  
  
 Definindo `maxSimultaneousWorkflows` como um valor alto pode fazer com que o pool de threads do .NET enfraquecer. Isso pode causar tempos limite quando um serviço de persistência tenta concluir uma transação de persistência porque <xref:System.Transactions.Transaction> objetos também usam o pool de threads do .NET.  
  
 Se não for especificado em um construtor ou arquivo de configuração, o valor padrão para `maxSimultaneousWorkflows` é 5 para um computador com processador único, e (int) (5 * Environment.ProcessorCount *.8) para uma máquina de vários processadores. Observe que (int) (5 * Environment.ProcessorCount *.8) não é sempre o mesmo (int)(4 * Environment.ProcessorCount), por causa de regras de aritmética de inteiros.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="parameters" /> contém uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Valores de uma chave no <paramref name="parameters" /> coleção contém uma referência nula (<see langword="Nothing" />).  
  
 --ou--  
  
 Valores de uma chave no <paramref name="parameters" /> coleção não coincide com a chave padrão para <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" />.</exception>
        <exception cref="T:System.FormatException">Um dos parâmetros não pode ser convertido para um precisão dupla número de ponto flutuante que corresponde a <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows" /> é menor que 1.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultWorkflowSchedulerService (int maxSimultaneousWorkflows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 maxSimultaneousWorkflows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maxSimultaneousWorkflows" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxSimultaneousWorkflows">Um inteiro que determina o número máximo de instâncias de fluxo de trabalho que podem ser armazenados na fila do pool de threads.</param>
        <summary>Inicializa uma nova instância do <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> classe usando o número máximo especificado de instâncias de fluxo de trabalho que o serviço pode executar simultaneamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Definindo `maxSimultaneousWorkflows` como um valor alto pode fazer com que o pool de threads do .NET enfraquecer. Isso pode causar tempos limite quando um serviço de persistência tenta concluir uma transação de persistência porque <xref:System.Transactions.Transaction> objetos também usam o pool de threads do .NET.  
  
 Se não for especificado em um construtor ou arquivo de configuração, o valor padrão para `maxSimultaneousWorkflows` é 5 para um computador com processador único, e (int) (5 * Environment.ProcessorCount *.8) para uma máquina de vários processadores. Observe que (int) (5 * Environment.ProcessorCount *.8) não é sempre o mesmo (int)(4 * Environment.ProcessorCount), por causa de regras de aritmética de inteiros.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxSimultaneousWorkflows" /> é menor que 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="protected override void Cancel (Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Cancel(valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Cancel(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="timerId">O <see cref="T:System.Guid" /> associado ao item de trabalho agendado existente para cancelar.</param>
        <summary>Cancela o item especificado de trabalho de instância de fluxo de trabalho existente.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="timerId" />é um GUID vazio.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxSimultaneousWorkflows">
      <MemberSignature Language="C#" Value="public int MaxSimultaneousWorkflows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxSimultaneousWorkflows" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.MaxSimultaneousWorkflows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o número máximo de instâncias de fluxo de trabalho que podem ser armazenados na fila do pool de threads.</summary>
        <value>Um inteiro que representa o número máximo de instâncias de fluxo de trabalho que podem ser armazenados na fila do pool de threads.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O valor padrão para esse método é 5 para um computador com processador único, e (int) (5 * Environment.ProcessorCount *.8) para uma máquina de vários processadores. Observe que (int) (5 * Environment.ProcessorCount *.8) não é sempre o mesmo (int)(4 * Environment.ProcessorCount), por causa de regras de aritmética de inteiros.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStarted">
      <MemberSignature Language="C#" Value="protected override void OnStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.OnStarted" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifica o <see cref="T:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService" /> que a execução foi iniciada uma instância de fluxo de trabalho.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.OnStarted%2A>cria um thread para o primeiro item de trabalho na lista de itens que estão aguardando para ser incluído no pool de threads da instância de fluxo de trabalho.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">Um <see cref="T:System.Threading.WaitCallback" /> delegado multicast que representa o método a ser executado.</param>
        <param name="workflowInstanceId">Um <see cref="T:System.Guid" /> que representa a instância de fluxo de trabalho.</param>
        <summary>Adiciona uma instância de fluxo de trabalho para a fila de itens de trabalho pendentes usando a instância de fluxo de trabalho especificado usando o delegado multicast especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Threading.WaitCallback> construtor para criar o método delegado para ser executado no novo thread.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> contém uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="protected override void Schedule (System.Threading.WaitCallback callback, Guid workflowInstanceId, DateTime whenUtc, Guid timerId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Schedule(class System.Threading.WaitCallback callback, valuetype System.Guid workflowInstanceId, valuetype System.DateTime whenUtc, valuetype System.Guid timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Schedule(System.Threading.WaitCallback,System.Guid,System.DateTime,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Threading.WaitCallback" />
        <Parameter Name="workflowInstanceId" Type="System.Guid" />
        <Parameter Name="whenUtc" Type="System.DateTime" />
        <Parameter Name="timerId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="callback">Um <see cref="T:System.Threading.WaitCallback" /> delegado multicast que representa o método a ser executado.</param>
        <param name="workflowInstanceId">Um <see cref="T:System.Guid" /> que representa a instância de fluxo de trabalho.</param>
        <param name="whenUtc">O <see cref="T:System.DateTime" /> que indica a hora para começar a executar o thread.</param>
        <param name="timerId">Um <see cref="T:System.Guid" /> que representa o thread agendado.</param>
        <summary>Adiciona a instância de fluxo de trabalho especificado para a fila de itens de trabalho pendente usando o delegado multicast especificado, <see cref="T:System.DateTime" /> e GUIDs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use o <xref:System.Threading.WaitCallback> construtor para criar o método delegado para ser executado no novo thread.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> contém uma referência nula (<see langword="Nothing" /> no Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workflowInstanceId" />ou <paramref name="timerId" /> é um GUID vazio.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="protected override void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Interrompe o thread em execução no momento na instância do fluxo de trabalho e outros timers que estão em execução.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
