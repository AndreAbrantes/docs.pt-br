<Type Name="ProtectedMemory" FullName="System.Security.Cryptography.ProtectedMemory">
  <TypeSignature Language="C#" Value="public sealed class ProtectedMemory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ProtectedMemory extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.ProtectedMemory" />
  <AssemblyInfo>
    <AssemblyName>System.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece métodos para proteger e ao desproteger memória. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe fornece acesso para a Data Protection DPAPI (API) disponíveis no Windows XP e sistemas operacionais posteriores. Este é um serviço que é fornecido pelo sistema operacional e não requer bibliotecas adicionais. Ele fornece criptografia de dados confidenciais em memória.  
  
 A classe consiste em dois wrappers para o DPAPI não gerenciada, <xref:System.Security.Cryptography.ProtectedMemory.Protect%2A> e <xref:System.Security.Cryptography.ProtectedMemory.Unprotect%2A>. Esses dois métodos podem ser usados para criptografar e descriptografar dados na memória.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar a proteção de dados.  
  
 [!code-cpp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CPP/memoryprotectionsample.cpp#1)]
 [!code-csharp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CS/memoryprotectionsample.cs#1)]
 [!code-vb[Cryptography.MemoryProtectionSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/vb/memoryprotectionsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Protect">
      <MemberSignature Language="C#" Value="public static void Protect (byte[] userData, System.Security.Cryptography.MemoryProtectionScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Protect(unsigned int8[] userData, valuetype System.Security.Cryptography.MemoryProtectionScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userData" Type="System.Byte[]" />
        <Parameter Name="scope" Type="System.Security.Cryptography.MemoryProtectionScope" />
      </Parameters>
      <Docs>
        <param name="userData">A matriz de bytes que contém os dados na memória a ser protegida. A matriz deve ser um múltiplo de 16 bytes.</param>
        <param name="scope">Um dos valores de enumeração que especifica o escopo de proteção de memória.</param>
        <summary>Protege os dados especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser usado para proteger os dados na memória. Observe que o método não faz uma cópia dos dados, mas criptografa a matriz de bytes em vigor. O `userData` parâmetro deve ser de 16 bytes de comprimento ou um múltiplo de 16 bytes.  
  
 Este método está disponível no Windows XP e sistemas operacionais posteriores.  
  
   
  
## Examples  
 O exemplo de código a seguir mostra como usar a proteção de dados.  
  
 [!code-cpp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CPP/memoryprotectionsample.cpp#1)]
 [!code-csharp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CS/memoryprotectionsample.cs#1)]
 [!code-vb[Cryptography.MemoryProtectionSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/vb/memoryprotectionsample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="userData" />deve ter 16 bytes de comprimento ou em múltiplos de 16 bytes.</exception>
        <exception cref="T:System.NotSupportedException">O sistema operacional não oferece suporte a esse método. Esse método pode ser usado apenas com o Windows 2000 ou sistemas operacionais posteriores.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="userData" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unprotect">
      <MemberSignature Language="C#" Value="public static void Unprotect (byte[] encryptedData, System.Security.Cryptography.MemoryProtectionScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unprotect(unsigned int8[] encryptedData, valuetype System.Security.Cryptography.MemoryProtectionScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.ProtectedMemory.Unprotect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedData" Type="System.Byte[]" />
        <Parameter Name="scope" Type="System.Security.Cryptography.MemoryProtectionScope" />
      </Parameters>
      <Docs>
        <param name="encryptedData">A matriz de bytes na memória para descriptografar.</param>
        <param name="scope">Um dos valores de enumeração que especifica o escopo de proteção de memória.</param>
        <summary>Desprotege os dados na memória que foi protegido usando o <see cref="M:System.Security.Cryptography.ProtectedMemory.Protect(System.Byte[],System.Security.Cryptography.MemoryProtectionScope)" /> método.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método pode ser usado para descriptografar dados na memória que foi criptografada usando o <xref:System.Security.Cryptography.ProtectedMemory.Protect%2A> método.  
  
 Este método está disponível no Windows XP e sistemas operacionais posteriores.  
  
   
  
## Examples  
 O exemplo a seguir mostra como usar a proteção de dados.  
  
 [!code-cpp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CPP/memoryprotectionsample.cpp#1)]
 [!code-csharp[Cryptography.MemoryProtectionSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/CS/memoryprotectionsample.cs#1)]
 [!code-vb[Cryptography.MemoryProtectionSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.MemoryProtectionSample/vb/memoryprotectionsample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">O sistema operacional não oferece suporte a esse método. Esse método pode ser usado apenas com o Windows 2000 ou sistemas operacionais posteriores.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="encryptedData" /> é <see langword="null" />.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">
          <paramref name="encryptedData" /> está vazio.  
  
 -ou-  
  
 Essa chamada não foi implementada.  
  
 -ou-  
  
 NTSTATUS contém um erro.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
