<Type Name="EditorZoneBase" FullName="System.Web.UI.WebControls.WebParts.EditorZoneBase">
  <TypeSignature Language="C#" Value="public abstract class EditorZoneBase : System.Web.UI.WebControls.WebParts.ToolZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EditorZoneBase extends System.Web.UI.WebControls.WebParts.ToolZone" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ToolZone</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Serve como a classe base para todos os controles que atuam como contêineres de zona <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe é uma classe de zona especializado que herda o <xref:System.Web.UI.WebControls.WebParts.ToolZone> classe e fornece um conjunto básico de comportamentos para zonas derivadas que contêm <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles. Há vários outros tipos de <xref:System.Web.UI.WebControls.WebParts.ToolZone> classes; para obter mais informações, consulte o tópico de visão geral de <xref:System.Web.UI.WebControls.WebParts.ToolZone> classe. Como outras regiões de ferramenta, <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zonas não são visíveis quando uma página está no modo de procura normal; elas são visíveis apenas quando uma página está em modo de exibição de edição. Como também a outras zonas de ferramenta, <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zonas só podem conter o tipo especial de controles que eles foram projetados para conter (nesse caso, <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles).  
  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zonas fornecem uma interface de usuário especial para os controles de edição que eles contêm. Muitos desses elementos de interface do usuário são comuns a todas as zonas no conjunto de controle de Web Parts. Para obter uma discussão detalhada sobre os elementos de interface do usuário comuns em zonas de Web Parts, consulte o tópico de visão geral de classe para o <xref:System.Web.UI.WebControls.WebParts.WebZone> classe.  
  
 Porque o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe é abstrata, você não pode usá-lo diretamente em uma página da Web. Em vez disso, você deve usar um controle que herda de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe e implementa seu comportamento. Você pode usar a zona derivada que é fornecida no conjunto de controle de Web Parts, o <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle, ou você pode derivar seu próprio personalizado <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> controle.  
  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe fornece uma interface comum de usuário (UI) para conter controles especiais que permitem que os usuários finais editar as propriedades de aparência, layout e outros atributos da <xref:System.Web.UI.WebControls.WebParts.WebPart> controles. Algumas propriedades que se aplicam a interface do usuário consultem verbos, como o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A>, <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CancelVerb%2A>, e <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OKVerb%2A> propriedades. Verbos são ações comuns realizadas por usuários em uma página e são representados na interface do usuário por botões, links, itens de menu ou outros elementos. Por exemplo, quando os usuários editar propriedades em um controle que eles podem clicar em um verbo aplicar para salvar as alterações.  
  
 Várias outras propriedades afetam o texto que é exibido em vários pontos a interface do usuário de edição. Isso inclui o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EmptyZoneText%2A>, <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ErrorText%2A>, <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.HeaderText%2A>, e <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.InstructionText%2A> propriedades.  
  
 Duas propriedades importantes fornecem referências para controles relacionados. O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> propriedade é uma coleção do <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles contidos na zona. O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.WebPartToEdit%2A> propriedade é uma referência de objeto para um controle contido em um <xref:System.Web.UI.WebControls.WebParts.WebPartZone>– que pode ser um <xref:System.Web.UI.WebControls.WebParts.WebPart> controle ou qualquer outro ASP.NET controle de servidor, controle de usuário ou controle personalizado que está sendo editado.  
  
 Por fim, o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorPartChrome%2A> propriedade faz referência a uma instância de um <xref:System.Web.UI.WebControls.WebParts.EditorPartChrome> objeto que está associado com a região, e que contém as características de estilo os periféricos elementos de interface do usuário (conhecido como chrome), como estilos de título e borda para <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles na zona.  
  
 Um número de métodos do <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe são especializadas para tratar a edição de outros controles. O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.Close%2A> método altera a página de modo de exibição de edição de volta para um modo de exibição de navegação normal. O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorPartChrome%2A> método é para criar o chrome (elementos de interface do usuário periféricos, como uma borda, verbos, ícones e um título) que envolve cada <xref:System.Web.UI.WebControls.WebParts.EditorPart> controle na zona. O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts%2A> é um método abstrato; classes derivadas substituem-lo para criar instâncias de todos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles contidos na zona. O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts%2A> método pode ser chamado por uma classe derivada, se a coleção de <xref:System.Web.UI.WebControls.WebParts.EditorPart> as alterações da zona por algum motivo programático, que sinaliza o controle de Web Parts definido para recriar e atualizar a coleção de controles <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles. O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnDisplayModeChanged%2A> método é usado para definir a coleção de <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles para `null` quando as alterações de modo de exibição do modo de edição de volta para o modo de procura. Por fim, o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged%2A> método é usado para manipular o evento quando um <xref:System.Web.UI.WebControls.WebParts.WebPart> controle está inserindo ou sair do modo de edição. Por exemplo, esse método é um local conveniente para sincronizar os valores de propriedade de um <xref:System.Web.UI.WebControls.WebParts.WebPart> controle com os valores editáveis associada <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra várias declarativa e usa programático do <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe. Como a classe é abstrata, os exemplos de código usam derivada <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe que é fornecido com o conjunto de controles de Web Parts, demonstrando as propriedades e métodos que ele herda o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe.  
  
 O exemplo de código tem quatro partes:  
  
-   Um controle de usuário que permite que você altere os modos de exibição na página da Web.  
  
-   Uma página da Web que contém um <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle.  
  
-   Um personalizado <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe que demonstra alguns do <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> membros de classe.  
  
-   Uma descrição de como o exemplo funciona em um navegador.  
  
 O código-fonte para o controle de usuário proveniente de outro tópico. Para este exemplo de código funcione, você precisa obter o arquivo. ascx para o controle de usuário da [passo a passo: alterando modos de exibição em uma página de Web Parts](http://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0) tópico e coloque o arquivo na mesma pasta que a página. aspx neste exemplo de código.  
  
 A segunda parte do exemplo de código é uma página da Web que contém uma referência declarativa para um <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle. Na parte superior da página é uma `Register` diretiva para o controle de usuário. A marca de controle de usuário é declarada na página com um `<uc1:DisplayModeMenu>` elemento. Observe que abaixo o `<asp:WebPartZone>` elemento é um `<asp:EditorZone>` elemento que contém <xref:System.Web.UI.WebControls.WebParts.EditorPart> controla e tem uma variedade de marcas e propriedades definidas para determinar sua aparência e comportamento. A maioria do código na página demonstra os vários usos programáticos do <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> propriedades e métodos.  
  
 [!code-aspx-csharp[WebParts_EditorZoneBase_Common#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#1)]
 [!code-aspx-vb[WebParts_EditorZoneBase_Common#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#1)]  
  
 A terceira parte do exemplo de código é um personalizado <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe que mostra como trabalhar com um número das <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> membros de classe. A classe personalizada derivada de <xref:System.Web.UI.WebControls.WebParts.EditorZone> para que ele pode ser usado com um modelo de zona na marcação declarativa da página da Web. Para o exemplo de código seja executado, você deve compilar este código-fonte. Você pode compilá-lo explicitamente e colocar o assembly resultante na pasta Bin do seu site da Web ou o cache de assembly global. Como alternativa, você pode colocar o código-fonte na pasta App_Code de seu site, onde ele será compilado dinamicamente em tempo de execução. Este exemplo de código usa compilação dinâmica; Assim, você observará que o `Register` diretiva na parte superior da página da Web não faz referência a um arquivo de assembly. Para uma explicação passo a passo que demonstra os métodos de compilação, consulte [passo a passo: desenvolvendo e usando um controle de servidor Web personalizado](http://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#12](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/myeditorzone.cs#12)]
 [!code-vb[WebParts_EditorZoneBase_Common#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/myeditorzone.vb#12)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** na lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos dois controles e clique em **editar** para o controle de edição. Quando a interface do usuário de edição estiver visível, você pode ver os efeitos de diversos declarativa e usa programático do <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> membros de classe.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Se você deseja desenvolver uma zona personalizada para hospedagem <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles, você deve determinar se deseja fornecer suporte de modelo de zona. Um modelo de zona é criado por tipos que implementam o <see cref="T:System.Web.UI.ITemplate" /> de interface e é necessário se você quiser permitir que os desenvolvedores de página usando seu fuso personalizado para fazer referência a <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles dentro de sua região na marcação declarativa de uma página da Web. Se você precisar de zona suporte de modelo, você deve herdar do <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> classe.  
  
 Por outro lado, se a zona personalizada e sua <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles vai ser autocontidos e elas serão criadas por meio de programação sem opções para desenvolvedores de página especificar os controles de forma declarativa em um modelo de zona, você pode herdar diretamente do <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> classe. Se você fizer isso, é essencial que você implemente o <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts" /> método para que a zona personalizada funcionará.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected EditorZoneBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa a classe para uso por uma instância de classe herdada. Esse construtor só pode ser chamado por uma classe herdada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este construtor quando invocado por uma classe herdada, passa um <xref:System.Web.UI.WebControls.WebParts.WebPartDisplayMode> o objeto para o <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controle, que permite a página exibir a interface do usuário (UI) edição.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyVerb">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartVerb ApplyVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerb ApplyVerb" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerb</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência a um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> alterações do objeto que permite aos usuários finais aplicar a edição para um controle no modo de edição.</summary>
        <value>Um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> que permite que os usuários finais aplicar as alterações a um controle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O verbo aplicar é referenciado pelo <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A> derivado de propriedade em um controle de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe. O verbo aplicar salva as alterações feitas pelo usuário final na interface do usuário edição (UI) de edição para um controle de servidor que está sendo editado. Por padrão, o verbo de aplicar aparece na interface do usuário como um <xref:System.Web.UI.WebControls.Button> controle. O tipo de botão pode ser uma imagem, um link ou um botão real; Você pode definir isso para todos os botões de verbo em uma região (não para botões individuais), definindo o herdadas <xref:System.Web.UI.WebControls.WebParts.WebZone.VerbButtonType%2A> propriedade no nível de zona.  
  
 O verbo de aplicar é um controle de nível de zona, o que significa que, embora possa haver várias <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles, cada uma edição de uma ou mais propriedades para o controle de servidor que está no modo de edição, o verbo aplicar funciona universalmente para aplicar todas as alterações de todos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles na zona para o controle de servidor.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A> propriedade declarativamente e programaticamente. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A primeira parte do exemplo de código mostra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A> propriedade declarativamente em uma página da Web. Este exemplo personaliza o texto para o verbo.  
  
 [!code-aspx-csharp[WebParts_EditorZoneBase_Common#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_EditorZoneBase_Common#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#2)]  
  
 A segunda parte do exemplo mostra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A> propriedade programaticamente, usando um botão de alternância para habilitar ou desabilitá-lo.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#4](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#4)]
 [!code-vb[WebParts_EditorZoneBase_Common#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#4)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** no controle de lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos controles e clique em **editar** para editar o controle selecionado. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle e a edição de interface do usuário são visíveis, você pode ver o botão que representa o verbo de aplicar e clique no **alternância ApplyVerb habilitado** botão Habilitar ou desabilitá-lo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelVerb">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartVerb CancelVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerb CancelVerb" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.CancelVerb" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerb</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência a um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> alterações do objeto que permite aos usuários finais cancelar a edição para um controle no modo de edição.</summary>
        <value>Um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> que permite que os usuários finais cancelar as alterações de um controle de edição.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O verbo ' Cancelar ' é referenciado pelo <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CancelVerb%2A> derivado de propriedade em um controle de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe. O verbo ' Cancelar ' cancela as alterações de edição que um usuário final tornou-se a um controle de servidor na interface do usuário edição (IU). Por padrão, o verbo de cancelamento é exibido na interface de usuário como um <xref:System.Web.UI.WebControls.Button> controle. O tipo de botão pode ser uma imagem, um link ou um botão real; Você pode definir isso para todos os botões de verbo em uma região (não para botões individuais), definindo o herdadas <xref:System.Web.UI.WebControls.WebParts.WebZone.VerbButtonType%2A> propriedade no nível de zona.  
  
 Quando um usuário cancela as alterações de edição, nenhuma alteração no <xref:System.Web.UI.WebControls.WebParts.EditorPart> são aplicados ao controle de servidor que está sendo editado. Além disso, a página permanece no modo de exibição de edição, mas o <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles estão ocultos e <xref:System.Web.UI.WebControls.WebParts.WebPart> controle que estava sendo editada não está selecionado. Isso permite que um usuário final selecionar outro <xref:System.Web.UI.WebControls.WebParts.WebPart> controle para editar sem precisar alterar os modos de exibição novamente.  
  
 O verbo de cancelamento é um controle de nível de zona, o que significa que, embora possa haver várias <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles, cada uma edição de uma ou mais propriedades para o controle de servidor que está no modo de edição, o verbo Cancelar funciona universalmente para cancelar todas as alterações de todos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles na zona.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CancelVerb%2A> propriedade declarativamente e programaticamente. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A primeira parte do exemplo de código mostra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CancelVerb%2A> propriedade declarativamente em uma página da Web. Este exemplo personaliza o texto para o verbo.  
  
 [!code-aspx-csharp[WebParts_EditorZoneBase_Common#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_EditorZoneBase_Common#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#2)]  
  
 A segunda parte do exemplo mostra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CancelVerb%2A> propriedade programaticamente, usando um botão de alternância para habilitar ou desabilitá-lo.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#5](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#5)]
 [!code-vb[WebParts_EditorZoneBase_Common#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#5)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** no controle de lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos controles e clique em **editar** para editar o controle selecionado. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle e a edição de interface do usuário são visíveis, você pode ver o botão que representa o verbo de cancelamento e clique no **alternância CancelVerb habilitado** botão Habilitar ou desabilitá-lo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="protected override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Chamado quando um usuário clica em um verbo Fechar no cabeçalho de uma zona, esse método encerra o processo de edição <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controla e retorna o modo de exibição de uma página Web Parts para o modo de procura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.Close%2A> método fornece uma implementação para o método base declarado no <xref:System.Web.UI.WebControls.WebParts.ToolZone> classe. A implementação simplesmente chama o <xref:System.Web.UI.WebControls.WebParts.WebPartManager.EndWebPartEditing%2A> método, que executa as etapas necessárias para encerrar o processo de edição.  
  
 Chamando o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.Close%2A> método retorna a página para o modo de procura e cancela qualquer edição alterações feitas a qualquer <xref:System.Web.UI.WebControls.WebParts.WebPart> controles.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override void CreateChildControls ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void CreateChildControls() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateChildControls" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cria o conjunto de filho controles associados a um <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> zona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEditorPartChrome">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.WebParts.EditorPartChrome CreateEditorPartChrome ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.EditorPartChrome CreateEditorPartChrome() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorPartChrome" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartChrome</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtém uma referência a um novo <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartChrome" /> objeto usado para renderizar o usuário periférico elementos de interface do usuário em torno de um <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> zona.</summary>
        <returns>Um <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartChrome" /> que renderiza os elementos de interface do usuário periféricos para a zona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorPartChrome%2A> método retorna um novo <xref:System.Web.UI.WebControls.WebParts.EditorPartChrome> objeto. Chrome inclui os seguintes elementos de interface do usuário de periféricos que envolvem cada indivíduo <xref:System.Web.UI.WebControls.WebParts.EditorPart> controle na zona: uma borda, uma barra de título; os itens que aparecem na barra de título, incluindo ícones opcionais, texto de título e um menu de verbos; e itens que aparecem na área de rodapé de um controle.  
  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorPartChrome%2A> método usa retornado <xref:System.Web.UI.WebControls.WebParts.EditorPartChrome> objeto para criar o cromo em torno de cada <xref:System.Web.UI.WebControls.WebParts.EditorPart> controle.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>O <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorPartChrome" /> método pode ser substituído em uma classe derivada para fornecer uma implementação diferente. Por exemplo, você pode criar um personalizado <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartChrome" /> classe para dar a você mais controle sobre o processamento e a aparência da interface do usuário de edição. Se você substituir o <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorPartChrome" /> método em uma zona derivada, você pode criar personalizados <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartChrome" /> objeto no método substituído.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateEditorParts">
      <MemberSignature Language="C#" Value="protected abstract System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fornece uma declaração de método de base que é derivado de zonas pode substituir para lidar com os detalhes da criação de <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles contidos em uma zona.</summary>
        <returns>Um <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> que contém a coleção de <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles associados a zona.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts%2A> método não fornece nenhuma implementação. Ele se destina a ser implementada em uma classe derivada e deve ser usado para criar uma instância de coleção de <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles contidos em uma região, sempre que a página da Web de hospedagem entra em modo de edição. O <xref:System.Web.UI.WebControls.WebParts.EditorZone.CreateEditorParts%2A?displayProperty=nameWithType> método fornece um exemplo de uma implementação de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="protected override bool Display { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Display" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém um valor que indica se um <see cref="T:System.Web.UI.WebControls.WebParts.ToolZone" /> controle é exibido no momento.</summary>
        <value>
          <see langword="true" />Se o <see cref="T:System.Web.UI.WebControls.WebParts.ToolZone" /> está exibido; caso contrário, <see langword="false" />. O valor padrão é <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditorPartChrome">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.EditorPartChrome EditorPartChrome { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.EditorPartChrome EditorPartChrome" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorPartChrome" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartChrome</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência à instância do <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartChrome" /> classe associada a <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> zona.</summary>
        <value>Um <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartChrome" /> que contém as características de estilo para os elementos de cromo da <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles em uma zona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorPartChrome%2A> propriedade fornece uma referência para o <xref:System.Web.UI.WebControls.WebParts.EditorPartChrome> objeto associado a uma zona. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorPartChrome%2A> método é chamado, ele cria uma instância do <xref:System.Web.UI.WebControls.WebParts.EditorPartChrome> classe e essa instância é usado para renderizar o usuário periférico elementos de interface do usuário (também chamados de cromo) para todos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles na zona.  
  
 Os elementos de cromo de um indivíduo <xref:System.Web.UI.WebControls.WebParts.EditorPart> controle incluir sua borda e outros itens em sua área de cabeçalho, como verbos, ícones e texto do título, bem como sua área de rodapé e seus elementos incluídos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditorParts">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.WebParts.EditorPartCollection EditorParts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.EditorPartCollection EditorParts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.EditorPartCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma coleção de todos os <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles contidos em um <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> zona.</summary>
        <value>Um <see cref="T:System.Web.UI.WebControls.WebParts.EditorPartCollection" /> que contém todos os individuais <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles em uma zona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> propriedade fornece uma referência a uma coleção de todos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles na zona. Ele faz referência a ambos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles fornecidos com o conjunto de controles de Web Parts e qualquer personalizado <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles que são adicionados à zona. Como a coleção é somente leitura, os desenvolvedores que desejam criar personalizados <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles para fins de edição geral e adicioná-los à coleção devem substituir o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts%2A> método.  
  
 Se você projetar personalizado <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles para editar um determinado <xref:System.Web.UI.WebControls.WebParts.WebPart> controle, você deve substituir os membros do <xref:System.Web.UI.WebControls.WebParts.IWebEditable> interface – o <xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A> método e o <xref:System.Web.UI.WebControls.WebParts.IWebEditable.WebBrowsableObject%2A> propriedade - na <xref:System.Web.UI.WebControls.WebParts.WebPart> controle. O motivo para substituir esses membros é para habilitar seu <xref:System.Web.UI.WebControls.WebParts.WebPart> controle criar personalizado <xref:System.Web.UI.WebControls.WebParts.EditorPart> controla e adicioná-los para o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> coleção quando o controle está sendo editado e fornecer os controles de edição com uma referência de objeto para o <xref:System.Web.UI.WebControls.WebParts.WebPart> controle que estão editando. Se você quiser adicionar um personalizado <xref:System.Web.UI.WebControls.WebParts.EditorPart> controle para editar um controle de servidor que não herdam a <xref:System.Web.UI.WebControls.WebParts.WebPart> classe, você deve implementar o <xref:System.Web.UI.WebControls.WebParts.IWebEditable> na classe da interface como faria para um <xref:System.Web.UI.WebControls.WebParts.WebPart> controle.  
  
> [!NOTE]
>  Observe que qualquer <xref:System.Web.UI.WebControls.WebParts.EditorPart> que é adicionado à coleção de <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles em uma implementação do <xref:System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts%2A> método deve ter um valor atribuído à sua propriedade ID, caso contrário, uma exceção será lançada quando a coleção é atribuída para o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> propriedade programaticamente. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A primeira parte do exemplo de código demonstra que o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> propriedade contém referências a todos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles que são referenciados declarativamente na página da Web.  
  
 [!code-aspx-csharp[WebParts_EditorZoneBase_Common#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_EditorZoneBase_Common#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#2)]  
  
 A segunda parte do exemplo de código acessa programaticamente o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> propriedade e lista o ID de cada controle em um <xref:System.Web.UI.WebControls.Label> controle.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#6)]
 [!code-vb[WebParts_EditorZoneBase_Common#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#6)]  
  
 Quando você carrega a página em um navegador, você pode clicar no **exibição EditorParts coleção** botão para listar as IDs de todos os a <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles referenciados no <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> propriedade.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Um <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> que está sendo adicionado à coleção não tem um valor atribuído à sua propriedade ID.</exception>
      </Docs>
    </Member>
    <Member MemberName="EmptyZoneText">
      <MemberSignature Language="C#" Value="public override string EmptyZoneText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyZoneText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.EmptyZoneText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define uma mensagem que aparece quando uma zona não contém nenhum controle.</summary>
        <value>Uma cadeia de caracteres que contém a mensagem que aparece em uma zona vazia. Uma cadeia de caracteres de específicos de cultura padrão é fornecida pelo .NET Framework.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorText">
      <MemberSignature Language="C#" Value="public virtual string ErrorText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.ErrorText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o texto de uma mensagem de erro de nível de zona para exibir na parte superior da interface do usuário edição (IU).</summary>
        <value>Uma cadeia de caracteres localizada que contém a mensagem de erro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ErrorText%2A> propriedade contém o texto da mensagem de erro que pode ser exibido na interface de usuário se ocorrer um erro durante a renderização de controles derivado de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe. A mensagem de erro é exibida na parte superior da zona se ocorrer um erro em qualquer pessoa <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles contidos na zona. Além disso, individual <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles podem exibir suas próprias mensagens de erro próximo ao controle que recebe um erro.  
  
 O valor dessa propriedade, quando definido, podem ser salvos automaticamente em um arquivo de recurso usando uma ferramenta de designer. Para obter mais informações, consulte <xref:System.ComponentModel.LocalizableAttribute> e [globalização e localização](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public override string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.HeaderText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o texto para a área do cabeçalho de uma zona.</summary>
        <value>Uma cadeia de caracteres que contém o texto do cabeçalho da zona. O padrão é uma cadeia de caracteres vazia ("").</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstructionText">
      <MemberSignature Language="C#" Value="public override string InstructionText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InstructionText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.InstructionText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém ou define o texto em uma <see cref="T:System.Web.UI.WebControls.WebParts.ToolZone" /> controle que fornece instruções para os usuários finais.</summary>
        <value>Uma cadeia de caracteres que contém as instruções para os usuários finais. Um valor padrão apropriado para zonas de ferramenta específica é fornecido pelo derivado <see cref="T:System.Web.UI.WebControls.WebParts.ToolZone" /> classes.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateEditorParts">
      <MemberSignature Language="C#" Value="protected void InvalidateEditorParts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvalidateEditorParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define a coleção de <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles associados a um <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> zona para <see langword="null" />, resultando no <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts" /> método ser chamado para recriar a coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts%2A> método pode ser chamado por classes derivadas se a lista de <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles associados a um <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zona foi alterado por alguma razão, e a classe derivada precisa obter uma lista atualizada de <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles. A classe derivada deve chamar <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.InvalidateEditorParts%2A>, que define a coleção atual `null`. Na próxima vez que o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts%2A> coleção é acessada, o controle de Web Parts definido automaticamente invoca o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CreateEditorParts%2A> método para criar a coleção atualizada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">O estado salvo anteriormente.</param>
        <summary>Carrega previamente salva informações de estado para uma zona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é usado basicamente pela infraestrutura do .NET Framework e não se destina a ser usado diretamente no seu código. No entanto, os desenvolvedores de controle podem substituir este método para especificar como um controle de servidor personalizado restaura o estado de exibição. Para obter mais informações, consulte [visão geral do gerenciamento de estado ASP.NET](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.LoadViewState%2A> método substitui o método base para verificar se a página está sendo carregada porque um verbo Okey, um verbo de cancelar ou um verbo aplicar foi clicado na zona. Nesse caso, o método trate o estado associado a cada cenário do respectivo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">O tamanho do <paramref name="savedState" /> objeto não igual ao tamanho do objeto de estado de exibição atual.</exception>
      </Docs>
    </Member>
    <Member MemberName="OKVerb">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.WebPartVerb OKVerb { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPartVerb OKVerb" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.OKVerb" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPartVerb</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência a um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> objeto que se aplica a edição é alterado para um controle no modo de edição e oculta a interface do usuário (UI) edição.</summary>
        <value>Um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartVerb" /> que aplica as alterações de edição para um controle e oculta a interface do usuário de edição.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O verbo Okey é referenciado pelo <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OKVerb%2A> derivado de propriedade em um controle de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> classe. É semelhante para o verbo de aplicar, quando um usuário clica nele, ele se aplica a alterações de edição que o usuário fez para um controle de servidor. Além disso, os controles de edição estão ocultos, o <xref:System.Web.UI.WebControls.WebParts.WebPart> controle que estava sendo editada não estiver marcada (que permite que o usuário edite outro controle) e a página permanece no modo de edição.  
  
 Por padrão, o verbo Okey aparece na interface do usuário como um <xref:System.Web.UI.WebControls.Button> controle. O tipo de botão pode ser uma imagem, um link ou um botão real; Você pode definir isso para todos os botões de verbo em uma região (não para botões individuais), definindo o herdadas <xref:System.Web.UI.WebControls.WebParts.WebZone.VerbButtonType%2A> propriedade no nível de zona.  
  
 O verbo Okey é um controle de nível de zona, o que significa que, embora possa haver várias <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles, cada uma edição de uma ou mais propriedades para o controle de servidor que está no modo de edição, o verbo Okey funciona universalmente para aplicar todas as alterações de todos os <xref:System.Web.UI.WebControls.WebParts.EditorPart> controla na zona e para ocultar todos os controles, exceto a zona.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OKVerb%2A> propriedade declarativamente e programaticamente. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A primeira parte do exemplo de código mostra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OKVerb%2A> propriedade declarativamente em uma página da Web. Este exemplo personaliza o texto para o verbo.  
  
 [!code-aspx-csharp[WebParts_EditorZoneBase_Common#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#2)]
 [!code-aspx-vb[WebParts_EditorZoneBase_Common#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#2)]  
  
 A segunda parte do exemplo mostra como acessar o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OKVerb%2A> programaticamente, usando um botão de alternância para habilitar ou desabilitá-lo.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#7](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/editorzonebasecs.aspx#7)]
 [!code-vb[WebParts_EditorZoneBase_Common#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/editorzonebasevb.aspx#7)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** no controle de lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos controles e clique em **editar** para editar o controle selecionado. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle e a edição de interface do usuário são visíveis, você pode ver o botão que representa o verbo Okey e clique no **alternância OKVerb habilitado** botão Habilitar ou desabilitá-lo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayModeChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayModeChanged (object sender, System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayModeChanged(object sender, class System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnDisplayModeChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Um <see cref="T:System.Object" /> que gera o <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" /> evento.</param>
        <param name="e">Um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" /> que contém os dados do evento.</param>
        <summary>Gera o <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged" /> eventos e destrói todos os <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> e modo de exibição de controles filho na zona em preparação para uma página da Web entrar ou sair de edição.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnDisplayModeChanged%2A> método fornece uma implementação para o método de base de <xref:System.Web.UI.WebControls.WebParts.ToolZone> classe.  
  
 O objetivo principal de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnDisplayModeChanged%2A> método é para preparar uma página da Web para entrar ou sair do modo de exibição de edição. O método destrói todos os controles contidos na zona e, em seguida, chama o método base, o que gera a <xref:System.Web.UI.WebControls.WebParts.WebPartManager.DisplayModeChanged> evento o <xref:System.Web.UI.WebControls.WebParts.WebPartManager> controle.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnDisplayModeChanged%2A> método em uma classe derivada. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A zona de editor personalizado derivado de <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe para que ele pode ser usado com um modelo de zona na marcação declarativa da página da Web. As substituições de classe personalizada a <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnDisplayModeChanged%2A> método, definindo a cor de plano de fundo da zona para uma cor especificada e, em seguida, chama o método base, que destrói todos os filhos e <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles em preparação para entrar ou sair de Editar modo de exibição.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#13](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/myeditorzone.cs#13)]
 [!code-vb[WebParts_EditorZoneBase_Common#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/myeditorzone.vb#13)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** no controle de lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos controles e clique em **editar** para editar o controle selecionado. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle e edição de interface de usuário (UI) são visíveis, você pode ver que a zona tem a cor de plano de fundo especificada no código.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>O <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnDisplayModeChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs)" /> método pode ser substituído ou chamado programaticamente em um controle de zona de editor personalizado que herda o <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> classe ou o <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> classe.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
        <summary>Gera o <see cref="E:System.Web.UI.Control.PreRender" /> eventos e chamadas de <see cref="M:System.Web.UI.WebControls.WebParts.EditorPartChrome.PerformPreRender" /> método para os elementos de cromo do <see cref="T:System.Web.UI.WebControls.WebParts.EditorPart" /> controles.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedWebPartChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedWebPartChanged (object sender, System.Web.UI.WebControls.WebParts.WebPartEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedWebPartChanged(object sender, class System.Web.UI.WebControls.WebParts.WebPartEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.Web.UI.WebControls.WebParts.WebPartEventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Um <see cref="T:System.Object" /> que gera o <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" /> evento.</param>
        <param name="e">Um <see cref="T:System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs" /> que contém os dados do evento.</param>
        <summary>Gera o <see cref="E:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPartChanged" /> eventos e define o <see cref="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.EditorParts" /> coleção para <see langword="null" /> na zona em preparação para uma <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controle para entrar ou sair do modo de edição.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged%2A> método permite que você fornecer manipulação personalizada para o evento que ocorre quando um indivíduo <xref:System.Web.UI.WebControls.WebParts.WebPart> controle entrar ou sair do modo de edição.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged%2A> método em uma classe derivada. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A zona de editor personalizado derivado de <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe para que ele pode ser usado com um modelo de zona na marcação declarativa da página da Web. As substituições de classe personalizada de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged%2A> método, definindo a cor de plano de fundo do controle específico que está sendo editado e, em seguida, chama o método base.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#14](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/myeditorzone.cs#14)]
 [!code-vb[WebParts_EditorZoneBase_Common#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/myeditorzone.vb#14)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** no controle de lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos controles e clique em **editar** para editar o controle selecionado. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZone> e edição de interface do usuário (IU) são visíveis, você pode ver que o controle selecionado tem a cor de plano de fundo especificada no código.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>O <see cref="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.OnSelectedWebPartChanged(System.Object,System.Web.UI.WebControls.WebParts.WebPartEventArgs)" /> método pode ser substituído ou chamado programaticamente em um controle de zona de editor personalizado que herda o <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> classe ou o <see cref="T:System.Web.UI.WebControls.WebParts.EditorZone" /> classe.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected override void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Um <see cref="T:System.String" /> que contém o argumento para o evento.</param>
        <summary>Executa as ações associadas a um dos verbos de zona ou gera um evento que envia de volta para o servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RaisePostBackEvent%2A> método executa as ações respectivas associadas com o verbo Okey, o verbo de cancelar ou verbo aplicar, se um desses verbos foi clicado na interface do usuário (IU). Caso contrário, ele gera um evento que envia de volta para o servidor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">O <see cref="T:System.Web.UI.HtmlTextWriter" /> que recebe o conteúdo da região.</param>
        <summary>Renderiza a zona especificado <see cref="T:System.Web.UI.HtmlTextWriter" /> objeto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.Render%2A> método substitui o método base do <xref:System.Web.UI.WebControls.WebControl> classe para chamar o <xref:System.Web.UI.Page.VerifyRenderingInServerForm%2A> método, que verifica se um formulário HTML é renderizado para o controle de zona em tempo de execução. Depois da verificação, o método chama o método base para renderizar o conteúdo completo da zona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderBody">
      <MemberSignature Language="C#" Value="protected override void RenderBody (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderBody(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderBody(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">O <see cref="T:System.Web.UI.HtmlTextWriter" /> que recebe o conteúdo do corpo da região.</param>
        <summary>Substitui o método base para renderizar a área do corpo de uma zona que deriva de <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> classe.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderBody%2A> método renderiza a área do corpo de um <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zona, que é a área de conteúdo principal entre as áreas de cabeçalho e rodapé e contém <xref:System.Web.UI.WebControls.WebParts.EditorPart> controles.  
  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderBody%2A> método substitui o método base no <xref:System.Web.UI.WebControls.WebParts.WebZone> classe para fornecer processamento especializado que tratam de layout e estilo de atributos que se aplicam apenas aos <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zonas. O método renderiza uma tabela que contém todo o conteúdo do corpo e na tabela, ele define valores de atributo diferente dependendo de várias condições, incluindo o modo de exibição atual da página. Se não houver nenhum controle independente, ele renderiza o valor de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.EmptyZoneText%2A> propriedade.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderBody%2A> método em uma classe derivada. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A zona de editor personalizado derivado de <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe para que ele pode ser usado com um modelo de zona na marcação declarativa da página da Web. As substituições de classe personalizada a <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderBody%2A> método, adicionar um HTML `<hr />` elemento para criar uma linha entre o cabeçalho e o corpo da zona. Depois, ele chama o método base para renderizar o restante do conteúdo do corpo da região.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#15](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/myeditorzone.cs#15)]
 [!code-vb[WebParts_EditorZoneBase_Common#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/myeditorzone.vb#15)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** no controle de lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos controles e clique em **editar** para editar o controle selecionado. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle e edição de interface de usuário (UI) são visíveis, você pode ver a linha criada entre o cabeçalho e o corpo da zona de editor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderVerbs">
      <MemberSignature Language="C#" Value="protected override void RenderVerbs (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderVerbs(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderVerbs(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">O <see cref="T:System.Web.UI.HtmlTextWriter" /> que recebe o conteúdo do corpo da região.</param>
        <summary>Renderiza os verbos que se aplicam no nível de zona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderVerbs%2A> método renderiza os verbos cujo aplicar ações para a zona inteira: o verbo Okey, o verbo ' Cancelar ' e o verbo aplicar. Esses verbos são referenciados no <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.OKVerb%2A>, <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.CancelVerb%2A>, e <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.ApplyVerb%2A> propriedades.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra como substituir o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderVerbs%2A> método em uma classe derivada. Para o necessário para executar o exemplo de código completo, consulte a seção exemplo de <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> tópico de visão geral da classe.  
  
 A zona de editor personalizado derivado de <xref:System.Web.UI.WebControls.WebParts.EditorZone> classe para que ele pode ser usado com um modelo de zona na marcação declarativa da página da Web. As substituições de classe personalizada a <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.RenderVerbs%2A> método, adicionar texto ao valor existente do <xref:System.Web.UI.WebControls.WebParts.WebPartVerb.Text%2A> propriedade para cada um dos verbos de nível de zona. Depois, ele chama o método base para processar todos os verbos.  
  
 [!code-csharp[WebParts_EditorZoneBase_Common#16](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/CS/myeditorzone.cs#16)]
 [!code-vb[WebParts_EditorZoneBase_Common#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_EditorZoneBase_Common/VB/myeditorzone.vb#16)]  
  
 Quando você carrega a página em um navegador, você pode selecionar **modo de edição** no controle de lista suspensa para alternar para modo de edição. Clique no menu de verbos (seta para baixo) na barra de título de um dos controles e clique em **editar** para editar o controle selecionado. Quando o <xref:System.Web.UI.WebControls.WebParts.EditorZone> controle e edição de interface de usuário (UI) são visíveis, você pode ver o texto foi alterado nos botões para os verbos de nível de zona na parte inferior da zona.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Salva as alterações de estado de exibição que ocorreram depois que uma página foi postada no servidor.</summary>
        <returns>Retorna o estado de exibição atual do controle de zona. Se nenhum estado de exibição é associado com a zona, esse método retorna <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.SaveViewState%2A> método chama o método base para salvar o estado de exibição e, em seguida, salva também qualquer estado de exibição associado a aplicar, cancelar e Okey verbos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.EditorZoneBase.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Controla as alterações para o estado de exibição do controle de uma zona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.TrackViewState%2A> método primeiro chama o método base para controlar o estado de exibição associado a um <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase> zonas e, em seguida, começa a rastrear o estado de exibição para a aplicação, cancelar e Okey verbos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WebPartToEdit">
      <MemberSignature Language="C#" Value="protected System.Web.UI.WebControls.WebParts.WebPart WebPartToEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.WebParts.WebPart WebPartToEdit" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.WebPartToEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.WebPart</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém uma referência para o <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> controle que está sendo editado.</summary>
        <value>Um <see cref="T:System.Web.UI.WebControls.WebParts.WebPart" /> que está atualmente em modo de edição.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Apenas uma <xref:System.Web.UI.WebControls.WebParts.WebPart> controle pode ser editado por vez e quando um controle está no modo de edição, o <xref:System.Web.UI.WebControls.WebParts.EditorZoneBase.WebPartToEdit%2A> propriedade fornece uma referência para esse controle. O controle referenciado é o mesmo que o controle que é referenciado pelo <xref:System.Web.UI.WebControls.WebParts.WebPartManager.SelectedWebPart%2A> propriedade. Portanto, um controle que está sendo editado sempre no momento está selecionado.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Protegido <see cref="P:System.Web.UI.WebControls.WebParts.EditorZoneBase.WebPartToEdit" /> propriedade é acessível somente em classes derivadas, que podem chamar essa propriedade na base de <see cref="T:System.Web.UI.WebControls.WebParts.EditorZoneBase" /> classe para obter uma referência de objeto para o controle atual que está sendo editado.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
