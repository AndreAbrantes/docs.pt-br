<Type Name="TrackingWorkflowExceptionEventArgs" FullName="System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs">
  <TypeSignature Language="C#" Value="public class TrackingWorkflowExceptionEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TrackingWorkflowExceptionEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contém os dados associados a uma exceção que ocorre durante a execução de uma instância de fluxo de trabalho.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 Quando ocorre uma exceção durante a execução de uma instância de fluxo de trabalho e uma <xref:System.Workflow.Runtime.Tracking.TrackingProfile> que está associado com o fluxo de trabalho instância inclui um <xref:System.Workflow.Runtime.Tracking.WorkflowTrackPoint> configurado para um <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent?displayProperty=nameWithType>, conjuntos de infraestrutura de controle de fluxo de trabalho <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventArgs%2A> para um <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs> no <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord> que ele envia para o serviço de acompanhamento.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs>é usado somente pelo tempo de execução do serviço de rastreamento para transmitir informações em um <xref:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord>.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra um método chamado `WriteExceptionEventArgs`, que captura um <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs>. O código verifica se o <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception%2A> é de propriedade `null` (`Nothing` no Visual Basic).  
  
 Se não for, o código grava a mensagem associada a <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception%2A> propriedade para o console. Além disso, o código converte o valor da <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.OriginalActivityPath%2A> propriedade como uma cadeia de caracteres e grava-o para o console.  
  
 Este exemplo de código é parte do exemplo EventArgs SDK de controle do arquivo Program.cs. Para obter mais informações, consulte [EventArgs controle exemplo](http://msdn.microsoft.com/en-us/94818da2-c3c4-4a13-b47a-a0fb30dbbf1c).  
  
 [!code-csharp[WF_Samples#289](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#289)]
 [!code-vb[WF_Samples#289](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#289)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ContextGuid">
      <MemberSignature Language="C#" Value="public Guid ContextGuid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ContextGuid" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.ContextGuid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a ID do contexto da atividade associada.</summary>
        <value>Um <see cref="T:System.Guid" /> que contém a ID do contexto da <see cref="T:System.Workflow.ComponentModel.Activity" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentActivityPath">
      <MemberSignature Language="C#" Value="public string CurrentActivityPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentActivityPath" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.CurrentActivityPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> da atividade que está lançando a exceção.</summary>
        <value>O <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> da atividade que está lançando a exceção.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exceções são passadas a cadeia de atividades do manipulador de exceção. Um manipulador de exceção poderá lançar uma exceção novamente. Quando um manipulador de exceção gera a exceção novamente, um novo evento de rastreamento de exceção que contém um novo <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs> é gerado para o infra-estrutura de controle de tempo de execução. <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.CurrentActivityPath%2A>refere-se para a atividade que atualmente está lançando a exceção.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="T:System.Exception" /> que está sendo gerada pela instância de fluxo de trabalho.</summary>
        <value>A exceção que está sendo gerada pela instância de fluxo de trabalho.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra um método chamado `WriteExceptionEventArgs`, que captura um <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs>. O código verifica se o <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception%2A> é de propriedade `null` (`Nothing` no Visual Basic). Se não for, o código grava a mensagem associada a <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception%2A> propriedade para o console. Se a exceção é `null` (`Nothing`), o código converte o valor da <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.OriginalActivityPath%2A> propriedade como uma cadeia de caracteres e grava-o para o console.  
  
 Este exemplo de código é parte do EventArgs controle SDK exemplo do arquivo Program.cs. Para obter mais informações, consulte [EventArgs controle exemplo](http://msdn.microsoft.com/en-us/94818da2-c3c4-4a13-b47a-a0fb30dbbf1c).  
  
 [!code-csharp[WF_Samples#289](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#289)]
 [!code-vb[WF_Samples#289](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#289)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalActivityPath">
      <MemberSignature Language="C#" Value="public string OriginalActivityPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalActivityPath" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.OriginalActivityPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> da atividade que originalmente gerou a exceção.</summary>
        <value>O <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> da atividade que originalmente gerou a exceção.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Exceções são passadas a cadeia de atividades do manipulador de exceção. Um manipulador de exceção poderá lançar uma exceção novamente. Quando um manipulador de exceção gera uma exceção novamente, um novo evento de rastreamento de exceção que contém um novo <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs> é gerado para o infra-estrutura de controle de tempo de execução. <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.OriginalActivityPath%2A>refere-se para a atividade que originalmente gerou a exceção.  
  
   
  
## Examples  
 O exemplo de código a seguir demonstra um método chamado `WriteExceptionEventArgs`, que captura um <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs>. O código verifica se o <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception%2A> é de propriedade `null` (`Nothing` no Visual Basic). Se não for, o código grava a mensagem associada a <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception%2A> propriedade para o console. Se <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception%2A> é `null` (`Nothing`), o código converte o valor da <xref:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.OriginalActivityPath%2A> propriedade como uma cadeia de caracteres e grava-o para o console.  
  
 Este exemplo de código é parte do EventArgs controle SDK exemplo do arquivo Program.cs. Para obter mais informações, consulte [EventArgs controle exemplo](http://msdn.microsoft.com/en-us/94818da2-c3c4-4a13-b47a-a0fb30dbbf1c).  
  
 [!code-csharp[WF_Samples#289](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#289)]
 [!code-vb[WF_Samples#289](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#289)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentContextGuid">
      <MemberSignature Language="C#" Value="public Guid ParentContextGuid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ParentContextGuid" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.ParentContextGuid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém a ID do contexto da atividade pai.</summary>
        <value>Um <see cref="T:System.Guid" /> que contém a ID do contexto do pai <see cref="T:System.Workflow.ComponentModel.Activity" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
