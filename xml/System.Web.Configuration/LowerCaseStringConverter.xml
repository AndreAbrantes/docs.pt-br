<Type Name="LowerCaseStringConverter" FullName="System.Web.Configuration.LowerCaseStringConverter">
  <TypeSignature Language="C#" Value="public sealed class LowerCaseStringConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LowerCaseStringConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.LowerCaseStringConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece suporte para converter um objeto em uma cadeia de caracteres em minúsculas. Essa classe não pode ser herdada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Web.Configuration.LowerCaseStringConverter> classe permite que um objeto a ser convertido em uma cadeia de caracteres em minúsculas. Essa classe também fornece suporte para verificar se um tipo de objeto pode ser convertido em uma cadeia de caracteres minúscula antes que a conversão é feita.  
  
 Os métodos de <xref:System.Web.Configuration.LowerCaseStringConverter> levar como um parâmetro de um objeto que implementa o <xref:System.ComponentModel.ITypeDescriptorContext> interface. Essa interface fornece informações contextuais sobre um componente. Normalmente, essa interface é usada em tempo de design para fornecer informações sobre um contêiner de tempo de design. O <xref:System.ComponentModel.ITypeDescriptorContext> é normalmente usada em conversão de tipo.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LowerCaseStringConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.LowerCaseStringConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma instância da classe <see cref="T:System.Web.Configuration.LowerCaseStringConverter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 O exemplo de código a seguir demonstra como usar o <xref:System.Web.Configuration.LowerCaseStringConverter.%23ctor%2A> construtor.  
  
 [!code-csharp[System.Web.Configuration.LowerCaseStringConverter#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/CS/LowerCaseStringConverter.cs#2)]
 [!code-vb[System.Web.Configuration.LowerCaseStringConverter#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/VB/LowerCaseStringConverter.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext ctx, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.LowerCaseStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ctx">Um objeto que implementa a interface do <see cref="T:System.ComponentModel.ITypeDescriptorContext" />.</param>
        <param name="type">O tipo de objeto para converter.</param>
        <summary>Determina se um objeto pode ser convertido em uma cadeia de caracteres minúscula, com base em parâmetros especificados.</summary>
        <returns>
          <see langword="true" />Se os parâmetros de descrevem um objeto que pode ser convertido em um objeto de cadeia de caracteres em minúsculas. Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa um objeto que implementa o <xref:System.ComponentModel.ITypeDescriptorContext> interface como o `ctx` parâmetro. Essa interface fornece informações contextuais sobre um componente. Normalmente, essa interface é usada em tempo de design para fornecer informações sobre um contêiner de tempo de design. O <xref:System.ComponentModel.ITypeDescriptorContext> é normalmente usada em conversão de tipo. Substitua este método em uma classe derivada, se o comportamento personalizado é necessário.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar esse método.  
  
 [!code-csharp[System.Web.Configuration.LowerCaseStringConverter#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/CS/LowerCaseStringConverter.cs#3)]
 [!code-vb[System.Web.Configuration.LowerCaseStringConverter#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/VB/LowerCaseStringConverter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext ctx, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.LowerCaseStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ctx">Um objeto que implementa a interface do <see cref="T:System.ComponentModel.ITypeDescriptorContext" />.</param>
        <param name="type">O tipo de objeto para converter.</param>
        <summary>Determina se um objeto pode ser convertido em uma cadeia de caracteres minúscula, com base em parâmetros especificados.</summary>
        <returns>
          <see langword="true" />Se os parâmetros de descrevem um objeto que pode ser convertido em um objeto de cadeia de caracteres em minúsculas. Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa um objeto que implementa o <xref:System.ComponentModel.ITypeDescriptorContext> interface como o `ctx` parâmetro. Essa interface fornece informações contextuais sobre um componente. Normalmente, essa interface é usada em tempo de design para fornecer informações sobre um contêiner de tempo de design. O <xref:System.ComponentModel.ITypeDescriptorContext> é normalmente usada em conversão de tipo. Substitua este método em uma classe derivada, se o comportamento personalizado é necessário.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar esse método.  
  
 [!code-csharp[System.Web.Configuration.LowerCaseStringConverter#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/CS/LowerCaseStringConverter.cs#4)]
 [!code-vb[System.Web.Configuration.LowerCaseStringConverter#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/VB/LowerCaseStringConverter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Globalization.CultureInfo ci, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.LowerCaseStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ctx">Um objeto que implementa a interface do <see cref="T:System.ComponentModel.ITypeDescriptorContext" />.</param>
        <param name="ci">Um objeto que implementa o <see cref="T:System.Globalization.CultureInfo" /> classe.</param>
        <param name="data">O objeto a ser convertido.</param>
        <summary>Converte um objeto de seu valor original para uma cadeia de caracteres minúscula, com base em parâmetros especificados.</summary>
        <returns>Um objeto de cadeia de caracteres em minúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa um objeto que implementa o <xref:System.ComponentModel.ITypeDescriptorContext> interface como o `ctx` parâmetro. Essa interface fornece informações contextuais sobre um componente. Normalmente, essa interface é usada em tempo de design para fornecer informações sobre um contêiner de tempo de design. O <xref:System.ComponentModel.ITypeDescriptorContext> é normalmente usada em conversão de tipo. O `ci` objeto parameter fornece as informações relacionadas à cultura. O `data` objeto parameter atua como converter o objeto e o objeto resultante quando o método for concluído. Substitua este método em uma classe derivada, se o comportamento personalizado é necessário.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar esse método.  
  
 [!code-csharp[System.Web.Configuration.LowerCaseStringConverter#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/CS/LowerCaseStringConverter.cs#5)]
 [!code-vb[System.Web.Configuration.LowerCaseStringConverter#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/VB/LowerCaseStringConverter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext ctx, System.Globalization.CultureInfo ci, object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Globalization.CultureInfo ci, object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.LowerCaseStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ctx">Um objeto que implementa a interface do <see cref="T:System.ComponentModel.ITypeDescriptorContext" />.</param>
        <param name="ci">Um objeto que implementa o <see cref="T:System.Globalization.CultureInfo" /> classe.</param>
        <param name="value">O objeto a ser convertido.</param>
        <param name="type">O tipo de objeto para converter.</param>
        <summary>Converte um objeto em uma cadeia de caracteres minúscula, com base em parâmetros especificados.</summary>
        <returns>Um objeto de cadeia de caracteres em minúsculas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método usa um objeto que implementa o <xref:System.ComponentModel.ITypeDescriptorContext> interface como o `ctx` parâmetro. Essa interface fornece informações contextuais sobre um componente. Normalmente, essa interface é usada em tempo de design para fornecer informações sobre um contêiner de tempo de design. O <xref:System.ComponentModel.ITypeDescriptorContext> é normalmente usada em conversão de tipo. O `ci` objeto parameter fornece as informações relacionadas à cultura. O `value` objeto atua como o objeto a ser convertido e o objeto resultante quando o método for concluído. Substitua este método em uma classe derivada, se o comportamento personalizado é necessário.  
  
   
  
## Examples  
 O exemplo a seguir demonstra como usar esse método.  
  
 [!code-csharp[System.Web.Configuration.LowerCaseStringConverter#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/CS/LowerCaseStringConverter.cs#6)]
 [!code-vb[System.Web.Configuration.LowerCaseStringConverter#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.LowerCaseStringConverter/VB/LowerCaseStringConverter.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
