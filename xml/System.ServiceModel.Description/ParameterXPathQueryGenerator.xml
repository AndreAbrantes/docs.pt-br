<Type Name="ParameterXPathQueryGenerator" FullName="System.ServiceModel.Description.ParameterXPathQueryGenerator">
  <TypeSignature Language="C#" Value="public static class ParameterXPathQueryGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ParameterXPathQueryGenerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.ParameterXPathQueryGenerator" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permite a criação de um XPath de um contrato de dados.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateFromDataContractSerializer">
      <MemberSignature Language="C#" Value="public static string CreateFromDataContractSerializer (System.Xml.Linq.XName serviceContractName, string operationName, string parameterName, bool isReply, Type type, System.Reflection.MemberInfo[] pathToMember, out System.Xml.XmlNamespaceManager namespaces);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CreateFromDataContractSerializer(class System.Xml.Linq.XName serviceContractName, string operationName, string parameterName, bool isReply, class System.Type type, class System.Reflection.MemberInfo[] pathToMember, [out] class System.Xml.XmlNamespaceManager&amp; namespaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.ParameterXPathQueryGenerator.CreateFromDataContractSerializer(System.Xml.Linq.XName,System.String,System.String,System.Boolean,System.Type,System.Reflection.MemberInfo[],System.Xml.XmlNamespaceManager@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceContractName" Type="System.Xml.Linq.XName" />
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="isReply" Type="System.Boolean" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="pathToMember" Type="System.Reflection.MemberInfo[]" />
        <Parameter Name="namespaces" Type="System.Xml.XmlNamespaceManager&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="serviceContractName">O nome do elemento serviço contrato XML que contém o namespace de contrato de serviço.</param>
        <param name="operationName">O nome da operação de serviço.</param>
        <param name="parameterName">O nome do parâmetro de operação de serviço.</param>
        <param name="isReply">
          <see langword="true" />para indicar que a operação de serviço é uma resposta; Caso contrário, <see langword="false" />.</param>
        <param name="type">O contrato de dados.</param>
        <param name="pathToMember">Os metadados, gerado usando o <see cref="M:System.Type.GetMember(System.String)" /> método o <see cref="T:System.Type" /> classe, que aponta para o membro de dados específico usado para gerado a consulta.</param>
        <param name="namespaces">Quando este método retorna, contém os namespaces XML e seus prefixos encontrados no contrato de dados. Criar uma instância desse parâmetro antes de passá-lo nesse método.</param>
        <summary>Cria um XPath usando o nome da operação especificada, o nome do parâmetro e informações de contrato de dados.</summary>
        <returns>O XPath gerado a partir do nome da operação especificada, o nome do parâmetro e dados informações de contrato.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
