<Type Name="DialogResultConverter" FullName="System.Windows.DialogResultConverter">
  <TypeSignature Language="C#" Value="public class DialogResultConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DialogResultConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DialogResultConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Converte o <see cref="P:System.Windows.Window.DialogResult" /> propriedade, que é um <see cref="T:System.Nullable`1" /> o valor do tipo <see cref="T:System.Boolean" />, para e de outros tipos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="XAMLTextUsage_DialogResultConverter"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DialogResultConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DialogResultConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.DialogResultConverter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DialogResultConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo para converter.</param>
        <summary>
          <see cref="T:System.Windows.DialogResultConverter" />não dá suporte à conversão de outros tipos de <see cref="P:System.Windows.Window.DialogResult" /> (uma <see cref="T:System.Nullable`1" /> o valor do tipo <see cref="T:System.Boolean" />).</summary>
        <returns>Um <see cref="T:System.Boolean" /> que sempre retorna <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DialogResultConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para converter.</param>
        <summary>
          <see cref="T:System.Windows.DialogResultConverter" />não dá suporte à conversão de <see cref="P:System.Windows.Window.DialogResult" /> (uma <see cref="T:System.Nullable`1" /> o valor do tipo <see cref="T:System.Boolean" />) para outros tipos.</summary>
        <returns>Um <see cref="T:System.Boolean" /> que sempre retorna <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Globalization.CultureInfo cultureInfo, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DialogResultConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="cultureInfo">O <see cref="T:System.Globalization.CultureInfo" /> para usar como a cultura atual. Se <see langword="null" /> for passado, atual cultura será assumida.</param>
        <param name="source">O <see cref="T:System.Object" /> a ser convertido.</param>
        <summary>
          <see cref="T:System.Windows.DialogResultConverter" />não dá suporte à conversão de <see cref="P:System.Windows.Window.DialogResult" /> (uma <see cref="T:System.Nullable`1" /> o valor do tipo <see cref="T:System.Boolean" />) para outros tipos.</summary>
        <returns>Sempre gera <see cref="T:System.InvalidOperationException" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.DialogResultConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> é chamado.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, System.Globalization.CultureInfo cultureInfo, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext typeDescriptorContext, class System.Globalization.CultureInfo cultureInfo, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DialogResultConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeDescriptorContext" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeDescriptorContext">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formatação.</param>
        <param name="cultureInfo">O <see cref="T:System.Globalization.CultureInfo" /> para usar como a cultura atual. Se <see langword="null" /> for passado, atual cultura será assumida.</param>
        <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
        <param name="destinationType">O <see cref="T:System.Type" /> para converter o parâmetro de valor.</param>
        <summary>
          <see cref="T:System.Windows.DialogResultConverter" />não dá suporte à conversão de outros tipos de <see cref="P:System.Windows.Window.DialogResult" /> (uma <see cref="T:System.Nullable`1" /> o valor do tipo <see cref="T:System.Boolean" />).</summary>
        <returns>Sempre gera <see cref="T:System.InvalidOperationException" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Windows.DialogResultConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> é chamado.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
