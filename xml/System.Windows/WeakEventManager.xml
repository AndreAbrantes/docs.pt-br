<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece uma classe base para o Gerenciador de evento que é usado no *padrão de evento fraca*. O Gerenciador adiciona e remove os ouvintes de eventos (ou retornos de chamada) que também usam o padrão.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Geralmente, você usa o padrão de evento fraco quando a origem do evento tem um tempo de vida do objeto que é independente dos ouvintes de eventos. Usando a central de eventos expedir a capacidade de um <xref:System.Windows.WeakEventManager> permite manipuladores do ouvinte para serem coletados mesmo se persiste o objeto de origem. Por outro lado, uma conexão de evento regular usando o `+=` operador faz com que a fonte potencialmente desconectada manter uma referência para os ouvintes. Isso impede que o receptor sendo limpos de maneira oportuna.  
  
 Uma situação de comuns em que as relações de tempo de vida entre as origens e os ouvintes devem usar o padrão de evento fraco é a manipulação de eventos de atualização provenientes de associações de dados.  
  
 O padrão de evento fraco também pode ser usado para retornos de chamada de eventos e normais.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Para obter um exemplo de um personalizado <see cref="T:System.Windows.WeakEventManager" />, consulte [fraca padrões de evento](~/docs/framework/wpf/advanced/weak-event-patterns.md).</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa valores de classe de base quando ele é usado como o inicializador pelo construtor de uma classe derivada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">O objeto no qual o evento está sendo tratado.</param>
        <param name="args">Um <see cref="T:System.EventArgs" /> que contém os dados de evento para o evento entregar.</param>
        <summary>Fornece o evento que está sendo gerenciado para cada ouvinte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar o <xref:System.Windows.WeakEventManager.DeliverEvent%2A> método de dentro de manipuladores de eventos que são adicionados ou removidos pelo <xref:System.Windows.WeakEventManager.StartListening%2A> e <xref:System.Windows.WeakEventManager.StopListening%2A> implementações das subclasses.  
  
 Se você chamar o <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> método no seu `AddListener` implementação de sua classe, a lista de ouvintes de receber o evento é mantida em uma coleção subjacente. (`AddListener` não faz parte de um contrato de interface ou classe. `AddListener`é o nome sugerido para o método da classe do Gerenciador que chama <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> e adiciona ouvintes de padrão de evento fraco para o evento.)  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>adiciona ouvintes para uma única lista. Se sua implementação manager mantém mais de uma lista de ouvintes por evento, não use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> ou <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>. Em vez disso, sua implementação deve criar seu próprio <xref:System.Windows.WeakEventManager.ListenerList> instâncias, `AddListener` devem adicionar ouvintes à lista apropriada e eventos devem ser entregue para a lista de escuta apropriado chamando <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender">O objeto no qual o evento está sendo tratado.</param>
        <param name="args">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
        <param name="list">Fornecido <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</param>
        <summary>Fornece o evento que está sendo gerenciado para cada ouvinte na lista fornecida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esse método é necessário se sua implementação manager mantém listas de ouvintes separadas com base nas informações que são capturadas nos dados do evento. Se você usar essa técnica avançada, você deve criar e manter listas separadas como parte da implementação de Gerenciador, e você deve fornecer uma maneira de adicionar ouvintes a uma lista específica. A implementação do seu manipulador que escuta o evento bruto deve agir sobre a condição que você use para diferenciar as listas e entregar o evento somente para a lista apropriada ou listas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType">O tipo para obter o <see cref="T:System.Windows.WeakEventManager" /> para.</param>
        <summary>Retorna o <see cref="T:System.Windows.WeakEventManager" /> implementação que é usada para o tipo fornecido.</summary>
        <returns>A correspondência <see cref="T:System.Windows.WeakEventManager" /> implementação.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>implementações de chamar este método usando seus passado `managerType`. Retornado <xref:System.Windows.WeakEventManager> é usado como o diferencial que determina qual evento foi recebido e o manipulador da classe privada para invocar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">O índice baseado em zero da origem solicitada.</param>
        <summary>Obtém ou define os dados que estão sendo armazenados para a origem especificada.</summary>
        <value>Dados armazenados pelo Gerenciador de para essa fonte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Classes derivadas podem escolher quais dados e o tipo para armazenar neste indexador. Normalmente isso é implementado como um <xref:System.Windows.WeakEventManager.ListenerList>, que é uma lista de referências fracas para ouvintes. Você só precisa alterar esse tipo se o <xref:System.Windows.WeakEventManager.ListenerList> tipo não pode conter as informações necessárias. Se assim, você precisará substituir o <xref:System.Windows.WeakEventManager.Purge%2A> método para que todos os limpeza do tipo subjacente é executada corretamente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retorna um novo objeto para conter ouvintes para um evento.</summary>
        <returns>Um novo objeto para conter ouvintes para um evento.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">O objeto de origem que assina o representante do manipulador.</param>
        <param name="handler">O representante que manipula o evento que é gerado pelo <c>fonte</c>.</param>
        <summary>Adiciona o delegado especificado como um manipulador de eventos de origem especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">A fonte para anexar ouvintes para.</param>
        <param name="listener">A classe de escuta (que deve implementar <see cref="T:System.Windows.IWeakEventListener" />).</param>
        <summary>Adiciona o ouvinte fornecido para a fonte fornecida para o evento que está sendo gerenciado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame este método em sua classe manager `AddListener` métodos em <xref:System.Windows.WeakEventManager> implementações. `AddListener`é o nome sugerido para o método estático que você define em sua classe manager para habilitar outras classes adicionar um ouvinte para seu padrão de evento fraco. `AddListener`deve ter dois parâmetros: o `source` onde o ouvinte está anexado e o `listener` instância. Para o `AddListener` implementação, chame o <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> método no Gerenciador de atual e passe os mesmos dois parâmetros.  
  
 Se a lista de ouvintes era anteriormente vazia, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> chama o <xref:System.Windows.WeakEventManager.StartListening%2A> método internamente, que chamará específicos <xref:System.Windows.WeakEventManager.StartListening%2A> substituir por meio de polimorfismo.  
  
 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>adiciona ouvintes para um único interno <xref:System.Windows.WeakEventManager.ListenerList> por `source`. Se sua implementação manager mantém mais de uma lista de ouvintes para cada combinação de origem do evento, não use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>. Em vez disso, sua implementação deve criar seu próprio <xref:System.Windows.WeakEventManager.ListenerList> instâncias, `AddListener` devem adicionar ouvintes à lista apropriada e eventos devem ser entregue para a lista de escuta apropriado ao chamar o <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> eventos em vez do <xref:System.Windows.WeakEventManager.DeliverEvent%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="source">A origem para remover o manipulador de.</param>
        <param name="handler">O representante para remover do <c>fonte</c>.</param>
        <summary>Remove o manipulador anteriormente adicionado da fonte especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source">A fonte de remover os ouvintes de.</param>
        <param name="listener">A classe de escuta (que deve implementar <see cref="T:System.Windows.IWeakEventListener" />).</param>
        <summary>Remove um ouvinte adicionado anteriormente da origem fornecida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chame este método em sua classe manager `RemoveListener` métodos em <xref:System.Windows.WeakEventManager> implementações. `RemoveListener`é o nome sugerido para o método estático que você define em sua classe manager para habilitar outras classes remover um ouvinte para seu padrão de evento fraco. `RemoveListener`deve ter dois parâmetros: o `source` onde o ouvinte é removido e o `listener` classe. Para o `RemoveListener` implementação, chame o <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> método no Gerenciador de atual e passe os mesmos dois parâmetros.  
  
 Se uma chamada para <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> remove o último ouvinte na lista, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> chama o <xref:System.Windows.WeakEventManager.StopListening%2A> método internamente, que chamará específicos <xref:System.Windows.WeakEventManager.StopListening%2A> substituir por meio de polimorfismo.  
  
 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>Remove os ouvintes de um único interno <xref:System.Windows.WeakEventManager.ListenerList> por `source`. Se sua implementação manager mantém mais de uma lista de ouvintes para cada combinação de origem do evento, não use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>. Em vez disso, sua implementação deve criar seu próprio <xref:System.Windows.WeakEventManager.ListenerList> instâncias, `RemoveListener` devem remover ouvintes da lista apropriada e eventos devem ser entregue para a lista de escuta apropriado chamando o <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> método em vez do <xref:System.Windows.WeakEventManager.DeliverEvent%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">A origem de eventos que estão sendo atendidas para.</param>
        <param name="data">Os dados para verificar. Este objeto deve ser um <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementação.</param>
        <param name="purgeAll">
          <see langword="true" />Para interromper a escuta <c>fonte</c>e remover completamente todas as entradas de <c>dados</c>.</param>
        <summary>Remove entradas do ouvinte inativo a lista de dados para a fonte fornecida. Retorna <see langword="true" /> se algumas entradas realmente foram removidas da lista.</summary>
        <returns>
          <see langword="true" />Se algumas entradas foram removidas, na verdade, Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Windows.WeakEventManager.Purge%2A> método tem uma implementação padrão que removerá todas as entradas quando os dados são um <xref:System.Windows.WeakEventManager.ListenerList>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Se o tipo subjacente para o <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> for algo diferente de <see cref="T:System.Windows.WeakEventManager.ListenerList" />, ou contém dados com mais de um <see cref="T:System.Windows.WeakEventManager.ListenerList" />, você deve substituir o <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> método. A substituição deve fornecer o comportamento de limpeza para a lista de itens do tipo alternativo. Em geral, a substituição deve fornecer comportamento sem chamar a implementação base. Se um determinado <see cref="T:System.Windows.WeakEventManager.ListenerList" /> ainda precisa de limpeza, chamada <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estabelece um bloqueio de leitura na tabela de dados subjacente e retorna um <see cref="T:System.IDisposable" />.</summary>
        <value>Um objeto que pode ser usado para estabelecer um bloqueio em membros de dados de tabela e, em seguida, ser descartados adequadamente com um <see langword="using" /> construir.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em classes derivadas, consultas à tabela contida no <xref:System.Windows.WeakEventManager.Item%2A> sempre devem ocorrer dentro de um `using (ReadLock) { ... }` cláusula, exceto para consultas que já estão em um bloqueio de gravação. Essas consultas poderão ser necessárias se sua classe oferece suporte a mais sofisticadas `AddListener` implementação que requer mais dados, além de `source` e o `listener`e usa o <xref:System.Windows.WeakEventManager.Item%2A> coleção para armazenar as informações adicionais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A origem para remover informações de ouvinte.</param>
        <summary>Remove todos os ouvintes para a origem especificada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Solicita que uma limpeza de entradas não utilizadas na lista subjacente do ouvinte ser executada em um thread de prioridade mais baixo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamando o <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> método é semelhante a chamar o <xref:System.Windows.WeakEventManager.Purge%2A> método na lista do gerente, a prioridade de thread inferior, com o `purgeAll` parâmetro definido como `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType">O tipo para definir o novo Gerenciador de eventos.</param>
        <param name="manager">O novo Gerenciador de eventos.</param>
        <summary>Define o Gerenciador atual para o tipo de Gerenciador especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Chamar o <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> método para inicializar um gerente, caso esse seja exigido por uma chamada para o `CurrentManager` propriedade em um <xref:System.Windows.WeakEventManager> implementação.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A origem para iniciar a escuta.</param>
        <summary>Quando substituído em uma classe derivada, inicia a escuta para o evento que está sendo gerenciado. Após o <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> método é chamado pela primeira vez, o Gerenciador de deve estar no estado de chamada <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> ou <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> sempre que o evento relevante da fonte de fornecido é tratado.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />substituições devem adicionar um manipulador para fornecido <paramref name="source" />. O manipulador é declarado pelo Gerenciador de propriamente dito. O manipulador de classe não deve ser público e só deve ser chamado em resposta ao evento que está sendo gerenciado. O manipulador da classe deve chamar o <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> método ou o <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> método adequadamente.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">A fonte para parar a escuta.</param>
        <summary>Quando substituído em uma classe derivada, para de escutar na fonte de fornecido para o evento que está sendo gerenciado.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" />implementações devem remover o manipulador da classe adicionando o <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> método. Remover um ouvinte não deve limpar a lista de escuta. Em vez disso, ele só deve desconectar o manipulador da classe (talvez temporariamente). Outros métodos estão disponíveis para limpar a lista completa, como o <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> método com o <paramref name="purgeAll" /> parâmetro definido como <see langword="true" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estabelece um bloqueio de gravação na tabela de dados subjacente e retorna um <see cref="T:System.IDisposable" />.</summary>
        <value>Um objeto que pode ser usado para estabelecer um bloqueio em membros de dados de tabela e, em seguida, ser descartados adequadamente com um <see langword="using" /> construir.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em classes derivadas, todas as modificações na tabela de dados subjacente devem ocorrer dentro de um `using (WriteLock) { ... }` cláusula. Essas modificações podem ser necessárias se a sua classe oferece suporte a mais sofisticadas `AddListener` implementação que requer mais dados, além de `source` e o `listener`e usa o <xref:System.Windows.WeakEventManager.Item%2A> coleção para armazenar as informações adicionais.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
