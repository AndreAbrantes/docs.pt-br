<Type Name="NameReferenceConverter" FullName="System.Windows.Markup.NameReferenceConverter">
  <TypeSignature Language="C#" Value="public class NameReferenceConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NameReferenceConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.NameReferenceConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece conversão de tipo para converter um nome de cadeia de caracteres em uma referência de objeto para o objeto com esse nome, ou para retornar o nome de um objeto de gráfico do objeto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa classe fornece um wrapper de conversor de tipo em torno de dois serviços.  
  
 O <xref:System.Windows.Markup.NameReferenceConverter.ConvertFrom%2A> implementação usa <xref:System.Xaml.IXamlNameResolver> serviço de contexto para executar a resolução de um objeto pelo nome em XAML. Isso faz parte do leitor XAML relevante e implementações de gravador XAML em serviços XAML do .NET Framework. Funcionamento adequado deste conversor requer que o <xref:System.Xaml.IXamlNameResolver> serviço está disponível no contexto do serviço.  
  
 O <xref:System.Windows.Markup.NameReferenceConverter.ConvertTo%2A> implementação usa <xref:System.Xaml.IXamlNameProvider> serviço de contexto para executar a resolução de um nome de referência para um objeto durante a serialização/salvar. Isso faz parte de seu contexto e as implementações de leitor e gravador relevantes. Funcionamento adequado deste conversor requer que haja uma subjacente <xref:System.Xaml.IXamlNameProvider> serviço disponível.  
  
 Essa implementação de conversor de tipo é atípico para o <xref:System.ComponentModel.TypeConverter> tipo de base porque não está no escopo para um tipo de conversão distinta. Ele potencialmente pode converter qualquer objeto em um nome de referência desde que esse objeto pode ter um nome atribuído a ele em XAML e o contexto de suporte tem os serviços necessários para retornar resultados.  
  
 Como parte do suporte dos serviços gerais, o System. XAML base implementação de <xref:System.Xaml.XamlObjectWriter> e <xref:System.Xaml.XamlXmlWriter> fornecer <xref:System.Xaml.IXamlNameProvider> e <xref:System.Xaml.IXamlNameResolver> serviços para uso por <xref:System.Windows.Markup.NameReferenceConverter>. A base de nome para esses serviços usa o `x:Name` ou um <xref:System.Windows.Markup.RuntimeNamePropertyAttribute> atribuído a propriedade de alias.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NameReferenceConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.NameReferenceConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.Windows.Markup.NameReferenceConverter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
        <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
        <summary>Retorna se este conversor pode converter um objeto de um tipo em outro objeto.</summary>
        <returns>
          <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa implementação pode processar apenas uma `sourceType` de <xref:System.String>. Outros tipos de retorno `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
        <param name="destinationType">O tipo para o qual converter.</param>
        <summary>Retorna um valor que indica se o conversor pode converter um objeto para o tipo de destino especificado.</summary>
        <returns>
          <see langword="true" />Se o conversor pode realizar a conversão; Caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um `destinationType` que faz referência a <xref:System.String> digite retorna `true`; todos os outros `destinationType` valores de retorno `false`.  
  
 Esse método retornará false se `context` é `null`, ou se <xref:System.Xaml.IXamlNameProvider> não podem ser obtidos como um serviço de `context`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
        <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> para usar como a cultura atual.</param>
        <param name="value">A cadeia de nome de referência para converter.</param>
        <summary>Converte o objeto fornecido a outro objeto, usando as informações de contexto e a cultura especificadas.</summary>
        <returns>O objeto retornado, que é potencialmente qualquer objeto que é capaz de ser declarada em XAML com uma referência de nome XAML e tipo mapeado nos assemblies do backup relevante.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Somente um <xref:System.String> entrada fornece um resultado da conversão.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="value" />é uma cadeia de caracteres nula ou uma cadeia de caracteres vazia.  
  
 -ou-  
  
 <see cref="T:System.Xaml.IXamlNameResolver" />serviço está ausente ou é inválido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="context" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
        <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> para usar como a cultura atual.</param>
        <param name="value">O objeto para recuperar o nome de referência.</param>
        <param name="destinationType">O tipo de retorno. Você sempre deve fazer referência a <see cref="T:System.String" /> tipo.</param>
        <summary>Converte um objeto no tipo especificado. Isso serve para retornar nomes de referência XAML para objetos em um gráfico de objeto.</summary>
        <returns>O nome de referência da entrada <paramref name="value" /> objeto.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xaml.IXamlNameProvider" />serviço está ausente ou é inválido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="context" /> é <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
