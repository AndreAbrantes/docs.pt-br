<Type Name="ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback" FullName="System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;+CreateValueCallback">
  <TypeSignature Language="C#" Value="public delegate TValue ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback(TKey key) where TKey : class where TValue : class;" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed ConditionalWeakTable`2/CreateValueCallback&lt;class TKey, class TValue&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="key" Type="TKey" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TValue</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="key">A chave que pertence ao valor para criar.</param>
    <summary>Representa um método que cria um valor não padrão para adicionar como parte de um par chave/valor para um <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> objeto.</summary>
    <returns>Uma instância de um tipo de referência que representa o valor para anexar à chave especificada.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> delegado encapsula um método de retorno de chamada é invocado pelo <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A?displayProperty=nameWithType> método quando a chave passada para o método não é encontrado no <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> objeto. O <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> método passa o método de retorno de chamada a chave que representa um objeto gerenciado no qual um valor de propriedade será anexada dinamicamente. O método é responsável por retornar o valor da propriedade ao chamador, que, por sua vez, adiciona o par chave/valor para a tabela.  
  
 O <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> método é usado para retornar uma instância de um tipo de referência que pode ser anexado à chave especificada. Ele permite que essa instância a ser inicializado usando valores não padrão. Se a chave não for encontrada na tabela, o <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A?displayProperty=nameWithType> método adiciona um par chave/valor no qual o valor é iniciado usando valores padrão.  
  
   
  
## Examples  
 O exemplo a seguir define uma `MainClass` classe e um `MainInfo` classe. `MainInfo`Fornece informações sobre o `MainClass` instância. Também define um static (`Shared` no Visual Basic) `CreateAttachedValue` método que pode ser atribuído ao <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> delegar e passados para o <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> método. O exemplo chama o <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> método para adicionar um `MainClass` objeto e correspondente `MainInfo` o objeto para um <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> tabela. O exemplo também ilustra chamadas para o <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> e <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> métodos para adicionar pares chave/valor para a tabela e uma chamada para o <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> método para recuperar o valor que pertence a uma chave existente.  
  
 [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
