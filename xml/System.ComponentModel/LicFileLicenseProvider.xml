<Type Name="LicFileLicenseProvider" FullName="System.ComponentModel.LicFileLicenseProvider">
  <TypeSignature Language="C#" Value="public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LicFileLicenseProvider extends System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicFileLicenseProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.LicenseProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fornece uma implementação de um <see cref="T:System.ComponentModel.LicenseProvider" />. O provedor funciona de maneira semelhante ao modelo de licenciamento padrão do Microsoft .NET Framework.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 O <xref:System.ComponentModel.LicFileLicenseProvider> oferece <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> e <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> métodos. O <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> método determina se o <xref:System.ComponentModel.License.LicenseKey%2A> recuperados pelo <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> método é válido. Quando você herda desta classe, você pode substituir o <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> método para fornecer sua própria lógica de validação.  
  
 Esta classe existe para fornecer funcionalidade semelhante de licenciamento para o licenciamento COM e usa os arquivos de licença do texto.  
  
 Para obter mais informações sobre licenciamento, consulte [como: controles e componentes de licença](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).  
  
   
  
## Examples  
 O exemplo a seguir cria um controle licenciado usando o <xref:System.ComponentModel.LicenseManager.Validate%2A> método. Ele usa <xref:System.ComponentModel.LicFileLicenseProvider> para o Gerenciador de licenças.  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LicFileLicenseProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="protected virtual string GetKey (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetKey(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">O tipo de objeto para retornar a chave.</param>
        <summary>Retorna uma chave para o tipo especificado.</summary>
        <returns>Uma confirmação de que o <paramref name="type" /> parâmetro é licenciado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLicense">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.License GetLicense(class System.ComponentModel.LicenseContext context, class System.Type type, object instance, bool allowExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="allowExceptions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica onde você pode usar o objeto licenciado.</param>
        <param name="type">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</param>
        <param name="instance">Um objeto que solicita a <see cref="T:System.ComponentModel.License" />.</param>
        <param name="allowExceptions">
          <see langword="true" />Se um <see cref="T:System.ComponentModel.LicenseException" /> deve ser gerada quando um componente não é possível conceder uma licença; caso contrário, <see langword="false" />.</param>
        <summary>Retorna uma licença para a instância do componente, se houver um disponível.</summary>
        <returns>Uma opção válida <see cref="T:System.ComponentModel.License" />. Se esse método não é possível localizar um válido <see cref="T:System.ComponentModel.License" /> ou válido <paramref name="context" /> , ele retornará <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Em tempo de design, o <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> método procura um arquivo de licença chamado `myClassName.LIC`, onde `myClassName` é o <xref:System.Type.FullName%2A> de componente a ser criado. Esse arquivo deve estar no mesmo diretório que o arquivo. dll que contém o componente.  
  
 Em seguida, esse método verifica se a primeira linha do arquivo de licença em relação a uma chave especificada no <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> método. Se a chave for válida, essa linha é usada como o <xref:System.ComponentModel.License.LicenseKey%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyValid">
      <MemberSignature Language="C#" Value="protected virtual bool IsKeyValid (string key, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsKeyValid(string key, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="key">O <see cref="P:System.ComponentModel.License.LicenseKey" /> a ser verificado.</param>
        <param name="type">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</param>
        <summary>Determina se a chave que o <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> recupera do método é válido para o tipo especificado.</summary>
        <returns>
          <see langword="true" />Se a chave for válida <see cref="P:System.ComponentModel.License.LicenseKey" /> para o tipo especificado; caso contrário, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método verifica a chave em relação a frase: " `myClassName is a licensed component.` ", onde `myClassName` é o <xref:System.Type.FullName%2A> do componente que você deseja criar.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Quando você herda desta classe, você pode substituir esse método para fornecer sua própria lógica de validação.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
