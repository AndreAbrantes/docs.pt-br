<Type Name="HashSet&lt;T&gt;+Enumerator" FullName="System.Collections.Generic.HashSet&lt;T&gt;+Enumerator">
  <TypeSignature Language="C#" Value="public struct HashSet&lt;T&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi serializable sealed beforefieldinit HashSet`1/Enumerator&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.HashSet`1.Enumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Enumera os elementos de um objeto <see cref="T:System.Collections.Generic.HashSet`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A instrução `foreach` da linguagem C# (`for each` em C++, `For Each` no Visual Basic) oculta a complexidade de enumeradores. Portanto, o uso de `foreach` é recomendado, em vez de manipular diretamente o enumerador.  
  
 Os enumeradores podem ser usados para ler os dados na coleção, mas não podem ser usados para modificar a coleção subjacente.  
  
 Inicialmente, o enumerador é posicionado antes do primeiro elemento da coleção. Nesta posição, o <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> propriedade está definida. Por isso, você deve chamar o método <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> para avançar o enumerador até o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A>.  
  
 <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A>Retorna o mesmo objeto até <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> é chamado. <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> define <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> como o próximo elemento.  
  
 Caso <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> retorna `false`. Quando o enumerador está nessa posição, as chamadas subsequentes para <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> também retornam `false`. Caso a última chamada para <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> tenha retornado `false`, <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> está indefinido. Não é possível definir <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> para o primeiro elemento da coleção novamente, você deve criar um novo objeto de enumerador em vez disso.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações na coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado de maneira irrevogável e seu comportamento permanecerá indefinido.  
  
 O enumerador não tem acesso exclusivo à coleção; por isso, a enumeração por meio de uma coleção não é um procedimento thread-safe intrínseco. Para garantir acesso thread-safe durante a enumeração, é possível bloquear a coleção durante toda a enumeração.  Para permitir que a coleção a ser acessado por vários threads para leitura e gravação, você deve implementar sua sincronização.  
  
 As implementações padrão de coleções no namespace <xref:System.Collections.Generic?displayProperty=nameWithType> não são sincronizadas.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.HashSet`1.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o elemento na posição atual do enumerador.</summary>
        <value>O elemento de <see cref="T:System.Collections.Generic.HashSet`1" /> coleção na posição atual do enumerador.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A>o não está definida em qualquer uma das seguintes condições:  
  
-   O enumerador está posicionado antes do primeiro elemento na coleção imediatamente depois que o enumerador é criado. O <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> método deve ser chamado para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor de <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A>.  
  
-   A última chamada a <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> retornou `false`, que indica o final da coleção.  
  
 <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A>Retorna o mesmo objeto até <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> é chamado. <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> define <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> como o próximo elemento. Se a lista for modificada entre chamar <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> método e obter o conteúdo do <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> propriedade <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> retorna o elemento que está definido como, mesmo que o enumerador é invalidado.  
  
> [!NOTE]
>  Para obter melhor desempenho, essa propriedade não lançar uma exceção se o enumerador está posicionado antes do primeiro elemento ou depois do último elemento. O valor da propriedade é indefinido. Para obter uma exceção em vez disso, converta o <xref:System.Collections.Generic.HashSet%601.Enumerator> para o <xref:System.Collections.IEnumerator?displayProperty=nameWithType> interface antes de usá-lo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos os recursos usados por um <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> objeto.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Avança o enumerador para o próximo elemento do <see cref="T:System.Collections.Generic.HashSet`1" /> coleção.</summary>
        <returns>
          <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da coleção.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Depois que um enumerador é criado, o enumerador está posicionado antes do primeiro elemento na coleção e a primeira chamada para o <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> método avança o enumerador para o primeiro elemento da coleção.  
  
 Caso <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> passe o final da coleção, o enumerador é posicionado após o último elemento na coleção e <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> retorna `false`. Quando o enumerador está nessa posição, as chamadas subsequentes para <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> também retornam `false`.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtém o elemento na posição atual do enumerador.</summary>
        <value>O elemento da coleção na posição atual do enumerador, como um <see cref="T:System.Object" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Após a criação de um enumerador ou depois do <xref:System.Collections.IEnumerator.Reset%2A> método é chamado, o <xref:System.Collections.IEnumerator.MoveNext%2A> método deve ser chamado para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor da <xref:System.Collections.IEnumerator.Current%2A> propriedade; caso contrário, <xref:System.Collections.IEnumerator.Current%2A> é indefinido.  
  
 <xref:System.Collections.IEnumerator.Current%2A>também gera uma exceção se a última chamada <xref:System.Collections.IEnumerator.MoveNext%2A> retornou `false`, que indica o final da coleção.  
  
 <xref:System.Collections.IEnumerator.Current%2A>não move a posição do enumerador e chamadas consecutivas para <xref:System.Collections.IEnumerator.Current%2A> retornar o mesmo objeto até que o <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> é chamado.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações na coleção, como adicionar, modificar, ou excluir elementos, o enumerador é invalidado invalidado e a próxima chamada para <xref:System.Collections.IEnumerator.MoveNext%2A> ou <xref:System.Collections.IEnumerator.Reset%2A> lança um <xref:System.InvalidOperationException>. Se a coleção é modificada entre chamada <xref:System.Collections.IEnumerator.MoveNext%2A> método e obter o valor da <xref:System.Collections.IEnumerator.Current%2A> propriedade <xref:System.Collections.IEnumerator.Current%2A> retorna o elemento que está definido como, mesmo se o enumerador já é invalidado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">O enumerador é posicionado antes do primeiro elemento da coleção ou depois do último elemento.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da coleção.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Depois de chamar <xref:System.Collections.Generic.HashSet%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>, você deve chamar o <xref:System.Collections.Generic.HashSet%601.Enumerator.MoveNext%2A> método para avançar o enumerador para o primeiro elemento da coleção antes de ler o valor da <xref:System.Collections.Generic.HashSet%601.Enumerator.Current%2A> propriedade.  
  
 Um enumerador permanece válido desde que a coleção continue inalterada. Se forem feitas alterações à coleção, como adicionar, modificar ou excluir elementos, o enumerador será invalidado irrecuperavelmente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">A coleção foi modificada depois da criação do enumerador.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
