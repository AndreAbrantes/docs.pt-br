<Type Name="IComparer&lt;T&gt;" FullName="System.Collections.Generic.IComparer&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IComparer&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparer`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IComparer`1" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">O tipo de objetos a serem comparados.</typeparam>
    <summary>Define um método que um tipo implementa para comparar dois objetos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Essa interface é usada com a <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType> e <xref:System.Collections.Generic.List%601.BinarySearch%2A?displayProperty=nameWithType> métodos. Ele fornece uma maneira de personalizar a ordem de classificação de uma coleção. Classes que implementam esta interface incluem o <xref:System.Collections.Generic.SortedDictionary%602> e <xref:System.Collections.Generic.SortedList%602> classes genéricas.  
  
 A implementação padrão dessa interface é a <xref:System.Collections.Generic.Comparer%601> classe. O <xref:System.StringComparer> classe implementa essa interface para o tipo <xref:System.String>.  
  
 Esta interface dá suporte a comparações de ordenação. Ou seja, quando o <xref:System.Collections.Generic.Comparer%601.Compare%2A> método retornará 0, o que significa que dois objetos Classificar os mesmos. Implementação de comparações de igualdade exata é fornecida pelo <xref:System.Collections.Generic.IEqualityComparer%601> interface genérica.  
  
 É recomendável que você derivar do <xref:System.Collections.Generic.Comparer%601> classe em vez de implementar o <xref:System.Collections.Generic.IComparer%601> interface, pois o <xref:System.Collections.Generic.Comparer%601> classe fornece uma implementação de interface explícita do <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> método e o <xref:System.Collections.Generic.Comparer%601.Default%2A> propriedade que obtém o comparador padrão para o objeto.  
  
   
  
## Examples  
 O exemplo a seguir implementa a <xref:System.Collections.Generic.IComparer%601> interface para comparar objetos do tipo `Box` acordo com suas dimensões. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#7)]
 [!code-vb[System.Collections.Generic.BoxCompare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#7)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">O primeiro objeto a ser comparado.</param>
        <param name="y">O segundo objeto a ser comparado.</param>
        <summary>Compara dois objetos e retorna um valor que indica se um é menor, igual ou maior do que o outro.</summary>
        <returns>Um inteiro assinado que indica os valores relativos de <paramref name="x" /> e <paramref name="y" />, conforme mostrado na tabela a seguir.  
  
 <list type="table"><listheader><term>Valor  
  
 </term><description>Significado  
  
 </description></listheader><item><term>Menor que zero  
  
 </term><description><paramref name="x" />é menor que <paramref name="y" />.  
  
 </description></item><item><term>Zero  
  
 </term><description><paramref name="x" />é igual a <paramref name="y" />.  
  
 </description></item><item><term>Maior que zero  
  
 </term><description><paramref name="x" />é maior do que <paramref name="y" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementar esse método para fornecer um personalizado comparação de ordem para o tipo de classificação `T`.  
  
 Comparando `null` com qualquer referência de tipo é permitido e não gerará uma exceção. Uma referência nula é considerada para ser menor do que qualquer referência que não seja nula.  
  
   
  
## Examples  
 O exemplo a seguir implementa a <xref:System.Collections.Generic.IComparer%601> interface para comparar objetos do tipo `Box` acordo com suas dimensões. Este exemplo é parte de um exemplo maior fornecido para a <xref:System.Collections.Generic.Comparer%601> classe.  
  
 [!code-csharp[System.Collections.Generic.BoxCompare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#7)]
 [!code-vb[System.Collections.Generic.BoxCompare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
