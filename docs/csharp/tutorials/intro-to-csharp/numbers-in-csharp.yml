### YamlMime:Tutorial
title: Manipular números de ponto flutuante e integrais em C#
metadata:
  title: Os números em C# – Tutorial de introdução ao C# Interativo
  description: Neste tutorial sobre tipos numéricos, você usará seu navegador para aprender C# interativamente. Você escreverá o código em C# e verá os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Loops e branches em C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 5ea939172b35e4380ed3f32d7d06b5749d2005a0
  ms.sourcegitcommit: dfd612ba454ce775a766bcc6fe93bc1d43dfda47
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 10/09/2019
  ms.locfileid: "72179869"
items:
- durationInMinutes: 1
  content: >
    Este tutorial ensina de forma interativa sobre os tipos numéricos em C#, usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código. Ele contém uma série de lições que exploram números e operações matemáticas em C#. Estas lições ensinam os princípios básicos da linguagem C#.
- title: Explorar a matemática de inteiros
  durationInMinutes: 4
  content: >
    Execute o seguinte código na janela interativa. Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Se você estiver executando isso em seu ambiente, deverá seguir as instruções para a [versão local](numbers-in-csharp-local.md) em vez disso.


    Você viu apenas uma das operações matemáticas fundamentais com números inteiros. O tipo `int` representa um **inteiro**, um número inteiro positivo ou negativo. Você usa o símbolo `+` para adição. Outras operações matemáticas comuns para inteiros incluem:


    - `-` para subtração

    - `*` para multiplicação

    - `/` para divisão


    > [!TIP]

    > Explorar por conta própria todo o tutorial interativo, modificando o código que você escreveu na janela interativa. Este tutorial fornece exemplos para teste a cada etapa.


    Comece explorando essas diferentes operações. Modifique a terceira linha para testar cada uma dessas operações. Após cada edição, clique no botão **Executar**.


    Subtração:


    ```csharp

    int c = a - b;

    ```


    Multiplicação:


    ```csharp

    int c = a * b;

    ```


    Divisão:


    ```csharp

    int c = a / b;

    ```


    Você também pode experimentar, executando várias operações matemáticas na mesma linha, se quiser.


    > [!TIP]

    > À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.

    > Esse exercício ajudará você a conhecer a estrutura do código C#.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- title: Explorar a ordem das operações
  durationInMinutes: 7
  content: >
    A linguagem C# define a precedência de operações matemáticas diferentes com regras consistentes às regras que você aprendeu em matemática.

    Multiplicação e divisão têm precedência sobre adição e subtração.

    Explore executando o seguinte código na janela interativa:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    A saída demonstra que a multiplicação é executada antes da adição.


    Você pode forçar uma ordem diferente de operações, adicionando parênteses para delimitar a operação, ou operações, que você quer realizar primeiro:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Explore mais, combinando várias operações diferentes. Substitua a quarta linha acima por algo parecido com isto:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Talvez você tenha observado um comportamento interessante com relação aos números inteiros. A divisão de inteiros sempre produz um resultado inteiro, mesmo quando você espera que o resultado inclua uma parte decimal ou fracionária.


    Se você ainda não viu esse comportamento, tente o seguinte:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    Clique em **Executar** novamente para ver os resultados.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- title: Explorar a precisão de inteiros e limites
  durationInMinutes: 5
  content: >
    Esse último exemplo mostrou que uma divisão de inteiros trunca o resultado.

    Você pode obter o **restante** usando o operador **module**, o caractere `%`:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    O tipo de inteiro C# difere do inteiros matemáticos de outra forma: o tipo `int` tem limites mínimo e máximo. Execute este código na janela interativa para ver esses limites:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Se um cálculo produzir um valor que excede esses limites, você terá uma condição de **estouro negativo** ou **estouro**. A resposta parece quebrar de um limite para o outro. Adicione estas duas linhas à janela interativa para ver um exemplo:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Observe que a resposta é muito próxima do mínimo inteiro (negativo). É o mesmo que `min + 2`.

    A operação de adição **estourou** os valores permitidos para números inteiros.

    A resposta é um número negativo muito grande, pois um estouro "envolve" do maior valor de inteiro possível para o menor.


    Há outros tipos numéricos com limites e precisão diferentes que você usaria quando o tipo `int` não atendesse às suas necessidades. Vamos explorá-los na sequência.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- title: Trabalhar com o tipo Double
  durationInMinutes: 5
  content: >
    O tipo numérico `double` representa um número de ponto flutuante de precisão dupla. Esses termos podem ser novidade para você. Um número de **ponto flutuante** é útil para representar números não integrais que podem ser muito grandes ou pequenos em magnitude. **Precisão dupla** significa que esses números são armazenados usando uma precisão maior do que a **precisão única**. Em computadores modernos, é mais comum usar precisão dupla que números de precisão única.

    Vamos explorar. Experimente o seguinte código na janela interativa e veja o resultado:


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    Observe que a resposta inclui a parte decimal do quociente. Experimente uma expressão ligeiramente mais complicada com duplos:


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    O intervalo de um valor duplo é muito maior do que valores inteiros. Experimente o seguinte código na janela interativa:


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Esses valores são impressos em notação científica. O número à esquerda do `E` é o significando. O número à direita é o expoente, como uma potência de 10.


    Assim como os números decimais em matemática, os duplos em C# podem ter erros de arredondamento. Experimente esse código:


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    Você sabe que a repetição de `0.3` não é exatamente o mesmo que `1/3`.


    ***Desafio***


    Experimente outros cálculos com números grandes, números pequenos, multiplicação e divisão usando o tipo `double`.  Experimente cálculos mais complicados.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- title: Trabalhar com tipos de ponto fixo
  durationInMinutes: 8
  content: >
    Você viu os tipos numéricos básicos em C#: inteiros e duplos.  Ainda há outro tipo : o tipo `decimal`. O tipo `decimal` tem um intervalo menor, mas precisão maior do que `double`. O termo **ponto fixo** significa que a virgula decimal (ou ponto binário) não muda. Vamos analisar:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Observe que o intervalo é menor do que o tipo `double`. Veja a precisão maior com o tipo decimal experimentando o código a seguir:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    O sufixo `M` nos números é o modo como você indica que uma constante deve usar o tipo `decimal`.


    Observe que o cálculo usando o tipo decimal tem mais dígitos à direita da vírgula decimal.


    ***Desafio***


    Agora que você viu os diferentes tipos numéricos, escreva um código que calcula a área de um círculo cujo raio é de 2,50 centímetros. Lembre-se de que a área de um círculo é o quadrado do raio multiplicado por PI. Uma dica: o .NET contém uma constante para PI, <xref:System.Math.PI?displayProperty=nameWithType>, que você pode usar para esse valor.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).


    Você deve obter uma resposta entre 19 e 20.
- title: Desafio concluído
  durationInMinutes: 1
  content: >
    Você conseguiu algo semelhante a isto?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Experimente outras fórmulas, se quiser.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Você concluiu o tutorial interativo "Números em C#". Clique no link **Branches e loops** abaixo para iniciar o próximo tutorial interativo ou visite o [site do .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) para baixar o SDK do .NET Core, criar um projeto no computador e continuar codificando. A seção "próximas etapas" leva você de volta para esses tutoriais.


    Saiba mais sobre os números em C# nos tópicos a seguir:


    - [Tipos integrais](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Tabela de tipos de ponto flutuante](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Tabela de tipos internos](../../language-reference/keywords/built-in-types-table.md)

    - [Tabela de conversões numéricas implícitas](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [Tabela de conversões numéricas explícitas](../../language-reference/keywords/explicit-numeric-conversions-table.md)
