### YamlMime:Tutorial
title: <span data-ttu-id="51c89-101">Manipular números de ponto flutuante e integrais em C#</span><span class="sxs-lookup"><span data-stu-id="51c89-101">Manipulate integral and floating point numbers in C#</span></span>
metadata:
  title: Os números em C# – Tutorial de introdução ao C# Interativo
  description: Neste tutorial sobre tipos numéricos, você usará seu navegador para aprender C# interativamente. Você escreverá o código em C# e verá os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: <span data-ttu-id="51c89-105">Loops e branches em C#</span><span class="sxs-lookup"><span data-stu-id="51c89-105">Branches and loops in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 5ea939172b35e4380ed3f32d7d06b5749d2005a0
  ms.sourcegitcommit: dfd612ba454ce775a766bcc6fe93bc1d43dfda47
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 10/09/2019
  ms.locfileid: "72179869"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="51c89-106">Este tutorial ensina de forma interativa sobre os tipos numéricos em C#, usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código.</span><span class="sxs-lookup"><span data-stu-id="51c89-106">This tutorial teaches you about the numeric types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="51c89-107">Ele contém uma série de lições que exploram números e operações matemáticas em C#.</span><span class="sxs-lookup"><span data-stu-id="51c89-107">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="51c89-108">Estas lições ensinam os princípios básicos da linguagem C#.</span><span class="sxs-lookup"><span data-stu-id="51c89-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="51c89-109">Explorar a matemática de inteiros</span><span class="sxs-lookup"><span data-stu-id="51c89-109">Explore integer math</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="51c89-110">Execute o seguinte código na janela interativa.</span><span class="sxs-lookup"><span data-stu-id="51c89-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="51c89-111">Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:</span><span class="sxs-lookup"><span data-stu-id="51c89-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    <span data-ttu-id="51c89-112">Se você estiver executando isso em seu ambiente, deverá seguir as instruções para a [versão local](numbers-in-csharp-local.md) em vez disso.</span><span class="sxs-lookup"><span data-stu-id="51c89-112">If you are running this on your environment, you should follow the instructions for the [local version](numbers-in-csharp-local.md) instead.</span></span>


    <span data-ttu-id="51c89-113">Você viu apenas uma das operações matemáticas fundamentais com números inteiros.</span><span class="sxs-lookup"><span data-stu-id="51c89-113">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="51c89-114">O tipo `int` representa um **inteiro**, um número inteiro positivo ou negativo.</span><span class="sxs-lookup"><span data-stu-id="51c89-114">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="51c89-115">Você usa o símbolo `+` para adição.</span><span class="sxs-lookup"><span data-stu-id="51c89-115">You use the `+` symbol for addition.</span></span> <span data-ttu-id="51c89-116">Outras operações matemáticas comuns para inteiros incluem:</span><span class="sxs-lookup"><span data-stu-id="51c89-116">Other common mathematical operations for integers include:</span></span>


    - <span data-ttu-id="51c89-117">`-` para subtração</span><span class="sxs-lookup"><span data-stu-id="51c89-117">`-` for subtraction</span></span>

    - <span data-ttu-id="51c89-118">`*` para multiplicação</span><span class="sxs-lookup"><span data-stu-id="51c89-118">`*` for multiplication</span></span>

    - <span data-ttu-id="51c89-119">`/` para divisão</span><span class="sxs-lookup"><span data-stu-id="51c89-119">`/` for division</span></span>


    > [!TIP]

    > <span data-ttu-id="51c89-120">Explorar por conta própria todo o tutorial interativo, modificando o código que você escreveu na janela interativa.</span><span class="sxs-lookup"><span data-stu-id="51c89-120">Throughout this interactive tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="51c89-121">Este tutorial fornece exemplos para teste a cada etapa.</span><span class="sxs-lookup"><span data-stu-id="51c89-121">This tutorial provides examples that you can try at each step.</span></span>


    <span data-ttu-id="51c89-122">Comece explorando essas diferentes operações.</span><span class="sxs-lookup"><span data-stu-id="51c89-122">Start by exploring those different operations.</span></span> <span data-ttu-id="51c89-123">Modifique a terceira linha para testar cada uma dessas operações.</span><span class="sxs-lookup"><span data-stu-id="51c89-123">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="51c89-124">Após cada edição, clique no botão **Executar**.</span><span class="sxs-lookup"><span data-stu-id="51c89-124">After each edit, click the **Run** button.</span></span>


    <span data-ttu-id="51c89-125">Subtração:</span><span class="sxs-lookup"><span data-stu-id="51c89-125">Subtraction:</span></span>


    ```csharp

    int c = a - b;

    ```


    <span data-ttu-id="51c89-126">Multiplicação:</span><span class="sxs-lookup"><span data-stu-id="51c89-126">Multiplication:</span></span>


    ```csharp

    int c = a * b;

    ```


    <span data-ttu-id="51c89-127">Divisão:</span><span class="sxs-lookup"><span data-stu-id="51c89-127">Division:</span></span>


    ```csharp

    int c = a / b;

    ```


    <span data-ttu-id="51c89-128">Você também pode experimentar, executando várias operações matemáticas na mesma linha, se quiser.</span><span class="sxs-lookup"><span data-stu-id="51c89-128">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>


    > [!TIP]

    > <span data-ttu-id="51c89-129">À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código.</span><span class="sxs-lookup"><span data-stu-id="51c89-129">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="51c89-130">O **compilador** encontrará esses erros e os reportará a você.</span><span class="sxs-lookup"><span data-stu-id="51c89-130">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="51c89-131">Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.</span><span class="sxs-lookup"><span data-stu-id="51c89-131">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="51c89-132">Esse exercício ajudará você a conhecer a estrutura do código C#.</span><span class="sxs-lookup"><span data-stu-id="51c89-132">That exercise will help you learn the structure of C# code.</span></span>


    > [!NOTE]

    > <span data-ttu-id="51c89-133">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="51c89-133">This online coding experience is in preview mode.</span></span> <span data-ttu-id="51c89-134">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="51c89-134">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="51c89-135">Explorar a ordem das operações</span><span class="sxs-lookup"><span data-stu-id="51c89-135">Explore order of operations</span></span>
  durationInMinutes: 7
  content: >
    <span data-ttu-id="51c89-136">A linguagem C# define a precedência de operações matemáticas diferentes com regras consistentes às regras que você aprendeu em matemática.</span><span class="sxs-lookup"><span data-stu-id="51c89-136">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>

    <span data-ttu-id="51c89-137">Multiplicação e divisão têm precedência sobre adição e subtração.</span><span class="sxs-lookup"><span data-stu-id="51c89-137">Multiplication and division take precedence over addition and subtraction.</span></span>

    <span data-ttu-id="51c89-138">Explore executando o seguinte código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="51c89-138">Explore that by running the following code in the interactive window:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="51c89-139">A saída demonstra que a multiplicação é executada antes da adição.</span><span class="sxs-lookup"><span data-stu-id="51c89-139">The output demonstrates that the multiplication is performed before the addition.</span></span>


    <span data-ttu-id="51c89-140">Você pode forçar uma ordem diferente de operações, adicionando parênteses para delimitar a operação, ou operações, que você quer realizar primeiro:</span><span class="sxs-lookup"><span data-stu-id="51c89-140">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="51c89-141">Explore mais, combinando várias operações diferentes.</span><span class="sxs-lookup"><span data-stu-id="51c89-141">Explore more by combining many different operations.</span></span> <span data-ttu-id="51c89-142">Substitua a quarta linha acima por algo parecido com isto:</span><span class="sxs-lookup"><span data-stu-id="51c89-142">Replace the fourth line above with something like this:</span></span>


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    <span data-ttu-id="51c89-143">Talvez você tenha observado um comportamento interessante com relação aos números inteiros.</span><span class="sxs-lookup"><span data-stu-id="51c89-143">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="51c89-144">A divisão de inteiros sempre produz um resultado inteiro, mesmo quando você espera que o resultado inclua uma parte decimal ou fracionária.</span><span class="sxs-lookup"><span data-stu-id="51c89-144">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>


    <span data-ttu-id="51c89-145">Se você ainda não viu esse comportamento, tente o seguinte:</span><span class="sxs-lookup"><span data-stu-id="51c89-145">If you haven't seen this behavior, try the following:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="51c89-146">Clique em **Executar** novamente para ver os resultados.</span><span class="sxs-lookup"><span data-stu-id="51c89-146">Click **Run** again to see the results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="51c89-147">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="51c89-147">This online coding experience is in preview mode.</span></span> <span data-ttu-id="51c89-148">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="51c89-148">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="51c89-149">Explorar a precisão de inteiros e limites</span><span class="sxs-lookup"><span data-stu-id="51c89-149">Explore integer precision and limits</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="51c89-150">Esse último exemplo mostrou que uma divisão de inteiros trunca o resultado.</span><span class="sxs-lookup"><span data-stu-id="51c89-150">That last sample showed you that integer division truncates the result.</span></span>

    <span data-ttu-id="51c89-151">Você pode obter o **restante** usando o operador **module**, o caractere `%`:</span><span class="sxs-lookup"><span data-stu-id="51c89-151">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    <span data-ttu-id="51c89-152">O tipo de inteiro C# difere do inteiros matemáticos de outra forma: o tipo `int` tem limites mínimo e máximo.</span><span class="sxs-lookup"><span data-stu-id="51c89-152">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="51c89-153">Execute este código na janela interativa para ver esses limites:</span><span class="sxs-lookup"><span data-stu-id="51c89-153">Run this code in the interactive window to see those limits:</span></span>


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    <span data-ttu-id="51c89-154">Se um cálculo produzir um valor que excede esses limites, você terá uma condição de **estouro negativo** ou **estouro**.</span><span class="sxs-lookup"><span data-stu-id="51c89-154">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="51c89-155">A resposta parece quebrar de um limite para o outro.</span><span class="sxs-lookup"><span data-stu-id="51c89-155">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="51c89-156">Adicione estas duas linhas à janela interativa para ver um exemplo:</span><span class="sxs-lookup"><span data-stu-id="51c89-156">Add these two lines to the interactive window to see an example:</span></span>


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    <span data-ttu-id="51c89-157">Observe que a resposta é muito próxima do mínimo inteiro (negativo).</span><span class="sxs-lookup"><span data-stu-id="51c89-157">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="51c89-158">É o mesmo que `min + 2`.</span><span class="sxs-lookup"><span data-stu-id="51c89-158">It's the same as `min + 2`.</span></span>

    <span data-ttu-id="51c89-159">A operação de adição **estourou** os valores permitidos para números inteiros.</span><span class="sxs-lookup"><span data-stu-id="51c89-159">The addition operation **overflowed** the allowed values for integers.</span></span>

    <span data-ttu-id="51c89-160">A resposta é um número negativo muito grande, pois um estouro "envolve" do maior valor de inteiro possível para o menor.</span><span class="sxs-lookup"><span data-stu-id="51c89-160">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>


    <span data-ttu-id="51c89-161">Há outros tipos numéricos com limites e precisão diferentes que você usaria quando o tipo `int` não atendesse às suas necessidades.</span><span class="sxs-lookup"><span data-stu-id="51c89-161">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="51c89-162">Vamos explorá-los na sequência.</span><span class="sxs-lookup"><span data-stu-id="51c89-162">Let's explore those next.</span></span>


    > [!NOTE]

    > <span data-ttu-id="51c89-163">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="51c89-163">This online coding experience is in preview mode.</span></span> <span data-ttu-id="51c89-164">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="51c89-164">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="51c89-165">Trabalhar com o tipo Double</span><span class="sxs-lookup"><span data-stu-id="51c89-165">Work with the double type</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="51c89-166">O tipo numérico `double` representa um número de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="51c89-166">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="51c89-167">Esses termos podem ser novidade para você.</span><span class="sxs-lookup"><span data-stu-id="51c89-167">Those terms may be new to you.</span></span> <span data-ttu-id="51c89-168">Um número de **ponto flutuante** é útil para representar números não integrais que podem ser muito grandes ou pequenos em magnitude.</span><span class="sxs-lookup"><span data-stu-id="51c89-168">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id="51c89-169">**Precisão dupla** significa que esses números são armazenados usando uma precisão maior do que a **precisão única**.</span><span class="sxs-lookup"><span data-stu-id="51c89-169">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="51c89-170">Em computadores modernos, é mais comum usar precisão dupla que números de precisão única.</span><span class="sxs-lookup"><span data-stu-id="51c89-170">On modern computers, it is more common to use double precision than single precision numbers.</span></span>

    <span data-ttu-id="51c89-171">Vamos explorar.</span><span class="sxs-lookup"><span data-stu-id="51c89-171">Let's explore.</span></span> <span data-ttu-id="51c89-172">Experimente o seguinte código na janela interativa e veja o resultado:</span><span class="sxs-lookup"><span data-stu-id="51c89-172">Try the following code in the interactive window and see the result:</span></span>


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="51c89-173">Observe que a resposta inclui a parte decimal do quociente.</span><span class="sxs-lookup"><span data-stu-id="51c89-173">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="51c89-174">Experimente uma expressão ligeiramente mais complicada com duplos:</span><span class="sxs-lookup"><span data-stu-id="51c89-174">Try a slightly more complicated expression with doubles:</span></span>


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="51c89-175">O intervalo de um valor duplo é muito maior do que valores inteiros.</span><span class="sxs-lookup"><span data-stu-id="51c89-175">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="51c89-176">Experimente o seguinte código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="51c89-176">Try the following code in the interactive window:</span></span>


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    <span data-ttu-id="51c89-177">Esses valores são impressos em notação científica.</span><span class="sxs-lookup"><span data-stu-id="51c89-177">These values are printed out in scientific notation.</span></span> <span data-ttu-id="51c89-178">O número à esquerda do `E` é o significando.</span><span class="sxs-lookup"><span data-stu-id="51c89-178">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id="51c89-179">O número à direita é o expoente, como uma potência de 10.</span><span class="sxs-lookup"><span data-stu-id="51c89-179">The number to the right is the exponent, as a power of 10.</span></span>


    <span data-ttu-id="51c89-180">Assim como os números decimais em matemática, os duplos em C# podem ter erros de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="51c89-180">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="51c89-181">Experimente esse código:</span><span class="sxs-lookup"><span data-stu-id="51c89-181">Try this code:</span></span>


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    <span data-ttu-id="51c89-182">Você sabe que a repetição de `0.3` não é exatamente o mesmo que `1/3`.</span><span class="sxs-lookup"><span data-stu-id="51c89-182">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>


    <span data-ttu-id="51c89-183">***Desafio***</span><span class="sxs-lookup"><span data-stu-id="51c89-183">***Challenge***</span></span>


    <span data-ttu-id="51c89-184">Experimente outros cálculos com números grandes, números pequenos, multiplicação e divisão usando o tipo `double`.</span><span class="sxs-lookup"><span data-stu-id="51c89-184">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="51c89-185">Experimente cálculos mais complicados.</span><span class="sxs-lookup"><span data-stu-id="51c89-185">Try more complicated calculations.</span></span>


    > [!NOTE]

    > <span data-ttu-id="51c89-186">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="51c89-186">This online coding experience is in preview mode.</span></span> <span data-ttu-id="51c89-187">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="51c89-187">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="51c89-188">Trabalhar com tipos de ponto fixo</span><span class="sxs-lookup"><span data-stu-id="51c89-188">Work with fixed point types</span></span>
  durationInMinutes: 8
  content: >
    <span data-ttu-id="51c89-189">Você viu os tipos numéricos básicos em C#: inteiros e duplos.</span><span class="sxs-lookup"><span data-stu-id="51c89-189">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="51c89-190">Ainda há outro tipo : o tipo `decimal`.</span><span class="sxs-lookup"><span data-stu-id="51c89-190">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="51c89-191">O tipo `decimal` tem um intervalo menor, mas precisão maior do que `double`.</span><span class="sxs-lookup"><span data-stu-id="51c89-191">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id="51c89-192">O termo **ponto fixo** significa que a virgula decimal (ou ponto binário) não muda.</span><span class="sxs-lookup"><span data-stu-id="51c89-192">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="51c89-193">Vamos analisar:</span><span class="sxs-lookup"><span data-stu-id="51c89-193">Let's take a look:</span></span>


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    <span data-ttu-id="51c89-194">Observe que o intervalo é menor do que o tipo `double`.</span><span class="sxs-lookup"><span data-stu-id="51c89-194">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="51c89-195">Veja a precisão maior com o tipo decimal experimentando o código a seguir:</span><span class="sxs-lookup"><span data-stu-id="51c89-195">You can see the greater precision with the decimal type by trying the following code:</span></span>


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    <span data-ttu-id="51c89-196">O sufixo `M` nos números é o modo como você indica que uma constante deve usar o tipo `decimal`.</span><span class="sxs-lookup"><span data-stu-id="51c89-196">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>


    <span data-ttu-id="51c89-197">Observe que o cálculo usando o tipo decimal tem mais dígitos à direita da vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="51c89-197">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span>


    <span data-ttu-id="51c89-198">***Desafio***</span><span class="sxs-lookup"><span data-stu-id="51c89-198">***Challenge***</span></span>


    <span data-ttu-id="51c89-199">Agora que você viu os diferentes tipos numéricos, escreva um código que calcula a área de um círculo cujo raio é de 2,50 centímetros.</span><span class="sxs-lookup"><span data-stu-id="51c89-199">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id="51c89-200">Lembre-se de que a área de um círculo é o quadrado do raio multiplicado por PI.</span><span class="sxs-lookup"><span data-stu-id="51c89-200">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="51c89-201">Uma dica: o .NET contém uma constante para PI, <xref:System.Math.PI?displayProperty=nameWithType>, que você pode usar para esse valor.</span><span class="sxs-lookup"><span data-stu-id="51c89-201">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span>


    > [!NOTE]

    > <span data-ttu-id="51c89-202">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="51c89-202">This online coding experience is in preview mode.</span></span> <span data-ttu-id="51c89-203">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="51c89-203">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>


    <span data-ttu-id="51c89-204">Você deve obter uma resposta entre 19 e 20.</span><span class="sxs-lookup"><span data-stu-id="51c89-204">You should get an answer between 19 and 20.</span></span>
- title: <span data-ttu-id="51c89-205">Desafio concluído</span><span class="sxs-lookup"><span data-stu-id="51c89-205">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="51c89-206">Você conseguiu algo semelhante a isto?</span><span class="sxs-lookup"><span data-stu-id="51c89-206">Did you come up with something like this?</span></span>


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    <span data-ttu-id="51c89-207">Experimente outras fórmulas, se quiser.</span><span class="sxs-lookup"><span data-stu-id="51c89-207">Try some other formulas if you'd like.</span></span>


    > [!NOTE]

    > <span data-ttu-id="51c89-208">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="51c89-208">This online coding experience is in preview mode.</span></span> <span data-ttu-id="51c89-209">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="51c89-209">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="51c89-210">Você concluiu o tutorial interativo "Números em C#".</span><span class="sxs-lookup"><span data-stu-id="51c89-210">You've completed the "Numbers in C#" interactive tutorial.</span></span> <span data-ttu-id="51c89-211">Clique no link **Branches e loops** abaixo para iniciar o próximo tutorial interativo ou visite o [site do .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) para baixar o SDK do .NET Core, criar um projeto no computador e continuar codificando.</span><span class="sxs-lookup"><span data-stu-id="51c89-211">You can click the **Branches and Loops** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="51c89-212">A seção "próximas etapas" leva você de volta para esses tutoriais.</span><span class="sxs-lookup"><span data-stu-id="51c89-212">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="51c89-213">Saiba mais sobre os números em C# nos tópicos a seguir:</span><span class="sxs-lookup"><span data-stu-id="51c89-213">You can learn more about numbers in C# in the following topics:</span></span>


    - [<span data-ttu-id="51c89-214">Tipos integrais</span><span class="sxs-lookup"><span data-stu-id="51c89-214">Integral types</span></span>](../../language-reference/builtin-types/integral-numeric-types.md)

    - [<span data-ttu-id="51c89-215">Tabela de tipos de ponto flutuante</span><span class="sxs-lookup"><span data-stu-id="51c89-215">Floating-Point Types Table</span></span>](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [<span data-ttu-id="51c89-216">Tabela de tipos internos</span><span class="sxs-lookup"><span data-stu-id="51c89-216">Built-In Types Table</span></span>](../../language-reference/keywords/built-in-types-table.md)

    - [<span data-ttu-id="51c89-217">Tabela de conversões numéricas implícitas</span><span class="sxs-lookup"><span data-stu-id="51c89-217">Implicit Numeric Conversions Table</span></span>](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [<span data-ttu-id="51c89-218">Tabela de conversões numéricas explícitas</span><span class="sxs-lookup"><span data-stu-id="51c89-218">Explicit Numeric Conversions Table</span></span>](../../language-reference/keywords/explicit-numeric-conversions-table.md)
