### YamlMime:Tutorial
title: <span data-ttu-id="0e076-101">Saiba mais sobre lógica condicional com instruções branch e loop</span><span class="sxs-lookup"><span data-stu-id="0e076-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Tutorial interativo Branches e loops – introdução ao C#
  description: Neste tutorial sobre loops e branches, você usará seu navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="0e076-105">A coleção de lista</span><span class="sxs-lookup"><span data-stu-id="0e076-105">The list collection</span></span>
  ms.openlocfilehash: 62cc52e22406c6c19dad6cc800078e0d8f34f0d6
  ms.sourcegitcommit: d21bee9dbd32b9540ad30f9d0e2e874227040be3
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 04/09/2019
  ms.locfileid: "59427520"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="0e076-106">Esse tutorial ensina a escrever código que examina variáveis e muda o caminho de execução com base nessas variáveis.</span><span class="sxs-lookup"><span data-stu-id="0e076-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="0e076-107">Você usará seu navegador para escrever em C# interativamente e ver os resultados da compilação e da execução de seu código.</span><span class="sxs-lookup"><span data-stu-id="0e076-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="0e076-108">Este tutorial contém uma série de lições que exploram construções de branches e loops em C#.</span><span class="sxs-lookup"><span data-stu-id="0e076-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="0e076-109">Estas lições ensinam os princípios básicos da linguagem C#.</span><span class="sxs-lookup"><span data-stu-id="0e076-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="0e076-110">Tomar decisões usando a instrução if</span><span class="sxs-lookup"><span data-stu-id="0e076-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="0e076-111">Execute o seguinte código na janela interativa.</span><span class="sxs-lookup"><span data-stu-id="0e076-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="0e076-112">Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:</span><span class="sxs-lookup"><span data-stu-id="0e076-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="0e076-113">Modifique a declaração de `b` para que a soma seja inferior a 10:</span><span class="sxs-lookup"><span data-stu-id="0e076-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="0e076-114">Clique no botão **Executar** novamente.</span><span class="sxs-lookup"><span data-stu-id="0e076-114">Click the **Run** button again.</span></span> <span data-ttu-id="0e076-115">Como a resposta é inferior a 10, nada é impresso.</span><span class="sxs-lookup"><span data-stu-id="0e076-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="0e076-116">A **condição** que você está testando é falsa.</span><span class="sxs-lookup"><span data-stu-id="0e076-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="0e076-117">Não há qualquer código para execução, porque você escreveu apenas uma das ramificações possíveis para uma instrução `if`: a ramificação verdadeira.</span><span class="sxs-lookup"><span data-stu-id="0e076-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="0e076-118">À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código.</span><span class="sxs-lookup"><span data-stu-id="0e076-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="0e076-119">O **compilador** encontrará esses erros e os reportará a você.</span><span class="sxs-lookup"><span data-stu-id="0e076-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="0e076-120">Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.</span><span class="sxs-lookup"><span data-stu-id="0e076-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="0e076-121">Esse exercício ajudará você a conhecer a estrutura do código C#.</span><span class="sxs-lookup"><span data-stu-id="0e076-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="0e076-122">Este primeiro exemplo mostra o poder do `if` e dos tipos boolianos.</span><span class="sxs-lookup"><span data-stu-id="0e076-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="0e076-123">Um *booliano* é uma variável que pode ter um dos dois valores: `true` ou `false`.</span><span class="sxs-lookup"><span data-stu-id="0e076-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="0e076-124">C# define um tipo especial, `bool` para variáveis boolianas.</span><span class="sxs-lookup"><span data-stu-id="0e076-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="0e076-125">A instrução `if` verifica o valor de um `bool`.</span><span class="sxs-lookup"><span data-stu-id="0e076-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="0e076-126">Quando o valor é `true`, a instrução após `if` é executada.</span><span class="sxs-lookup"><span data-stu-id="0e076-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="0e076-127">Caso contrário, é ignorada.</span><span class="sxs-lookup"><span data-stu-id="0e076-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="0e076-128">Esse processo de verificação de condições e execução de instruções com base nessas condições é muito eficiente.</span><span class="sxs-lookup"><span data-stu-id="0e076-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="0e076-129">Vamos explorar mais.</span><span class="sxs-lookup"><span data-stu-id="0e076-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="0e076-130">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="0e076-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0e076-131">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="0e076-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="0e076-132">Faça if e else funcionam juntas</span><span class="sxs-lookup"><span data-stu-id="0e076-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"0e076-133\">Para executar um código diferente nos branches true e false, crie um branch `else` que será executado quando a condição for false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"0e076-134\">Experimente isto:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"0e076-135\">A instrução após a palavra-chave `else` é executada somente quando a condição que estiver sendo testada for `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"0e076-136\">A combinação de `if` e `else` com condições boolianas fornece todos os recursos que você precisa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"0e076-137\">O recuo sob as instruções `if` e `else` é para leitores humanos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"0e076-138\">A linguagem C# não considera recuos ou espaços em branco como significativos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"0e076-139\">A instrução após a palavra-chave `if` ou `else` será executada com base na condição.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"0e076-140\">Todos os exemplos neste tutorial seguem uma prática comum para recuar linhas com base no fluxo de controle de instruções.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"0e076-141\">Como o recuo não é significativo, você precisa usar `{` e `}` para indicar quando você quer que mais de uma instrução faça parte do bloco executado condicionalmente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"0e076-142\">Os programadores em C# normalmente usam essas chaves em todas as cláusulas `if` e `else`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"0e076-143\">O exemplo a seguir é igual ao que você acabou de criar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"0e076-144\">Experimente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"0e076-145\">No restante deste tutorial, todos os exemplos de código incluem as chaves, seguindo as práticas aceitas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"0e076-146\">Você pode testar condições mais complicadas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"0e076-147\">O símbolo `==` testa a *igualdade*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"0e076-148\">Usar `==` distingue o teste de igualdade de atribuição, que você viu em `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"0e076-149\">O `&&` representa \"e\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"0e076-150\">Isso significa que as duas condições devem ser verdadeiras para executar a instrução no branch verdadeiro.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"0e076-151\">Estes exemplos também mostram que você pode ter várias instruções em cada branch condicional, desde que você coloque-as entre `{` e `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"0e076-152\">Você também pode usar `||` representar \"ou\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"0e076-153\">Modifique os valores de `a`, `b` e `c` e alterne entre `&&` e `||` para explorar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"0e076-154\">Você obterá mais compreensão de como os operadores `&&` e `||` funcionam.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"0e076-155\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"0e076-156\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"0e076-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="0e076-157">Use loops para repetir operações</span><span class="sxs-lookup"><span data-stu-id="0e076-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="0e076-158">Outro conceito importante para criar programas maiores são os **loops**.</span><span class="sxs-lookup"><span data-stu-id="0e076-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="0e076-159">Você usará loops para repetir as instruções que deseja executar mais de uma vez.</span><span class="sxs-lookup"><span data-stu-id="0e076-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="0e076-160">Experimente este código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="0e076-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="0e076-161">A instrução `while` verifica uma condição e executa a instrução após `while`.</span><span class="sxs-lookup"><span data-stu-id="0e076-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="0e076-162">Ela repetirá a verificação da condição e executará essas instruções até que a condição seja false.</span><span class="sxs-lookup"><span data-stu-id="0e076-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="0e076-163">Há outro operador novo neste exemplo.</span><span class="sxs-lookup"><span data-stu-id="0e076-163">There's one other new operator in this example.</span></span> <span data-ttu-id="0e076-164">O `++` após a variável `counter` é o operador **increment**.</span><span class="sxs-lookup"><span data-stu-id="0e076-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="0e076-165">Ele adiciona 1 ao valor do contador e armazena esse valor na variável do contador.</span><span class="sxs-lookup"><span data-stu-id="0e076-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="0e076-166">Verifique se a condição de loop `while` muda para false quando ao executar o código.</span><span class="sxs-lookup"><span data-stu-id="0e076-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="0e076-167">Caso contrário, crie um **loop infinito**, para que seu programa nunca termine.</span><span class="sxs-lookup"><span data-stu-id="0e076-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="0e076-168">Não vamos demonstrar isso porque o mecanismo que executa o código ultrapassará o tempo limite, e você não verá uma saída de seu programa.</span><span class="sxs-lookup"><span data-stu-id="0e076-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="0e076-169">O loop `while` testa a condição antes de executar o código seguindo `while`.</span><span class="sxs-lookup"><span data-stu-id="0e076-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="0e076-170">O loop `do` ... `while` executa o código primeiro e, em seguida, verifica a condição.</span><span class="sxs-lookup"><span data-stu-id="0e076-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="0e076-171">É semelhante ao seguinte:</span><span class="sxs-lookup"><span data-stu-id="0e076-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="0e076-172">Esse loop `do` e o loop `while` anterior funcionam da mesma maneira.</span><span class="sxs-lookup"><span data-stu-id="0e076-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="0e076-173">Vamos passar para a última instrução de loop.</span><span class="sxs-lookup"><span data-stu-id="0e076-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="0e076-174">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="0e076-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0e076-175">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="0e076-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="0e076-176">Trabalhar com o loop for</span><span class="sxs-lookup"><span data-stu-id="0e076-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="0e076-177">Outra instrução de loop comum que você verá no código C# é o loop `for`.</span><span class="sxs-lookup"><span data-stu-id="0e076-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="0e076-178">Experimente este código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="0e076-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="0e076-179">Ele faz o mesmo trabalho que o loop `while` e o loop `do` que você já usou.</span><span class="sxs-lookup"><span data-stu-id="0e076-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="0e076-180">A instrução `for` tem três partes que controlam o modo como ela funciona.</span><span class="sxs-lookup"><span data-stu-id="0e076-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="0e076-181">A primeira parte é o **inicializador for**: `int counter = 0;` declara que `counter` é a variável do loop, e define seu valor inicial como `0`.</span><span class="sxs-lookup"><span data-stu-id="0e076-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="0e076-182">A parte central é a **condição for**: `counter < 10` declara que este loop `for` continuará sendo executado desde que o valor do contador seja inferior a 10.</span><span class="sxs-lookup"><span data-stu-id="0e076-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="0e076-183">A parte final é o **iterador for**: `counter++` especifica como modificar a variável de loop depois de executar o bloco após a instrução `for`.</span><span class="sxs-lookup"><span data-stu-id="0e076-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="0e076-184">Aqui, ela especifica que `counter` deve ser incrementado com 1 sempre que o bloco for executado.</span><span class="sxs-lookup"><span data-stu-id="0e076-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="0e076-185">Experimente você mesmo.</span><span class="sxs-lookup"><span data-stu-id="0e076-185">Experiment with these yourself.</span></span> <span data-ttu-id="0e076-186">Tente o seguinte:</span><span class="sxs-lookup"><span data-stu-id="0e076-186">Try each of the following:</span></span>


    - <span data-ttu-id="0e076-187">Altere o inicializador para iniciar em um valor diferente.</span><span class="sxs-lookup"><span data-stu-id="0e076-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="0e076-188">Altere a condição para parar em um valor diferente.</span><span class="sxs-lookup"><span data-stu-id="0e076-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="0e076-189">Quando terminar, vamos escrever um código para usar o que você aprendeu.</span><span class="sxs-lookup"><span data-stu-id="0e076-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="0e076-190">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="0e076-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0e076-191">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="0e076-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="0e076-192">Combinar branches e loops</span><span class="sxs-lookup"><span data-stu-id="0e076-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="0e076-193">Agora que você viu a instrução `if` e as construções de loop na linguagem C#, verifique se você pode escrever o código C# para encontrar a soma de todos os inteiros de 1 a 20 divisíveis por 3.</span><span class="sxs-lookup"><span data-stu-id="0e076-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="0e076-194">Veja algumas dicas:</span><span class="sxs-lookup"><span data-stu-id="0e076-194">Here are a few hints:</span></span>


    - <span data-ttu-id="0e076-195">O operador `%` retorna o restante de uma operação de divisão.</span><span class="sxs-lookup"><span data-stu-id="0e076-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="0e076-196">A instrução `if` retorna a condição para ver se um número deve ser parte da soma.</span><span class="sxs-lookup"><span data-stu-id="0e076-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="0e076-197">O loop `for` pode ajudar você a repetir uma série de etapas para todos os números de 1 a 20.</span><span class="sxs-lookup"><span data-stu-id="0e076-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="0e076-198">Tente você mesmo.</span><span class="sxs-lookup"><span data-stu-id="0e076-198">Try it yourself.</span></span> <span data-ttu-id="0e076-199">Depois verifique como você fez.</span><span class="sxs-lookup"><span data-stu-id="0e076-199">Then check how you did.</span></span> <span data-ttu-id="0e076-200">Como dica, você deve obter 63 como resposta.</span><span class="sxs-lookup"><span data-stu-id="0e076-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="0e076-201">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="0e076-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0e076-202">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="0e076-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="0e076-203">Desafio concluído</span><span class="sxs-lookup"><span data-stu-id="0e076-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="0e076-204">Você conseguiu algo semelhante a isto?</span><span class="sxs-lookup"><span data-stu-id="0e076-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="0e076-205">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="0e076-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="0e076-206">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="0e076-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="0e076-207">Parabéns!</span><span class="sxs-lookup"><span data-stu-id="0e076-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="0e076-208">Você concluiu o tutorial interativo "branches e loops".</span><span class="sxs-lookup"><span data-stu-id="0e076-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="0e076-209">Clique no link **Cadeias de caracteres interpoladas** abaixo para iniciar o próximo tutorial interativo ou visite o [site do .NET](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) para baixar o SDK do .NET Core, criar um projeto no computador e continuar codificando.</span><span class="sxs-lookup"><span data-stu-id="0e076-209">You can click the **Interpolated strings** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="0e076-210">A etapa "Continuar aprendendo" leva você de volta a esses tutoriais.</span><span class="sxs-lookup"><span data-stu-id="0e076-210">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="0e076-211">Saiba mais sobre esses conceitos nestes tópicos:</span><span class="sxs-lookup"><span data-stu-id="0e076-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="0e076-212">Instrução if e else</span><span class="sxs-lookup"><span data-stu-id="0e076-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="0e076-213">Instrução while</span><span class="sxs-lookup"><span data-stu-id="0e076-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="0e076-214">Instrução do</span><span class="sxs-lookup"><span data-stu-id="0e076-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="0e076-215">Instrução for</span><span class="sxs-lookup"><span data-stu-id="0e076-215">For statement</span></span>](../../language-reference/keywords/for.md)
