### YamlMime:Tutorial
title: Explorar o C# 7.0 – Tutorial interativo do C#
metadata:
  title: Explorar o C# 7.0 – Experimente os novos recursos do C# 7.0 de maneira interativa, usando o navegador
  description: Neste tutorial, você usará o navegador para explorar o C# 7.0 de maneira interativa. Você explorará as novas expressões que podem ser usadas com o C# 7.0 que permitem um código mais conciso e legível.
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 7cec35e0749ea0b38162244171459f311d27cb25
  ms.sourcegitcommit: a8d3504f0eae1a40bda2b06bd441ba01f1631ef0
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 06/18/2019
  ms.locfileid: "67170233"
items:
- durationInMinutes: 1
  content: >
    Este tutorial permite que você explore os recursos do C# 7.0 de maneira interativa usando o navegador para escrever em C# e ver os resultados da compilação e da execução do código. Ele contém uma série de lições que modificam as antigas práticas de C# para usar recursos mais novos e mais concisos do C# 7.0. O restante deste artigo oferece uma visão geral de cada um desses recursos, com um link para explorá-los.
- title: Declarações de variável de saída no local de atribuição
  durationInMinutes: 2
  content: "A sintaxe existente que dá suporte a parâmetros `out` foi aperfeiçoada nesta versão. Clique no botão *Entrar no Modo de Foco* na parte inferior desta página e, em seguida, tente o seguinte código na janela interativa: \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\nAgora você pode declarar variáveis `out` na lista de argumentos de uma chamada de método, em vez de escrever uma instrução de declaração separada. Mova a declaração para a chamada de método. Adicione o seguinte código na parte inferior da janela interativa:\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\nVocê pode alterar a declaração `int` para uma declaração `var`. Adicione o seguinte código à janela interativa:\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\nA nova sintaxe fornece duas vantagens importantes em relação à sintaxe existente:\n\n* O código é mais fácil de ler. \n    - Você declara a variável out onde a usa, não em outra linha acima.\n* Não é necessário atribuir um valor inicial.\n    - Ao declarar a variável `out` onde ela é usada em uma chamada de método, você não pode usá-la acidentalmente antes de ela ser atribuída.\n\nO escopo da variável declarada é o escopo delimitador da instrução `if`. Isso permite que você use a variável posteriormente. Modifique o último bloco `if`, conforme mostrado no snippet a seguir.\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: As tuplas criam estruturas de dados leves
  durationInMinutes: 1
  content: "As tuplas são estruturas de dados leves que contêm vários campos para representar os membros de dados. Os campos não são validados, e você não pode definir seus próprios métodos.\n\n> [!NOTE]\n> As tuplas estavam disponíveis antes do C# 7.0, mas elas eram ineficientes e não tinham nenhum suporte de linguagem. Isso significava que os elementos de tupla só podiam ser referenciados como `Item1`, `Item2` e assim por diante. O C# 7.0 introduz o suporte de linguagem para tuplas, que permite nomes semânticos para os campos de uma tupla usando tipos de tupla novos e mais eficientes.\n\nCrie uma tupla atribuindo um valor a cada membro nomeado:\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\nA tupla `namedLetters` contém campos denominados `Alpha` e `Beta`. Esses nomes existem somente em tempo de compilação e não são preservados em tempo de execução (durante a inspeção da tupla usando a reflexão, por exemplo).\n\nEm uma atribuição de tupla, você também pode especificar os nomes dos campos no lado direito da atribuição: \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\nVocê poderá especificar nomes para os campos no lado esquerdo e direito da atribuição, mas os nomes no lado direito serão ignorados.\n\nAs tuplas são mais úteis como tipos de retorno para os métodos `private` e `internal`. As tuplas fornecem uma sintaxe simples para que esses métodos retornem vários valores discretos.\n\nA criação de uma tupla é mais eficiente e produtiva do que a criação de uma classe ou um struct. Ela tem uma sintaxe mais simples e leve para definir uma estrutura de dados que contém mais de um valor. O método de exemplo a seguir retorna os valores mínimo e máximo encontrados em uma sequência de inteiros. Adicione o seguinte código no navegador para testá-lo:\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\nPode haver ocasiões em que você deseja descompactar os membros de uma tupla que foram retornados de um método.  Você pode fazer isso declarando variáveis separadas para cada um dos valores na tupla. Isso é chamado de *desconstrução* da tupla. Adicione o seguinte código no navegador para testá-lo:\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\nAo trabalhar com tuplas, você descobrirá com frequência que não usa todos os membros de um resultado de tupla. Quando isso acontece, você pode indicar que um ou mais dos valores retornados são discards usando `_` no lugar de uma variável. Adicione o seguinte código no navegador para testá-lo:\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\nSaiba mais detalhes sobre tuplas no [artigo sobre tuplas](../../tuples.md).\nSaiba mais sobre discards no [artigo sobre discards](../../discards.md).\n"
- title: Usar o padrão de tipo com a expressão is
  durationInMinutes: 2
  content: >
    A expressão `is` padrão estende o [operador`is`](../../language-reference/keywords/is.md#pattern-matching-with-is) familiar para consultar um objeto além de seu tipo.


    Experimente o seguinte código na janela do navegador:


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    Altere a declaração de variável para uma cadeia de caracteres:


    ```csharp

    object count = "5";

    ```


    Agora, a expressão `is` é falsa e, portanto, o branch `else` é executado. Tente alterar `count` para `number` no branch else:


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    O código acima não será compilado porque `number` não está atribuído no branch `else`. Ele é atribuído somente no branch `true` da instrução `if`.


    O padrão de tipo da expressão `is` é útil quando você tem um pequeno número de tipos para o teste. Muitas vezes, você poderá precisar testar vários tipos. Isso exige a instrução `switch` de correspondência de padrões.
- title: Correspondência de padrões com a instrução switch
  durationInMinutes: 2
  content: >
    A *expressão de correspondência* tem uma sintaxe familiar, com base na instrução `switch` que já faz parte da linguagem C#. Vamos começar com uma pequena amostra baseada na sintaxe da expressão `is` que você explorou na página anterior:


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    O código anterior verifica se há um `int` ou um `null`. Todos os outros tipos atingiram o caso padrão. Adicione as duas seguintes linhas para verificar o comportamento:


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    A expressão `switch` converterá um tipo que permite valor nulo em seu tipo correspondente. Adicione o seguinte para verificar:


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    Você pode adicionar qualquer número de outras expressões de padrão de tipo às instruções switch. Adicione o seguinte antes do caso `null`:


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    Verifique se isso funciona adicionando os seguintes testes:


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    As expressões de correspondência também dão suporte a constantes. Isso pode poupar tempo ao fatorar expressões case simples:


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    É necessário adicionar o caso anterior *antes* da expressão `case int:`. Se você o adicionar depois desse caso, o compilador avisará você que ele já foi tratado por um caso anterior.


    Você pode adicionar uma cláusula `when` a qualquer caso de padrão para testar outras condições, além de um tipo ou um valor constante. Experimente-o adicionando o seguinte caso acima do caso `string` geral:


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    Teste-o com algo parecido com o seguinte código:


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    A nova sintaxe para as expressões de correspondência de padrões facilita a criação de algoritmos de expedição usando uma sintaxe clara e concisa com base no tipo de um objeto ou em outras propriedades. Expressões de correspondência de padrões permitem esses constructos em tipos de dados que não são relacionados por herança.


    Saiba mais sobre a correspondência de padrões no artigo dedicado à [correspondência de padrões no C#](../../pattern-matching.md).
- title: Otimizar o armazenamento de memória usando locais e retornos de ref
  durationInMinutes: 2
  content: >
    Esse recurso permite que os algoritmos que usam e retornam referências para as variáveis definidas em outro lugar. Um exemplo ocorre com matrizes grandes e a localização de um único local com determinadas características. Um método retornará aos dois índices um único local na matriz:


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    Você pode testar esse método usando o seguinte código:


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    Esse método `Find` retorna os índices para o item na matriz. Isso leva os chamadores a escreverem um código que usa esses índices para desreferenciar a matriz e modificar um único elemento. Você prefere escrever um método que retorna uma *referência* para o elemento da matriz que deseja alterar.


    Vamos examinar uma série de alterações para demonstrar o recurso local de ref e mostrar como criar um método que retorna uma referência ao armazenamento interno. Ao longo do caminho, você aprenderá as regras do recurso de retorno e local de ref que protegem contra o uso indevido acidental.


    Comece modificando a declaração do método `Find` para que ele retorne um `ref int` em vez de uma tupla.


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    Modifique a instrução de retorno para retornar o item nos índices corretos:


    ```csharp

    return matrix[i,j];

    ```


    Altere o retorno final para gerar uma exceção:


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    Observe que isso não será compilado. A declaração de método indica um retorno de `ref`, mas a instrução de retorno especifica um retorno de valor. É necessário adicionar a palavra-chave `ref` a cada instrução de retorno. Isso indica o retorno pela referência e ajuda os desenvolvedores lendo o código posteriormente a lembrarem que o método retorna pela referência:


    ```csharp

    return ref matrix[i,j];

    ```


    Agora que o método retorna uma referência para o valor inteiro na matriz, você precisa modificar onde ele é chamado. A declaração `var` significa que `valItem` é agora um `int` em vez de uma tupla. Altere o código de chamada para o seguinte:


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    A segunda instrução `WriteLine` no exemplo acima imprime o valor `42`, não `24`. A variável `valItem` é um `int`, não um `ref int`. A palavra-chave `var` permite que o compilador especifique o tipo, mas não adicionará implicitamente o modificador `ref`. Em vez disso, o valor referenciado pelo `ref return` é *copiado* para a variável no lado esquerdo da atribuição. A variável não é um local de `ref`.


    Para modificar a referência retornada, você precisará adicionar o modificador `ref` à declaração de variável local e, antes da chamada a `Find`, tornar a variável uma referência quando o valor retornado for uma referência. Modifique o código de teste no navegador para que ele corresponda ao seguinte:


    [!code-csharp[TestByRef](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByRef "test code for return object by reference")]


    Agora, a segunda instrução `WriteLine` no exemplo acima imprimirá o valor `24`, indicando que o armazenamento na matriz foi modificado. A variável local foi declarada com um modificador `ref` e ele levará um retorno de `ref`. É necessário inicializar uma variável `ref` quando ela é declarada; não é possível dividir a declaração e a inicialização.


    A linguagem C# tem outras três regras que protegem contra o uso indevido de locais e retornos de `ref`:


    * Não é possível atribuir um valor retornado do método padrão a uma variável local de `ref`.

    * Você não pode retornar um `ref` para uma variável cujo tempo de vida não ultrapassa a execução do método.

    * O locais e retornos de `ref` não podem ser usados com métodos assíncronos.


    A adição de locais e retornos de ref permite algoritmos que são mais eficientes evitando a cópia de valores ou a execução múltipla de operações de desreferenciamento.


    Para saber mais, confira o artigo [Palavra-chave ref](../../language-reference/keywords/ref.md).
- title: Minimizar o acesso ao código com as funções locais
  durationInMinutes: 2
  content: "Agora você pode declarar as funções locais que estão aninhadas dentro de outras funções. Isso permite que você minimize a visibilidade dessas funções. Há três casos de uso óbvios para funções locais:\n\n- Funções recursivas.\n- Métodos iteradores.\n- Métodos assíncronos.\n\nVamos começar com os métodos recursivos. Experimente o seguinte código no navegador para calcular `6!` (fatorial):\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\nAs funções locais são uma ótima maneira de implementar algoritmos recursivos. Outros usos comuns são para métodos iteradores públicos e métodos assíncronos públicos. Ambos os tipos de métodos geram um código que relata os erros com um atraso maior do que o esperado pelos programadores. No caso de métodos iteradores, todas as exceções são observadas apenas ao chamar o código que enumera a sequência retornada. No caso de métodos assíncronos, todas as exceções são observadas apenas quando a `Task` retornada é aguardada.\n\nOs métodos iteradores são mais fáceis de serem explorados no navegador, portanto, vamos usá-los nessa exploração. Experimente o seguinte código que chama um método iterador no navegador:\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\nExecute o código. Observe que a exceção é gerada quando o código começa a iterar pelo segundo conjunto de resultados. O código que itera pelo primeiro conjunto de resultados já foi executado. Esta amostra é pequena e não altera nenhuma estrutura de dados, portanto, é inofensiva e fácil de ser consertada. Porém, em um programa maior, em que os dois objetos iteradores podem ser criados em diferentes métodos filho, a causa raiz pode ser difícil de ser encontrada. Se o primeiro método iterador alterar o estado dos dados, ele poderá, até mesmo, gerar dados corrompidos. Você preferirá que a exceção seja gerada imediatamente, antes que qualquer trabalho seja feito. Refatore o código para que o método público valide todos os argumentos e uma função local execute a enumeração:\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\nA versão anterior deixa claro que o método local é referenciado somente no contexto do método externo. As regras para funções locais também garantem que um desenvolvedor não possa acidentalmente chamar a função local de outro local na classe e ignorar a validação de argumento.\n\nA mesma técnica pode ser empregada com métodos `async` para garantir que as exceções decorrentes da validação de argumento sejam geradas antes do início do trabalho assíncrono.\n\n> [!NOTE]\n> Alguns dos designs com suporte pelas funções locais também podem ser feitos usando *expressões lambda*. Os usuários interessados podem [ler mais sobre as diferenças](../../local-functions-vs-lambdas.md).\n"
- content: Você concluiu uma exploração dos principais novos recursos do C# 7. Agora experimente-os em seus aplicativos. Veja a lista completa no artigo [Novidades do C# 7](../../whats-new/csharp-7.md).
