### YamlMime:Tutorial
title: <span data-ttu-id="19cf4-101">Explorar o C# 6 – Tutorial interativo do C#</span><span class="sxs-lookup"><span data-stu-id="19cf4-101">Explore C# 6 - C# interactive C# tutorial</span></span>
metadata:
  title: Explorar o C# 6 – experimente os novos recursos do C# 6 interativamente usando seu navegador
  description: Neste tutorial, você usará seu navegador para explorar o C# 6 interativamente. Você explorará as novas expressões que podem ser usadas com C# 6 que permitem um código mais conciso e legível.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: d782899c3b29851f020cd9fc07cde8f408bf2ac5
  ms.sourcegitcommit: 6b308cf6d627d78ee36dbbae8972a310ac7fd6c8
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 01/23/2019
  ms.locfileid: "54634253"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="19cf4-105">Este tutorial permite que você explore o C# 6 interativamente usando seu navegador para escrever em C# e ver os resultados do build e da execução do código.</span><span class="sxs-lookup"><span data-stu-id="19cf4-105">This tutorial lets you explore C# 6 interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="19cf4-106">Ele contém uma série de lições que modificam as antigas práticas de C# para usar os recursos mais recentes e mais concisos do C# 6.</span><span class="sxs-lookup"><span data-stu-id="19cf4-106">It contains a series of lessons that modify earlier C# practices to use newer, more concise C# 6 features.</span></span> <span data-ttu-id="19cf4-107">O restante deste artigo oferece uma visão geral de cada um desses recursos, com um link para explorá-los.</span><span class="sxs-lookup"><span data-stu-id="19cf4-107">The rest of this article provides an overview of each of these features, with a link to explore each feature.</span></span>
- title: <span data-ttu-id="19cf4-108">As propriedades automáticas somente leitura permitem tipos somente leitura</span><span class="sxs-lookup"><span data-stu-id="19cf4-108">Read-only auto-properties enable read-only types</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"19cf4-109\">Duas melhorias na sintaxe de propriedade automática facilitam o uso das propriedades automáticas em mais lugares: propriedades automáticas somente leitura e inicializadores de propriedade automática.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-109\">Two enhancements to auto-property syntax make it easier to use auto-properties in more places: read-only auto-properties and auto-property initializers.</span></span> <span data-ttu-id=\"19cf4-110\">Considere este programa pequeno:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-110\">Consider this small program:</span></span>\n\n[!code-csharp[Starter](../../../../samples/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n <span data-ttu-id=\"19cf4-111\">Entre no modo de foco e copie o código anterior na janela do C# Interativo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-111\">Enter Focus mode, copy the preceding code into the C# interactive window.</span></span> <span data-ttu-id=\"19cf4-112\">Em seguida, clique em *Executar* para ver o que o código faz.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-112\">Then, click *Run* to see what the code does.</span></span> <span data-ttu-id=\"19cf4-113\">`AllCaps` tem o efeito colateral indesejado de modificar os valores de propriedade retornando também a cadeia de caracteres em maiúsculas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-113\">`AllCaps` has the undesirable side effect of modifying the property values along with returning the uppercase string.</span></span> <span data-ttu-id=\"19cf4-114\">A intenção do autor da classe `Person` era que as cadeias de caracteres de `FirstName` e `LastName` fossem somente leitura.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-114\">The author of the `Person` class intended the strings for `FirstName` and `LastName` to be read-only.</span></span> <span data-ttu-id=\"19cf4-115\">Com o C# 6, você pode tornar essa intenção clara.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-115\">With C# 6, you can make that intent clear.</span></span> <span data-ttu-id=\"19cf4-116\">Remova o `private set` de ambas as propriedades para criar uma propriedade automática somente leitura.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-116\">Remove the `private set` from both properties to create a read-only auto property.</span></span> <span data-ttu-id=\"19cf4-117\">Clique em *Executar* para ver se o compilador identifica os dois locais em que as propriedades `FirstName` e `LastName` são alteradas quando não deveriam ser.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-117\">Click *Run* to see that the compiler spots the two locations where the `FirstName` and `LastName` properties are changed when they should not have been.</span></span> <span data-ttu-id=\"19cf4-118\">Você pode alterar o método `AllCaps` no código a seguir para corrigir o erro do compilador:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-118\">You can change the `AllCaps` method to the following code to fix the compiler error:</span></span>\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\n<span data-ttu-id=\"19cf4-119\">Usando essa nova sintaxe, o compilador garante que as propriedades sejam imutáveis.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-119\">Using this new syntax, the compiler ensures that the properties are immutable.</span></span>\n"
- title: <span data-ttu-id="19cf4-120">Inicializar campos de suporte para propriedades automáticas</span><span class="sxs-lookup"><span data-stu-id="19cf4-120">Initialize backing fields for auto-properties</span></span>
  durationInMinutes: 1
  content: "<span data-ttu-id=\"19cf4-121\">A nova sintaxe em C# 6 permite que você use inicializadores para propriedades automáticas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-121\">New syntax in C# 6 enables you to use initializers for auto-properties.</span></span> <span data-ttu-id=\"19cf4-122\">Isso se torna mais importante à medida que surgem novas funcionalidades das classes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-122\">This becomes more important as classes grow new capabilities.</span></span> <span data-ttu-id=\"19cf4-123\">Adicione uma propriedade de nome do meio e um novo construtor que use três cadeias de caracteres para a classe `Person`:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-123\">Add a middle name property, and a new constructor that takes three strings to your `Person` class:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\n<span data-ttu-id=\"19cf4-124\">A atribuição na propriedade `MiddleName` é um inicializador.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-124\">The assignment on the `MiddleName` property is an initializer.</span></span> <span data-ttu-id=\"19cf4-125\">Ele inicializa o campo de suporte gerado pelo compilador para o nome do meio.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-125\">It initializes the compiler-generated backing field for the middle name.</span></span>\n"
- title: <span data-ttu-id="19cf4-126">Membros aptos para expressão</span><span class="sxs-lookup"><span data-stu-id="19cf4-126">Expression-bodied members</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="19cf4-127">Os membros aptos para expressão fornecem uma sintaxe leve para métodos leves.</span><span class="sxs-lookup"><span data-stu-id="19cf4-127">Expression-bodied members provide a lightweight syntax for lightweight methods.</span></span> <span data-ttu-id="19cf4-128">A classe `Person` tem dois ótimos candidatos.</span><span class="sxs-lookup"><span data-stu-id="19cf4-128">The `Person` class has two great candidates.</span></span> <span data-ttu-id="19cf4-129">Examine a declaração de `ToString`:</span><span class="sxs-lookup"><span data-stu-id="19cf4-129">Look at the declaration of `ToString`:</span></span>


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    <span data-ttu-id="19cf4-130">Substitua a declaração de `ToString` pelo código a seguir:</span><span class="sxs-lookup"><span data-stu-id="19cf4-130">Replace that declaration of `ToString` with the following code:</span></span>


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    <span data-ttu-id="19cf4-131">Repita isso com o método `Caps`.</span><span class="sxs-lookup"><span data-stu-id="19cf4-131">Try the same with the `Caps` method.</span></span> <span data-ttu-id="19cf4-132">Essa é uma pequena melhoria, mas quando usada com sabedoria, ela cria um código muito mais legível, principalmente para DTOs (Objetos de Transferência de Dados) e outros tipos com comportamento mínimo.</span><span class="sxs-lookup"><span data-stu-id="19cf4-132">This is a small improvement, but when used wisely it creates much more readable code, especially for Data Transfer Objects (DTOs) and other types with minimal behavior.</span></span>
- title: <span data-ttu-id="19cf4-133">Importando uma única classe</span><span class="sxs-lookup"><span data-stu-id="19cf4-133">Importing a single class</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"19cf4-134\">Se você usar métodos estáticos de uma classe repetidamente em todo o código, a inclusão do nome de classe em todos os momentos obscurecerá o significado do código.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-134\">If you repeatedly use one class' static methods throughout your code, including the class name each time obscures the meaning of your code.</span></span> <span data-ttu-id=\"19cf4-135\">No momento, a classe `Person` importa o namespace `System`, mesmo que apenas <xref:System.Console?displayProperty=nameWithType> seja usado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-135\">The `Person` class currently imports the `System` namespace, even though only <xref:System.Console?displayProperty=nameWithType> is used.</span></span> <span data-ttu-id=\"19cf4-136\">Modifique a instrução `using` da seguinte maneira:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-136\">Modify the `using` statement as follows:</span></span>\n\n[!code-csharp[MiddleName](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\n<span data-ttu-id=\"19cf4-137\">A instrução `static using` torna-se mais útil em programas maiores que fazem uso intensivo de uma única classe com muitos métodos estáticos, como a classe [`string`](xref:System.String) ou a classe <xref:System.Math?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-137\">The `static using` statement becomes more useful in larger programs that make extensive use of a single class with many static methods, like the [`string`](xref:System.String) class or the <xref:System.Math?displayProperty=nameWithType> class.</span></span>\n"
- title: <span data-ttu-id="19cf4-138">Um formato de cadeia de caracteres melhor</span><span class="sxs-lookup"><span data-stu-id="19cf4-138">A better string format</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"19cf4-139\">O C# 6 contém uma nova sintaxe para compor cadeias de caracteres usando expressões inseridas e de cadeia de caracteres que são avaliadas para produzir outros valores de cadeia de caracteres.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-139\">C# 6 contains new syntax for composing strings from a string and embedded expressions that are evaluated to produce other string values.</span></span> <span data-ttu-id=\"19cf4-140\">Você pode alterar os métodos `ToString` e `AllCaps` para usar esta sintaxe:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-140\">You can change the `ToString` and `AllCaps` methods to use this syntax:</span></span>\n\n[!code-csharp[StringInterpolation](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\n<span data-ttu-id=\"19cf4-141\">Em vez de argumentos posicionais entre o `{` e `}`, você escreve expressões em C# diretamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-141\">Instead of positional arguments between the `{` and `}`, you write C# expressions directly.</span></span> <span data-ttu-id=\"19cf4-142\">Você pode fazer o mesmo no método `Main`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-142\">You can do the same in the `Main` method.</span></span> <span data-ttu-id=\"19cf4-143\">Substitua o código existente pelo seguinte:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-143\">Replace the existing code with the following:</span></span>\n\n[!code-csharp[InterpolationMain](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\n<span data-ttu-id=\"19cf4-144\">Você não está limitado a uma única variável nessas expressões.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-144\">You're not limited to a single variable in these expressions.</span></span> <span data-ttu-id=\"19cf4-145\">Vamos começar com um novo exemplo e modificá-lo para demonstrar outras expressões que você pode usar com a interpolação de cadeia de caracteres.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-145\">Let's start with a new example and modify it to demonstrate other expressions you can use with string interpolation.</span></span> <span data-ttu-id=\"19cf4-146\">Cole o código a seguir na janela interativa no método `Main`:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-146\">Paste the following code into the interactive window in the `Main` method:</span></span>\n\n[!code-csharp[Phrases](../../../../samples/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \n\n<span data-ttu-id=\"19cf4-147\">Você pode remover a variável local `average` e fazer esse cálculo como parte da expressão de cadeia de caracteres interpolada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-147\">You can remove the local variable `average` and perform that calculation as part of the interpolated string expression.</span></span> <span data-ttu-id=\"19cf4-148\">Substitua as duas últimas linhas pelo seguinte:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-148\">Replace the last two lines with the following:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\n<span data-ttu-id=\"19cf4-149\">Ao executar o exemplo anterior, você veria que a saída de `Average` tem mais casas decimais do que o desejado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-149\">Running the preceding example, you would find that the output for `Average` has more decimal places than you would like.</span></span> <span data-ttu-id=\"19cf4-150\">A sintaxe de interpolação de cadeia de caracteres dá suporte a todas as cadeias de caracteres de formato disponíveis que usam métodos de formatação anteriores.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-150\">The string interpolation syntax supports all the format strings available using earlier formatting methods.</span></span> <span data-ttu-id=\"19cf4-151\">Especifique a cadeia de caracteres de formato entre chaves.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-151\">You specify the format string inside the braces.</span></span> <span data-ttu-id=\"19cf4-152\">Adicione um `:` seguido da expressão a ser formatada:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-152\">Add a `:` following the expression to format:</span></span>\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: <span data-ttu-id="19cf4-153">Verificações de nulos rápidas e fáceis</span><span class="sxs-lookup"><span data-stu-id="19cf4-153">Quick and easy null checks</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"19cf4-154\">O operador `?.` (condicional nulo) facilita a escrita da lógica que considera valores `null` perfeitamente, sem verificações extras `if`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-154\">The `?.` (null conditional) operator makes it easier to write logic that takes `null` values into account seamlessly, without extra `if` checks.</span></span> <span data-ttu-id=\"19cf4-155\">Para explorar o recurso, comece copiando o código a seguir na janela interativa para testá-lo:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-155\">To explore the feature, start by copying the following code into the interactive window to try it:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\n<span data-ttu-id=\"19cf4-156\">Ele gera uma <xref:System.NullReferenceException> quando você executa o exemplo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-156\">It throws a <xref:System.NullReferenceException> when you run the sample.</span></span> <span data-ttu-id=\"19cf4-157\">Altere o operador de acesso de membro `.` para o **operador condicional nulo**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-157\">Change the `.` member access operator to the **null conditional operator**:</span></span>\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\n<span data-ttu-id=\"19cf4-158\">Após essa alteração, não haverá nenhuma saída.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-158\">After this change, there's no output.</span></span> <span data-ttu-id=\"19cf4-159\">Isso ocorre porque o resultado de `s?.Length` é um `int?` quando o resultado de `s.Length` é um `int`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-159\">That's because the result of `s?.Length` is an `int?` when the result of `s.Length` is an `int`.</span></span> <span data-ttu-id=\"19cf4-160\">Neste exemplo, `s?.Length` é `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-160\">In this example, `s?.Length` is `null`.</span></span> <span data-ttu-id=\"19cf4-161\">O `?.` retorna `null` quando o operando esquerdo é `null`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-161\">The `?.` returns `null` if its left operand is `null`.</span></span> <span data-ttu-id=\"19cf4-162\">Se o tipo do operando à direita for um tipo de valor, o operador `?.` retornará um tipo que permite valor nulo para esse tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-162\">If the type of the right operand is a value type, the `?.` operator returns a nullable type for that type.</span></span> <span data-ttu-id=\"19cf4-163\">Além de `?.` você pode usar `?[]` para acesso de matriz ou de indexador.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-163\">In addition to `?.` you can use `?[]` for array or indexer access.</span></span> <span data-ttu-id=\"19cf4-164\">Experimente o seguinte código na janela interativa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-164\">Try the following code in the interactive window:</span></span>\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n <span data-ttu-id=\"19cf4-165\">Vários operadores condicionais podem ser combinados em uma única expressão.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-165\">Multiple conditional operators can be combined into a single expression.</span></span> <span data-ttu-id=\"19cf4-166\">Um operando esquerdo `null` produz um resultado `null`, tornando fácil evitar que cláusulas if aninhadas acessem membros de membros.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-166\">A `null` left operand produces a `null` result, making it easy to avoid nested if clauses to access members of members.</span></span> <span data-ttu-id=\"19cf4-167\">Por exemplo, tente o seguinte código na janela interativa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-167\">For example, try the following code in the interactive window:</span></span>\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue);\n ```\n\n <span data-ttu-id=\"19cf4-168\">O exemplo anterior pode ser simplificado usando o **operador de união nulo** para fornecer um valor padrão:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-168\">The preceding example can be simplified by using the **null coalescing operator** to provide a default value:</span></span>\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n <span data-ttu-id=\"19cf4-169\">O **operador condicional nulo** ajuda a escrever um código que esclarece a lógica principal testando a presença de `null` perfeitamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-169\">The **null conditional operator** helps you write code that makes your core logic clear while seamlessly testing for `null` values.</span></span>\n"
- title: <span data-ttu-id="19cf4-170">Filtros de exceção</span><span class="sxs-lookup"><span data-stu-id="19cf4-170">Exception filters</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"19cf4-171\">Os filtros de exceção permitem que você capture uma exceção com base em alguma condição.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-171\">Exception filters enable you to catch an exception based on some condition.</span></span> <span data-ttu-id=\"19cf4-172\">Um uso típico é criar um método de filtro que registre exceções em log, mas nunca trate essas exceções.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-172\">A typical use is to create a filter method that logs exceptions, but never handles those exceptions.</span></span> <span data-ttu-id=\"19cf4-173\">Um filtro de exceção é uma expressão booliana que é `true` quando a cláusula `catch` deve ser executada e `false` quando a exceção não deve ser capturada pela cláusula `catch`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-173\">An exception filter is a boolean expression that is `true` when the `catch` clause should be executed, and `false` when the exception should not be caught by the `catch` clause.</span></span> <span data-ttu-id=\"19cf4-174\">Experimente o seguinte código na janela interativa: Ele registra em log o tipo de exceção e a mensagem no console.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-174\">Try the following code in the interactive window: It logs the exception type and message to the console.</span></span> <span data-ttu-id=\"19cf4-175\">Ele retorna `false`, o que indica que a exceção não pode ser tratada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-175\">It returns `false` which indicates that the exception can't be handled.</span></span> <span data-ttu-id=\"19cf4-176\">Experimente o programa na janela interativa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-176\">Try the program in the interactive window.</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\n<span data-ttu-id=\"19cf4-177\">Você deverá ver a mensagem do método `LogException`, seguida pela mensagem de exceção padrão.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-177\">You should see the message from the `LogException` method, followed by the default exception message.</span></span> <span data-ttu-id=\"19cf4-178\">Apenas para experimentar, altere a instrução `return false` para `return true` e execute isso novamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-178\">Just to experiment, change the `return false` statement to `return true` and run this again.</span></span> <span data-ttu-id=\"19cf4-179\">Agora, a exceção é capturada e o programa é executado até a conclusão.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-179\">Now, the exception is caught and the program runs to completion.</span></span>\n\n<span data-ttu-id=\"19cf4-180\">Além dos cenários de registro em log, os filtros de exceção podem ser mais úteis quando uma propriedade da exceção determina qual ação será tomada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-180\">Beyond logging scenarios, exception filters can be most useful when a property of the exception determines what action to take.</span></span> <span data-ttu-id=\"19cf4-181\">Por exemplo, você pode examinar um <xref:System.AggregateException> para ver quais são as exceções independentes e executar alguma ação apropriada dependendo da exceção específica.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-181\">For example, you can look inside an <xref:System.AggregateException> to see what the contained exceptions are and take some appropriate action depending on the specific exception.</span></span>\n"
- title: <span data-ttu-id="19cf4-182">Usar nameof</span><span class="sxs-lookup"><span data-stu-id="19cf4-182">Using nameof</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"19cf4-183\">O operador `nameof` retorna o nome de qualquer variável, um tipo ou um membro de um tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-183\">The `nameof` operator returns the name of any variable, a type, or a type's member.</span></span> <span data-ttu-id=\"19cf4-184\">Experimente o seguinte código na janela interativa para ver como ele funciona:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-184\">Try the following code in the interactive window to see how it works:</span></span>\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\n<span data-ttu-id=\"19cf4-185\">A saída corresponde ao nome da variável ou ao tipo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-185\">The output matches the name of the variable or type.</span></span> <span data-ttu-id=\"19cf4-186\">Até mesmo quando você fornece o nome do tipo totalmente qualificado (como `System.String`) o operador `nameof` retorna o nome não qualificado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-186\">Even when you provided the fully qualified type name (such as `System.String`) the `nameof` operator returns the unqualified name.</span></span> <span data-ttu-id=\"19cf4-187\">Esse recurso é mais útil quando você precisa converter um nome de parâmetro ou de propriedade em uma cadeia de caracteres.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-187\">This feature is most useful when you need to convert a parameter or property name to a string.</span></span> <span data-ttu-id=\"19cf4-188\">Os exemplos incluem capturar o nome de um argumento para gerar uma <xref:System.ArgumentNullException> ou <xref:System.ArgumentException> ou capturar o nome de uma propriedade alterada ao implementar <xref:System.ComponentModel.INotifyPropertyChanged>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-188\">Examples include capturing the name of an argument for throwing a <xref:System.ArgumentNullException> or <xref:System.ArgumentException>, or capturing the name of a changed property when implementing <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span> \n"
- title: <span data-ttu-id="19cf4-189">Sintaxe de nova inicialização de objeto</span><span class="sxs-lookup"><span data-stu-id="19cf4-189">New object initialization syntax</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"19cf4-190\">A nova inicialização de objeto permite que você crie métodos que facilitem a inicialização de dicionários e outros tipos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-190\">New object initialization enables you to create methods that make it easier to initialize dictionaries, and other types.</span></span> <span data-ttu-id=\"19cf4-191\">Comece com um dicionário.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-191\">Start with a dictionary.</span></span> <span data-ttu-id=\"19cf4-192\">Execute o seguinte código na janela interativa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-192\">Run the following code in the interactive window:</span></span>\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\n<span data-ttu-id=\"19cf4-193\">Você pode estender essa sintaxe para qualquer classe que implemente <xref:System.Collections.IEnumerable> e tenha o método `Add` acessível publicamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-193\">You can extend this syntax to any class that implements <xref:System.Collections.IEnumerable> and has a publicly accessible `Add` method.</span></span>  <span data-ttu-id=\"19cf4-194\">Experimente o exemplo a seguir na janela interativa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-194\">Try the following sample in the interactive window.</span></span> <span data-ttu-id=\"19cf4-195\">Ele cria uma classe `Path` que implementa `IEnumerable<Point3D>` e tem um método para adicionar pontos que usa três argumentos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-195\">It creates a `Path` class that implements `IEnumerable<Point3D>` and has a method to add points that takes three arguments.</span></span> <span data-ttu-id=\"19cf4-196\">Ele também combina outras técnicas já demonstradas neste tutorial, como membros aptos para expressão e interpolação de cadeia de caracteres.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-196\">It also combines other techniques already demonstrated in this tutorial, such as expression-bodied members and string interpolation.</span></span> \n\n<span data-ttu-id=\"19cf4-197\">No método `Main`, você inicializa um caminho, fornecendo as coordenadas para os pontos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-197\">In the `Main` method, you initialize a path by providing coordinates for the points.</span></span> <span data-ttu-id=\"19cf4-198\">Esses pontos são adicionados à coleção por meio do método `Add`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-198\">Those points are added to the collection through the `Add` method.</span></span>\n\n<span data-ttu-id=\"19cf4-199\">O método `Add` também pode ser um método de extensão.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-199\">The `Add` method can also be an extension method.</span></span> <span data-ttu-id=\"19cf4-200\">Você pode atualizar o exemplo anterior da seguinte maneira.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-200\">You could update the preceding sample as follows.</span></span> <span data-ttu-id=\"19cf4-201\">Este exemplo não será compilado na experiência interativa, devido às limitações da área restrita.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-201\">This sample won't compile in the interactive experience because of sandbox limitations.</span></span> <span data-ttu-id=\"19cf4-202\">Você pode experimentá-lo em seu próprio computador.</span><span class=\"sxs-lookup\"><span data-stu-id=\"19cf4-202\">You can try it on your own machine.</span></span>\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: <span data-ttu-id="19cf4-203">Você concluiu uma exploração dos novos recursos no C# 6.</span><span class="sxs-lookup"><span data-stu-id="19cf4-203">You've completed an exploration of the new features in C# 6.</span></span> <span data-ttu-id="19cf4-204">Agora experimente-os em seus aplicativos.</span><span class="sxs-lookup"><span data-stu-id="19cf4-204">Now try them yourself in your applications.</span></span>
