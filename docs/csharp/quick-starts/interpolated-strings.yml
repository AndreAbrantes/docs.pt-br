### YamlMime:Tutorial
title: <span data-ttu-id="a0aac-101">Cadeias de caracteres interpoladas em C#</span><span class="sxs-lookup"><span data-stu-id="a0aac-101">Interpolated strings in C#</span></span>
metadata:
  title: "Cadeias de caracteres interpoladas em C#. Saiba como construir uma cadeia de caracteres que inclui outros valores, como números ou datas."
  description: "Neste tutorial, você usará o recurso de cadeia de caracteres interpolada do C# de forma interativa em seu navegador. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "<span data-ttu-id=\"a0aac-106\">Coleções em C#</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-106\">Collections in C#</span></span>"
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "<span data-ttu-id=\"a0aac-107\">Este guia de início rápido ensina como usar cadeias de caracteres interpoladas em C# para inserir valores em uma única cadeia de caracteres de saída de maneira interativa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-107\">This quick start teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id=\"a0aac-108\">Você usará seu navegador para escrever código em C# e poderá ver imediatamente os resultados da compilação e da execução de seu código.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-108\">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id=\"a0aac-109\">O início rápido contém uma série de lições que concatenam cadeias de caracteres, inserem valores em cadeias de caracteres e formatam esses valores de diferentes maneiras.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-109\">The quick start contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>\n"
- title: <span data-ttu-id="a0aac-110">Criar uma cadeia de caracteres interpolada</span><span class="sxs-lookup"><span data-stu-id="a0aac-110">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"a0aac-111\">Execute o seguinte código na janela interativa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"a0aac-112\">Para fazer isso, digite o bloco de código a seguir na janela interativa (substitua \"\\<name>\" pelo seu nome) e clique no botão **Executar**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-112\">To do that, type the following code block in the interactive window (replace \"\\<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"a0aac-113\">Ao executar o programa, ele exibe uma única cadeia de caracteres que inclui seu nome na saudação.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-113\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"a0aac-114\">A cadeia de caracteres incluída na chamada de método <xref:System.Console.WriteLine%2A> é uma *cadeia de caracteres interpolada*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-114\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"a0aac-115\">Ela é um tipo de modelo que permite que você construa uma única cadeia de caracteres (chamado de *cadeia de caracteres de resultado*) com base em uma cadeia de caracteres que inclui o código inserido.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-115\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"a0aac-116\">As cadeias de caracteres interpoladas são particularmente úteis para inserir valores em uma cadeia de caracteres ou para concatenar (unir) cadeias de caracteres.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-116\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"a0aac-117\">Esse exemplo simples contém os dois elementos que toda cadeia de caracteres interpolada deve ter:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-117\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"a0aac-118\">Um literal de cadeia de caracteres que começa com o caractere `$` antes do caractere de aspas de abertura.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-118\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"a0aac-119\">Não pode haver nenhum espaço entre o símbolo `$` e o caractere de aspas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-119\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"a0aac-120\">(Se você quiser ver o que acontece ao incluir um espaço, insira um após o caractere `$` na janela interativa e clique no botão **Executar**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-120\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"a0aac-121\">O compilador do C# informará: \"Caractere '$' inesperado\").</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-121\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"a0aac-122\">Uma ou mais *expressões interpoladas*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-122\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"a0aac-123\">Uma expressão interpolada é indicada por chaves de abertura e fechamento (`{` e `}`).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-123\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"a0aac-124\">Você pode colocar qualquer expressão de C# que retorne um valor (incluindo `null`) dentro das chaves.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-124\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"a0aac-125\">Vamos experimentar mais alguns exemplos de cadeia de caracteres interpolados com outros tipos de dados.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-125\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a0aac-126\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-126\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a0aac-127\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-127\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a0aac-128">Incluir diferentes tipos de dados</span><span class="sxs-lookup"><span data-stu-id="a0aac-128">Include different data types</span></span>
  durationInMinutes: 3
  content: "<span data-ttu-id=\"a0aac-129\">No guia de início rápido anterior, você usou uma cadeia de caracteres interpolada para inserir uma cadeia de caracteres dentro de outra.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-129\">In the previous quick start, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"a0aac-130\">No entanto, uma expressão de cadeia de caracteres interpolada pode ser de qualquer tipo de dados.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-130\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"a0aac-131\">Vamos experimentar uma cadeia de caracteres interpolada com valores de vários tipos de dados.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-131\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"a0aac-132\">O exemplo a seguir inclui expressões interpoladas com um objeto `Vegetable`, um membro da enumeração `Unit`, um valor <xref:System.DateTime> e um valor <xref:System.Decimal>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-132\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"a0aac-133\">Execute o na janela interativa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-133\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"a0aac-134\">Observe que uma das expressões interpoladas inclui o objeto `item` na cadeia de caracteres de resultado que é exibida no console e, nesse caso, a cadeia de caracteres \"eggplant\" é inserida na cadeia de caracteres de resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-134\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"a0aac-135\">Isso ocorre porque, quando o tipo de uma expressão interpolada não é uma cadeia de caracteres, o compilador do C# faz o seguinte:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-135\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"a0aac-136\">Se a expressão interpolada é `null`, a expressão interpolada retorna uma cadeia de caracteres vazia (\"\" ou <xref:System.String.Empty?displayProperty=nameWithType>).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-136\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"a0aac-137\">Se a expressão interpolada não é `null`, o método `ToString` do tipo da expressão interpolada é chamado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-137\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"a0aac-138\">Você pode testar isso comentando a definição do método `Vegetable.ToString` no exemplo, colocando um símbolo de comentário (`//`) na frente dele.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-138\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"a0aac-139\">Na saída, a cadeia de caracteres \"eggplant\" é substituída pelo nome de tipo totalmente qualificado (o namespace definido pelo REPL do C# junto com o nome de tipo), que é o comportamento padrão do método <xref:System.Object.ToString?displayProperty=nameWithType>.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-139\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"a0aac-140\">Na saída deste exemplo, a data é muito precisa (o preço de eggplant não varia por segundo) e o valor do preço não indica uma unidade monetária.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-140\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"a0aac-141\">Na próxima etapa, você aprenderá como corrigir esses problemas controlando o formato das cadeias de caracteres retornadas pelas expressões interpoladas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-141\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a0aac-142\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-142\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a0aac-143\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-143\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"a0aac-144\">Controlar a formatação de expressões interpoladas</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-144\">Control the formatting of interpolated expressions</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"a0aac-145\">Na lição anterior, duas cadeias de caracteres formatadas de maneira inadequada foram inseridas na cadeia de caracteres de resultado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-145\">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id=\"a0aac-146\">Uma era um valor de data e hora para a qual apenas a data era adequada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-146\">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id=\"a0aac-147\">A segunda era um preço que não indicava a unidade monetária.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-147\">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id=\"a0aac-148\">Os dois problemas são fáceis de se resolver.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-148\">Both issues are easy to address.</span></span> <span data-ttu-id=\"a0aac-149\">As expressões interpoladas podem incluir *cadeias de caracteres de formato* que controlam a formatação de tipos específicos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-149\">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id=\"a0aac-150\">Modifique a chamada a `Console.WriteLine` no exemplo anterior para incluir o especificador de formato para os campos de data e de preço, conforme mostrado na linha a seguir:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-150\">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\n<span data-ttu-id=\"a0aac-151\">Você especifica uma cadeia de caracteres de formato colocando dois-pontos e a cadeia de caracteres de formato após a expressão interpolada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-151\">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id=\"a0aac-152\">\"d\" é uma [cadeia de caracteres de formato de data e hora padrão](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) que representa o formato de data abreviada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-152\">\"d\" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id=\"a0aac-153\">\"C2\" é um [cadeia de caracteres de formato numérico padrão](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) que representa um número como um valor de moeda com dois dígitos após o ponto decimal.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-153\">\"C2\" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>\n\n<span data-ttu-id=\"a0aac-154\">Diversos tipos nas bibliotecas do .NET Standard são compatíveis com um conjunto predefinido de cadeias de caracteres de formato.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-154\">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id=\"a0aac-155\">Isso inclui todos os tipos numéricos e os tipos de data e hora.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-155\">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id=\"a0aac-156\">Para obter uma lista completa dos tipos que são compatíveis com as cadeias de caracteres de formato, consulte [Cadeias de caracteres de formato e tipos da biblioteca de classes do .NET](../../standard/base-types/formatting-types.md#stringRef) no artigo [Tipos de formatação no .NET](../../standard/base-types/formatting-types.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-156\">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id=\"a0aac-157\">Qualquer tipo pode ser compatível com um conjunto de cadeias de caracteres de formato, e você também pode desenvolver extensões de formatação personalizadas que fornecem formatação personalizada para os tipos existentes.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-157\">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id=\"a0aac-158\">Para obter informações sobre formatação personalizada com o fornecimento de uma implementação de <xref:System.ICustomFormatter>, consulte [Formatação personalizada com ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) no artigo [Tipos de formatação no .NET](../../standard/base-types/formatting-types.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-158\">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>\n\n<span data-ttu-id=\"a0aac-159\">Tente modificar as cadeias de caracteres de formato no **Editor do .NET** para ver como eles afetam a formatação da data e hora e o valor numérico.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-159\">Try modifying the the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id=\"a0aac-160\">Altere o \"d\" em `{date:d}` para \"t\" (para exibir o formato de hora abreviada), para \"y\" (para exibir o ano e o mês) e para \"yyyy\" (para exibir o ano como um número de quatro dígitos).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-160\">Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number).</span></span> <span data-ttu-id=\"a0aac-161\">Altere o \"C2\" em `{price:C2}` para \"e\" (para obter notação exponencial) e para \"F3\" (para um valor numérico com três dígitos após o ponto decimal).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-161\">Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).</span></span>\n\n<span data-ttu-id=\"a0aac-162\">Além de controlar a formatação, você também pode controlar a largura do campo e o alinhamento das cadeias de caracteres retornadas por uma expressão interpolada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-162\">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id=\"a0aac-163\">Na próxima etapa, você aprenderá como fazer isso.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-163\">In the next step, you'll learn how to do this.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a0aac-164\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-164\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a0aac-165\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-165\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"a0aac-166\">Controlar a largura do campo e o alinhamento de expressões interpoladas</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-166\">Control the field width and alignment of interpolated expressions</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"a0aac-167\">Normalmente, quando a cadeia de caracteres retornada por uma expressão interpolada é incluída em uma cadeia de caracteres de resultado, ela não tem espaços à esquerda nem à direita.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-167\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"a0aac-168\">Especialmente para casos em que você esteja trabalhando com um conjunto de dados, as expressões interpoladas permitem que você especifique uma largura de campo e seu alinhamento.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-168\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"a0aac-169\">Para ver isso, execute o código a seguir.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-169\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"a0aac-170\">Os nomes dos item são alinhados à esquerda e suas quantidades são alinhadas à direita.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-170\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"a0aac-171\">Você especifica o alinhamento adicionando uma vírgula (\",\") após a expressão e designando a largura do campo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-171\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"a0aac-172\">Se a largura do campo for um número positivo, o campo será alinhado à direita:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-172\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"a0aac-173\">Se a largura do campo for um número negativo, o campo será alinhado à esquerda:</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-173\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"a0aac-174\">Tente remover os sinais negativos das expressões interpoladas `{\"Item\",-25}` e `{item.Key,-25}` e execute o exemplo novamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-174\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"a0aac-175\">Desta vez, o nome do item é alinhado à direita.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-175\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"a0aac-176\">Você pode combinar uma largura de campo e uma cadeia de caracteres de formato em uma única expressão interpolada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-176\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"a0aac-177\">A largura do campo vem primeiro, seguida por dois-pontos e a cadeia de caracteres de formato.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-177\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"a0aac-178\">Teste o seguinte programa simples que exibe três cadeias de caracteres formatadas com larguras de campo definidas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-178\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"a0aac-179\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-179\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a0aac-180\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-180\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"a0aac-181\">Você concluiu o guia de início rápido de cadeias de caracteres interpoladas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-181\">You've completed the interpolated strings quick start.</span></span> \n\n<span data-ttu-id=\"a0aac-182\">Você pode continuar esses inícios rápidos em seu próprio ambiente de desenvolvimento local.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-182\">You can continue these quick starts on your own local development environment.</span></span> <span data-ttu-id=\"a0aac-183\">Conheça os fundamentos do [desenvolvimento local](local-environment.md) e, em seguida, selecione um início rápido.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-183\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"a0aac-184\">Você pode experimentar este exercício, ir diretamente ao próximo início rápido ou começar novamente com o início rápido de [números em C#](numbers-in-csharp-local.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-184\">You can try this same exercise, move directly to the next quick start, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"a0aac-185\">Você pode aprender mais sobre como trabalhar com cadeias de caracteres interpoladas no tópico [Cadeias de caracteres interpoladas](../language-reference/keywords/interpolated-strings.md) na referência do C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"a0aac-185\">You can learn more about working with interpolated strings in the [Interpolated Strings](../language-reference/keywords/interpolated-strings.md) topic in the C# Reference.</span></span>\0"
