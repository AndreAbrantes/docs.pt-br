### YamlMime:Tutorial
title: Cadeias de caracteres interpoladas em C#
metadata:
  title: "Tutorial interativo sobre cadeias de caracteres interpoladas – guias de início rápido de C#"
  description: "Neste tutorial, você usará o recurso de cadeia de caracteres interpolada do C# de forma interativa em seu navegador. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "Coleções em C#"
  ms.openlocfilehash: 56c7cf5f6ce0c5db27ba43eeaffd9eb2e08f8c8a
  ms.sourcegitcommit: d2da0142247ef42a219a5d2907f153e62dc6ea0d
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 02/01/2018
items:
- durationInMinutes: 2
  content: "Este guia de início rápido ensina como usar cadeias de caracteres interpoladas em C# para inserir valores em uma única cadeia de caracteres de saída de maneira interativa. Você usará seu navegador para escrever código em C# e poderá ver imediatamente os resultados da compilação e da execução de seu código. O início rápido contém uma série de lições que concatenam cadeias de caracteres, inserem valores em cadeias de caracteres e formatam esses valores de diferentes maneiras.\n"
- title: Criar uma cadeia de caracteres interpolada
  durationInMinutes: 2
  content: "Execute o seguinte código na janela interativa. Para fazer isso, digite o bloco de código a seguir na janela interativa (substitua \"\\<name>\" pelo seu nome) e clique no botão **Executar**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nAo executar o programa, ele exibe uma única cadeia de caracteres que inclui seu nome na saudação. A cadeia de caracteres incluída na chamada de método <xref:System.Console.WriteLine%2A> é uma *cadeia de caracteres interpolada*. Ela é um tipo de modelo que permite que você construa uma única cadeia de caracteres (chamado de *cadeia de caracteres de resultado*) com base em uma cadeia de caracteres que inclui o código inserido. As cadeias de caracteres interpoladas são particularmente úteis para inserir valores em uma cadeia de caracteres ou para concatenar (unir) cadeias de caracteres. \n\nEsse exemplo simples contém os dois elementos que toda cadeia de caracteres interpolada deve ter: \n\n- Um literal de cadeia de caracteres que começa com o caractere `$` antes do caractere de aspas de abertura. Não pode haver nenhum espaço entre o símbolo `$` e o caractere de aspas. (Se você quiser ver o que acontece ao incluir um espaço, insira um após o caractere `$` na janela interativa e clique no botão **Executar**. O compilador do C# informará: \"Caractere '$' inesperado\"). \n\n- Uma ou mais *expressões interpoladas*. Uma expressão interpolada é indicada por chaves de abertura e fechamento (`{` e `}`). Você pode colocar qualquer expressão de C# que retorne um valor (incluindo `null`) dentro das chaves. \n\nVamos experimentar mais alguns exemplos de cadeia de caracteres interpolados com outros tipos de dados.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Incluir diferentes tipos de dados
  durationInMinutes: 3
  content: "No guia de início rápido anterior, você usou uma cadeia de caracteres interpolada para inserir uma cadeia de caracteres dentro de outra. No entanto, uma expressão de cadeia de caracteres interpolada pode ser de qualquer tipo de dados. Vamos experimentar uma cadeia de caracteres interpolada com valores de vários tipos de dados. \n\nO exemplo a seguir inclui expressões interpoladas com um objeto `Vegetable`, um membro da enumeração `Unit`, um valor <xref:System.DateTime> e um valor <xref:System.Decimal>. Execute o na janela interativa.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nObserve que uma das expressões interpoladas inclui o objeto `item` na cadeia de caracteres de resultado que é exibida no console e, nesse caso, a cadeia de caracteres \"eggplant\" é inserida na cadeia de caracteres de resultado. Isso ocorre porque, quando o tipo de uma expressão interpolada não é uma cadeia de caracteres, o compilador do C# faz o seguinte:\n\n- Se a expressão interpolada é `null`, a expressão interpolada retorna uma cadeia de caracteres vazia (\"\" ou <xref:System.String.Empty?displayProperty=nameWithType>).\n\n- Se a expressão interpolada não é `null`, o método `ToString` do tipo da expressão interpolada é chamado. Você pode testar isso comentando a definição do método `Vegetable.ToString` no exemplo, colocando um símbolo de comentário (`//`) na frente dele. Na saída, a cadeia de caracteres \"eggplant\" é substituída pelo nome de tipo totalmente qualificado (o namespace definido pelo REPL do C# junto com o nome de tipo), que é o comportamento padrão do método <xref:System.Object.ToString?displayProperty=nameWithType>.   \n\nNa saída deste exemplo, a data é muito precisa (o preço de eggplant não varia por segundo) e o valor do preço não indica uma unidade monetária. Na próxima etapa, você aprenderá como corrigir esses problemas controlando o formato das cadeias de caracteres retornadas pelas expressões interpoladas.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Controlar a formatação de expressões interpoladas"
  durationInMinutes: 5
  content: "Na lição anterior, duas cadeias de caracteres formatadas de maneira inadequada foram inseridas na cadeia de caracteres de resultado. Uma era um valor de data e hora para a qual apenas a data era adequada. A segunda era um preço que não indicava a unidade monetária. Os dois problemas são fáceis de se resolver. As expressões interpoladas podem incluir *cadeias de caracteres de formato* que controlam a formatação de tipos específicos. Modifique a chamada a `Console.WriteLine` no exemplo anterior para incluir o especificador de formato para os campos de data e de preço, conforme mostrado na linha a seguir:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nVocê especifica uma cadeia de caracteres de formato colocando dois-pontos e a cadeia de caracteres de formato após a expressão interpolada. \"d\" é uma [cadeia de caracteres de formato de data e hora padrão](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) que representa o formato de data abreviada. \"C2\" é um [cadeia de caracteres de formato numérico padrão](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) que representa um número como um valor de moeda com dois dígitos após o ponto decimal.\n\nDiversos tipos nas bibliotecas do .NET Standard são compatíveis com um conjunto predefinido de cadeias de caracteres de formato. Isso inclui todos os tipos numéricos e os tipos de data e hora. Para obter uma lista completa dos tipos que são compatíveis com as cadeias de caracteres de formato, consulte [Cadeias de caracteres de formato e tipos da biblioteca de classes do .NET](../../standard/base-types/formatting-types.md#stringRef) no artigo [Tipos de formatação no .NET](../../standard/base-types/formatting-types.md). Qualquer tipo pode ser compatível com um conjunto de cadeias de caracteres de formato, e você também pode desenvolver extensões de formatação personalizadas que fornecem formatação personalizada para os tipos existentes. Para obter informações sobre formatação personalizada com o fornecimento de uma implementação de <xref:System.ICustomFormatter>, consulte [Formatação personalizada com ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) no artigo [Tipos de formatação no .NET](../../standard/base-types/formatting-types.md).\n\nTente modificar as cadeias de caracteres de formato no **Editor do .NET** para ver como eles afetam a formatação da data e hora e o valor numérico. Altere o \"d\" em `{date:d}` para \"t\" (para exibir o formato de hora abreviada), para \"y\" (para exibir o ano e o mês) e para \"yyyy\" (para exibir o ano como um número de quatro dígitos). Altere o \"C2\" em `{price:C2}` para \"e\" (para obter notação exponencial) e para \"F3\" (para um valor numérico com três dígitos após o ponto decimal).\n\nAlém de controlar a formatação, você também pode controlar a largura do campo e o alinhamento das cadeias de caracteres retornadas por uma expressão interpolada. Na próxima etapa, você aprenderá como fazer isso.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Controlar a largura do campo e o alinhamento de expressões interpoladas"
  durationInMinutes: 6
  content: "Normalmente, quando a cadeia de caracteres retornada por uma expressão interpolada é incluída em uma cadeia de caracteres de resultado, ela não tem espaços à esquerda nem à direita. Especialmente para casos em que você esteja trabalhando com um conjunto de dados, as expressões interpoladas permitem que você especifique uma largura de campo e seu alinhamento. Para ver isso, execute o código a seguir.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nOs nomes dos item são alinhados à esquerda e suas quantidades são alinhadas à direita. Você especifica o alinhamento adicionando uma vírgula (\",\") após a expressão e designando a largura do campo. Se a largura do campo for um número positivo, o campo será alinhado à direita:\n\n```text\n{expression, width}\n```\n\nSe a largura do campo for um número negativo, o campo será alinhado à esquerda:\n\n```text\n{expression, -width}\n```\nTente remover os sinais negativos das expressões interpoladas `{\"Item\",-25}` e `{item.Key,-25}` e execute o exemplo novamente. Desta vez, o nome do item é alinhado à direita.\n\nVocê pode combinar uma largura de campo e uma cadeia de caracteres de formato em uma única expressão interpolada. A largura do campo vem primeiro, seguida por dois-pontos e a cadeia de caracteres de formato. Teste o seguinte programa simples que exibe três cadeias de caracteres formatadas com larguras de campo definidas.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "Você concluiu o guia de início rápido de cadeias de caracteres interpoladas. \n\nVocê pode continuar esses inícios rápidos em seu próprio ambiente de desenvolvimento local. Conheça os fundamentos do [desenvolvimento local](local-environment.md) e selecione um início rápido. Você pode experimentar este exercício, ir diretamente para o próximo início rápido ou começar novamente com o início rápido de [números em C#](numbers-in-csharp-local.md).\n\nVocê pode aprender mais sobre como trabalhar com cadeias de caracteres interpoladas no tópico [Cadeias de caracteres interpoladas](../language-reference/keywords/interpolated-strings.md) na referência do C#.\0"
