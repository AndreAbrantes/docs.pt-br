### YamlMime:Tutorial
title: Interpolação de cadeias de caracteres em C#
metadata:
  title: Tutorial interativo sobre interpolação de cadeias de caracteres – guias de início rápido de C#
  description: Neste tutorial, você usará seu navegador para explorar de forma interativa o recurso de interpolação de cadeias de caracteres. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Coleções em C#
  ms.openlocfilehash: ac9c8488c787b1dc9b4fb60b18834d328faa4e83
  ms.sourcegitcommit: 88f251b08bf0718ce119f3d7302f514b74895038
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 05/10/2018
items:
- durationInMinutes: 2
  content: >
    Este guia de início rápido ensina como usar a [interpolação de cadeias de caracteres](../language-reference/tokens/interpolated.md) para inserir valores em uma única cadeia de caracteres. Você também aprenderá a controlar as representações de texto desses valores na cadeia de caracteres de resultado. Você usará seu navegador para escrever e executar código em C# e poderá ver imediatamente os resultados produzidos.
- title: Criar uma cadeia de caracteres interpolada
  durationInMinutes: 2
  content: "Execute o seguinte código na janela interativa. Para fazer isso, digite o código na janela interativa (substitua \"`\\<name>`\" por seu nome) e selecione **Executar**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nQuando o código é executado, **Saída** exibe uma cadeia de caracteres que inclui seu nome na saudação. O argumento de cadeia de caracteres da chamada de método <xref:System.Console.WriteLine%2A> é uma *cadeia de caracteres interpolada*. Ela é um tipo de modelo que permite que você construa uma única cadeia de caracteres (chamado de *cadeia de caracteres de resultado*) com base em uma cadeia de caracteres que inclui o código inserido. Cadeias de caracteres interpoladas são particularmente úteis para inserir valores em uma cadeia de caracteres ou para concatenar (unir) várias cadeias de caracteres. \n\nO exemplo acima contém os dois elementos que toda cadeia de caracteres interpolada deve ter: \n\n- Um literal de cadeia de caracteres que começa com o caractere `$` antes do caractere de aspas de abertura. Não pode haver nenhum espaço entre o símbolo `$` e o caractere de aspas. (Se quiser ver o que acontece ao incluir um espaço, insira um após o caractere `$` na janela interativa e execute o código atualizado. O compilador do C# informará: \"Caractere '$' inesperado\"). \n\n- Uma ou mais *expressões interpoladas*. Uma expressão interpolada é indicada por chaves de abertura e fechamento (`{` e `}`). Você pode colocar qualquer expressão de C# que retorne um valor (incluindo `null`) dentro das chaves. \n\nVamos testar mais alguns exemplos de interpolação de cadeias de caracteres com outros tipos de dados.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Incluir diferentes tipos de dados
  durationInMinutes: 5
  content: "Na etapa anterior, você usou a interpolação de cadeias de caracteres para inserir uma cadeia de caracteres dentro de outra. Entretanto, o resultado de uma expressão interpolada pode ser de qualquer tipo de dados. Vamos incluir valores de vários tipos de dados em uma cadeia de caracteres interpolada. \n\nNo exemplo a seguir, primeiro, definimos um tipo de dados personalizado `Vegetable` que tem a [propriedade](../properties.md) `Name` e o método `ToString`. O código do cliente pode usar esse método para obter a representação de cadeia de caracteres de uma instância `Vegetable`. No exemplo, o método `Vegetable.ToString` retorna o valor da propriedade `Name` que é inicializada no construtor `Vegetable`: `Vegetable(string name) => Name = name;`. Em seguida, nós criamos uma instância do tipo `Vegetable` usando a palavra-chave `new` e fornecendo um parâmetro de nome para o construtor `Vegetable`. Por fim, incluímos essa instância em uma cadeia de caracteres interpolada que também contém um valor <xref:System.DateTime>, um valor <xref:System.Decimal> e um valor de [enumeração](../programming-guide/enumeration-types.md) `Unit`. Execute o seguinte código na janela interativa:\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic enum Unit { item, pound, ounce, dozen };\n\nvar item = new Vegetable(\"eggplant\");\nvar date = DateTime.Now;\nvar price = 1.99m;\nvar unit = Unit.item;\nConsole.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n```\n\nObserve que a expressão interpolada `item` na cadeia de caracteres interpolada é resolvida como o texto \"eggplant\" na cadeia de caracteres de resultado. Isso ocorre porque, quando o tipo do resultado da expressão não é uma cadeia de caracteres, o resultado é resolvido como uma cadeia de caracteres da seguinte maneira:\n\n- Se a expressão interpolada for avaliada como `null`, uma cadeia de caracteres vazia (\"\" ou <xref:System.String.Empty?displayProperty=nameWithType>) será usada.\n\n- Se a expressão interpolada não foi avaliada como `null`, normalmente o método `ToString` do tipo de resultado será chamado. Você pode testar isso atualizando a implementação do método `Vegetable.ToString`. Você pode até mesmo não implementar o método `ToString`, uma vez que cada tipo de dados de C# tem alguma implementação deste método. Para testar isso, comente a definição do método `Vegetable.ToString` no exemplo (para fazer isso, coloque um símbolo de comentário `//` na frente dele). Na saída, a cadeia de caracteres \"eggplant\" é substituída pelo nome de tipo totalmente qualificado (o namespace definido pelo REPL do C# junto com o nome de tipo), que é o comportamento padrão do método <xref:System.Object.ToString?displayProperty=nameWithType>. O comportamento padrão do método `ToString` para um tipo de enumeração é retornar a representação de cadeia de caracteres de um valor usado na definição da enumeração.   \n\nNa saída deste exemplo, a data é muito precisa (o preço de \"eggplant\" não muda a cada segundo) e o valor do preço não indica uma unidade monetária. Na próxima etapa, você aprenderá a corrigir esses problemas controlando o formato das representações das cadeias de caracteres dos resultados de expressão.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Controlar a formatação de expressões interpoladas
  durationInMinutes: 5
  content: >
    Na etapa anterior, duas cadeias de caracteres formatadas de maneira inadequada foram inseridas na cadeia de caracteres de resultado. Uma era um valor de data e hora para a qual apenas a data era adequada. A segunda era um preço que não indicava a unidade monetária. Os dois problemas são fáceis de se resolver. A interpolação de cadeias de caracteres permite especificar *cadeias de caracteres de formato* que controlam a formatação de tipos específicos. Modifique a chamada a `Console.WriteLine` no exemplo anterior para incluir as cadeias de caracteres de formato para as expressões de data e de preço, conforme mostrado na linha a seguir:


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    Você especifica uma cadeia de caracteres de formato colocando dois-pontos (":") e a cadeia de caracteres de formato após a expressão interpolada. "d" é uma [cadeia de caracteres de formato de data e hora padrão](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) que representa o formato de data abreviada. "C2" é um [cadeia de caracteres de formato numérico padrão](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) que representa um número como um valor de moeda com dois dígitos após o ponto decimal.


    Diversos tipos nas bibliotecas do .NET são compatíveis com um conjunto predefinido de cadeias de caracteres de formato. Isso inclui todos os tipos numéricos e os tipos de data e hora. Para obter uma lista completa dos tipos que são compatíveis com as cadeias de caracteres de formato, consulte [Cadeias de caracteres de formato e tipos da biblioteca de classes do .NET](../../standard/base-types/formatting-types.md#stringRef) no artigo [Tipos de formatação no .NET](../../standard/base-types/formatting-types.md).


    Tente modificar as cadeias de caracteres de formato no exemplo para ver como elas afetam a formatação da data e hora e o valor numérico. Altere o "d" em `{date:d}` para "t" (para exibir o formato de hora abreviada), para "y" (para exibir o ano e o mês) e para "yyyy" (para exibir o ano como um número de quatro dígitos). Altere o "C2" em `{price:C2}` para "e" (para obter notação exponencial) e para "F3" (para um valor numérico com três dígitos após o ponto decimal).


    Além de controlar a formatação, você também pode controlar a largura do campo e o alinhamento das cadeias de caracteres formatadas incluídas na cadeia de caracteres de resultado. Na próxima etapa, você aprenderá como fazer isso.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- title: Controlar a largura do campo e o alinhamento de expressões interpoladas
  durationInMinutes: 6
  content: >
    Normalmente, quando o resultado de uma expressão interpolada é formatado em uma cadeia de caracteres, essa cadeia de caracteres é incluída em uma cadeia de caracteres sem espaços à esquerda nem à direita. Especialmente quando você trabalha com um conjunto de dados, poder controlar a largura do campo e o alinhamento do texto ajuda a produzir uma saída mais legível. Para ver isso, execute o código a seguir:


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    Os nomes dos item são alinhados à esquerda e suas quantidades são alinhadas à direita. Você especifica o alinhamento adicionando uma vírgula (",") após a expressão interpolada e designando a largura *mínima* do campo. Se o valor especificado for um número positivo, o campo será alinhado à direita. Se for um número negativo, o campo será alinhado à esquerda.


    Tente remover os sinais negativos do código `{"Item",-25}` e `{item.Key,-25}` e execute o exemplo novamente. Desta vez, os nomes dos itens são alinhados à direita.


    Você pode combinar um especificador de alinhamento e uma cadeia de caracteres de formato em uma única expressão interpolada. Para fazer isso, especifique o alinhamento primeiro, seguido por dois-pontos e pela cadeia de caracteres de formato. Teste o seguinte código que exibe três cadeias de caracteres formatadas com larguras de campo definidas:


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- content: "Você concluiu o guia de início rápido de interpolação de cadeias de caracteres. \n\nVocê pode continuar esses guias de início rápido em seu próprio ambiente de desenvolvimento local. Conheça os fundamentos do [desenvolvimento local](local-environment.md) e selecione um início rápido. Você pode experimentar este guia de início rápido, ir diretamente ao próximo guia de início rápido ou começar novamente com o guia início rápido sobre [Números em C#](numbers-in-csharp-local.md).\n\nPara obter mais informações, confira o tópico [Interpolação de cadeia de caracteres](../language-reference/tokens/interpolated.md) e o tutorial [Interpolação de cadeia de caracteres no C#](../tutorials/string-interpolation.md)."
