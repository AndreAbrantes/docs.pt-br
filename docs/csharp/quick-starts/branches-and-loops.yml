### YamlMime:YamlDocument
documentType: Tutorial
title: Loops e branches
metadata:
  title: Loops e branches
  description: 'Neste tutorial sobre loops e branches, você usará seu navegador para aprender C# interativamente. Você escreverá o código em C# e verá os resultados da compilação e execução de seu código diretamente no navegador.'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      Este tutorial ensina a escrever códigos que examinam variáveis e mudam o caminho de execução com base nessas variáveis. Você escreverá C# interativamente usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código. Contém uma série de lições que exploram construções de ramificação e loop em C#. Estas lições ensinam os princípios básicos da linguagem C#.
  - title: Tomar decisões usando a instrução if
    durationInMinutes: 4
    content: |
      Execute o seguinte código na janela interativa. Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      Modifique a declaração de `b` para que a soma seja inferior a 10: 

      ```csharp
      int b = 3;
      ```

      Clique no botão **Executar** novamente. Como a resposta é inferior a 10, nada é impresso. A **condição** que você está testando é falsa. Não há qualquer código para execução, porque você escreveu apenas uma das ramificações possíveis para uma instrução `if`: a ramificação verdadeira.

      > [!TIP]
      > À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.
      > Esse exercício ajudará você a conhecer a estrutura do código C#.     

      Este primeiro exemplo mostra o poder do `if` e dos tipos boolianos. Um *booliano* é uma variável que pode ter um dos dois valores: `true` ou `false`. C# define um tipo especial, `bool` para variáveis boolianas. A instrução `if` verifica o valor de um `bool`. Quando o valor é `true`, a instrução após `if` é executada. Caso contrário, é ignorada. 

      Esse processo de verificação de condições e execução de instruções com base nessas condições é muito eficiente. Vamos explorar mais.

      > [!NOTE]
      > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
  - title: Faça if e else funcionam juntas
    durationInMinutes: 10
    content: |

      Para executar um código diferente nos branches true e false, crie um branch `else` que será executado quando a condição for false. Experimente isto:

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      A instrução após a palavra-chave `else` é executada somente quando a condição que estiver sendo testada for `false`. A combinação de `if` e `else` com condições boolianas fornece todos os recursos que você precisa.

      > [!IMPORTANT]
      > O recuo sob as instruções `if` e `else` é para leitores humanos.
      > A linguagem C# não considera recuo ou espaço em branco como significativo. A instrução após a palavra-chave `if` ou `else` será executada com base na condição. Todos os exemplos neste tutorial seguem uma prática comum para recuar linhas com base na execução.

      Como o recuo não é significativo, você precisa usar `{` e `}` para indicar quando você quer que mais de uma instrução faça parte do bloco executado condicionalmente. Os programadores em C# normalmente usam essas chaves em todas as cláusulas `if` e `else`. O exemplo a seguir é igual ao que você acabou de criar. Experimente.

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > No restante deste tutorial, todos os exemplos de código incluem as chaves, seguindo as práticas aceitas.

      Você pode testar condições mais complicadas:

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      O `&&` representa "e". Isso significa que as duas condições devem ser verdadeiras para executar a instrução no branch verdadeiro.  Estes exemplos também mostram que você pode ter várias instruções em cada branch condicional, desde que você coloque-as entre `{` e `}`.

      Você também pode usar `||` representar "ou":

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
  - title: Use loops para repetir operações
    durationInMinutes: 6
    content: |
      Outro conceito importante para criar programas maiores são os **loops**. Você usará loops para repetir as instruções que deseja executar mais de uma vez. Experimente este código na janela interativa:

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      A instrução `while` verifica uma condição e executa a instrução após `while`. Ela repetirá a verificação da condição e executará essas instruções até que a condição seja false.

      Há outro operador novo neste exemplo. O `++` após a variável `counter` é o operador **increment**. Ele adiciona 1 ao valor do contador e armazena esse valor na variável do contador.

      > [!IMPORTANT]
      > Verifique se a condição de loop `while` muda para false quando ao executar o código. Caso contrário, crie um **loop infinito**, para que seu programa nunca termine. Não vamos demonstrar isso porque o mecanismo que executa o código ultrapassará o tempo limite, e você não verá uma saída de seu programa.

      O loop `while` testa a condição antes de executar o código seguindo `while`. O loop `do` ... `while` executa o código primeiro e, em seguida, verifica a condição. É semelhante ao seguinte:

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      Esse loop `do` e o loop `while` anterior funcionam da mesma maneira. 

      Vamos passar para a última instrução de loop.

      > [!NOTE]
      > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
  - title: Trabalhar com o loop for
    durationInMinutes: 5
    content: |
      Outra instrução de loop comum que você verá no código C# é o loop `for`. Experimente este código na janela interativa:

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      Ele faz o mesmo trabalho que o loop `while` e o loop `do` que você já usou. A instrução `for` tem três partes que controlam o modo como ela funciona. 

      A primeira parte é o **inicializador for**: `for counter = 0;` declara que `counter` é a variável do loop, e define seu valor inicial como `0`.

      A parte central é a **condição for**: `counter < 10` declara que este loop `for` continuará sendo executado desde que o valor do contador seja inferior a 10.

      A parte final é o **iterador for**: `counter++` especifica como modificar a variável de loop depois de executar o bloco após a instrução `for`. Aqui, ela especifica que `counter` deve ser incrementado com 1 sempre que o bloco for executado.

      Experimente você mesmo. Tente o seguinte:

      - Altere o inicializador para iniciar em um valor diferente.
      - Altere a condição para parar em um valor diferente.

      Quando terminar, vamos escrever um código para usar o que você aprendeu.

      > [!NOTE]
      > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
  - title: Combinação de branches e loops
    durationInMinutes: 12
    content: |
      Agora que você viu a instrução `if` e as construções de loop na linguagem C#, verifique se você pode escrever o código C# para encontrar a soma de todos os inteiros de 1 a 20 divisíveis por 3.  Veja algumas dicas:

      - O operador `%` retorna o restante de uma operação de divisão.
      - A instrução `if` retorna a condição para ver se um número deve ser parte da soma.
      - O loop `for` pode ajudar você a repetir uma série de etapas para todos os números de 1 a 20.

      Tente você mesmo. Depois verifique como você fez.

      > [!NOTE]
      > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
  - title: Desafio concluído
    durationInMinutes: 1
    content: |
      Você concluiu o tutorial "branches e loops". Saiba mais sobre esses conceitos nestes tópicos:

      [Instrução If e else](../language-reference/keywords/if-else.md)   
      [Instrução while](../language-reference/keywords/while.md)   
      [Instrução Do](../language-reference/keywords/do.md)   
      [Instrução for](../language-reference/keywords/for.md)