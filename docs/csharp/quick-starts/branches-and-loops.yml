### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="3fad1-101">Loops e branches</span><span class="sxs-lookup"><span data-stu-id="3fad1-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="3fad1-102">Loops e branches</span><span class="sxs-lookup"><span data-stu-id="3fad1-102">Branches and loops</span></span>
  description: '<span data-ttu-id="3fad1-103">Neste tutorial sobre loops e branches, você usará seu navegador para aprender C# interativamente.</span><span class="sxs-lookup"><span data-stu-id="3fad1-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="3fad1-104">Você escreverá o código em C# e verá os resultados da compilação e execução de seu código diretamente no navegador.</span><span class="sxs-lookup"><span data-stu-id="3fad1-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="3fad1-105">Este tutorial ensina a escrever códigos que examinam variáveis e mudam o caminho de execução com base nessas variáveis.</span><span class="sxs-lookup"><span data-stu-id="3fad1-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="3fad1-106">Você escreverá C# interativamente usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código.</span><span class="sxs-lookup"><span data-stu-id="3fad1-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="3fad1-107">Contém uma série de lições que exploram construções de ramificação e loop em C#.</span><span class="sxs-lookup"><span data-stu-id="3fad1-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="3fad1-108">Estas lições ensinam os princípios básicos da linguagem C#.</span><span class="sxs-lookup"><span data-stu-id="3fad1-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="3fad1-109">Tomar decisões usando a instrução if</span><span class="sxs-lookup"><span data-stu-id="3fad1-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="3fad1-110">Execute o seguinte código na janela interativa.</span><span class="sxs-lookup"><span data-stu-id="3fad1-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="3fad1-111">Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:</span><span class="sxs-lookup"><span data-stu-id="3fad1-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="3fad1-112">Modifique a declaração de `b` para que a soma seja inferior a 10:</span><span class="sxs-lookup"><span data-stu-id="3fad1-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="3fad1-113">Clique no botão **Executar** novamente.</span><span class="sxs-lookup"><span data-stu-id="3fad1-113">Click the **Run** button again.</span></span> <span data-ttu-id="3fad1-114">Como a resposta é inferior a 10, nada é impresso.</span><span class="sxs-lookup"><span data-stu-id="3fad1-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="3fad1-115">A **condição** que você está testando é falsa.</span><span class="sxs-lookup"><span data-stu-id="3fad1-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="3fad1-116">Não há qualquer código para execução, porque você escreveu apenas uma das ramificações possíveis para uma instrução `if`: a ramificação verdadeira.</span><span class="sxs-lookup"><span data-stu-id="3fad1-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="3fad1-117">À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código.</span><span class="sxs-lookup"><span data-stu-id="3fad1-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="3fad1-118">O **compilador** encontrará esses erros e os reportará a você.</span><span class="sxs-lookup"><span data-stu-id="3fad1-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="3fad1-119">Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.</span><span class="sxs-lookup"><span data-stu-id="3fad1-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="3fad1-120">Esse exercício ajudará você a conhecer a estrutura do código C#.</span><span class="sxs-lookup"><span data-stu-id="3fad1-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="3fad1-121">Este primeiro exemplo mostra o poder do `if` e dos tipos boolianos.</span><span class="sxs-lookup"><span data-stu-id="3fad1-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="3fad1-122">Um *booliano* é uma variável que pode ter um dos dois valores: `true` ou `false`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="3fad1-123">C# define um tipo especial, `bool` para variáveis boolianas.</span><span class="sxs-lookup"><span data-stu-id="3fad1-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="3fad1-124">A instrução `if` verifica o valor de um `bool`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="3fad1-125">Quando o valor é `true`, a instrução após `if` é executada.</span><span class="sxs-lookup"><span data-stu-id="3fad1-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="3fad1-126">Caso contrário, é ignorada.</span><span class="sxs-lookup"><span data-stu-id="3fad1-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="3fad1-127">Esse processo de verificação de condições e execução de instruções com base nessas condições é muito eficiente.</span><span class="sxs-lookup"><span data-stu-id="3fad1-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="3fad1-128">Vamos explorar mais.</span><span class="sxs-lookup"><span data-stu-id="3fad1-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="3fad1-129">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="3fad1-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3fad1-130">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3fad1-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="3fad1-131">Faça if e else funcionam juntas</span><span class="sxs-lookup"><span data-stu-id="3fad1-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="3fad1-132">Para executar um código diferente nos branches true e false, crie um branch `else` que será executado quando a condição for false.</span><span class="sxs-lookup"><span data-stu-id="3fad1-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="3fad1-133">Experimente isto:</span><span class="sxs-lookup"><span data-stu-id="3fad1-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="3fad1-134">A instrução após a palavra-chave `else` é executada somente quando a condição que estiver sendo testada for `false`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="3fad1-135">A combinação de `if` e `else` com condições boolianas fornece todos os recursos que você precisa.</span><span class="sxs-lookup"><span data-stu-id="3fad1-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="3fad1-136">O recuo sob as instruções `if` e `else` é para leitores humanos.</span><span class="sxs-lookup"><span data-stu-id="3fad1-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="3fad1-137">A linguagem C# não considera recuo ou espaço em branco como significativo.</span><span class="sxs-lookup"><span data-stu-id="3fad1-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="3fad1-138">A instrução após a palavra-chave `if` ou `else` será executada com base na condição.</span><span class="sxs-lookup"><span data-stu-id="3fad1-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="3fad1-139">Todos os exemplos neste tutorial seguem uma prática comum para recuar linhas com base na execução.</span><span class="sxs-lookup"><span data-stu-id="3fad1-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="3fad1-140">Como o recuo não é significativo, você precisa usar `{` e `}` para indicar quando você quer que mais de uma instrução faça parte do bloco executado condicionalmente.</span><span class="sxs-lookup"><span data-stu-id="3fad1-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="3fad1-141">Os programadores em C# normalmente usam essas chaves em todas as cláusulas `if` e `else`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="3fad1-142">O exemplo a seguir é igual ao que você acabou de criar.</span><span class="sxs-lookup"><span data-stu-id="3fad1-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="3fad1-143">Experimente.</span><span class="sxs-lookup"><span data-stu-id="3fad1-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="3fad1-144">No restante deste tutorial, todos os exemplos de código incluem as chaves, seguindo as práticas aceitas.</span><span class="sxs-lookup"><span data-stu-id="3fad1-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="3fad1-145">Você pode testar condições mais complicadas:</span><span class="sxs-lookup"><span data-stu-id="3fad1-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="3fad1-146">O `&&` representa "e".</span><span class="sxs-lookup"><span data-stu-id="3fad1-146">The `&&` represents "and".</span></span> <span data-ttu-id="3fad1-147">Isso significa que as duas condições devem ser verdadeiras para executar a instrução no branch verdadeiro.</span><span class="sxs-lookup"><span data-stu-id="3fad1-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="3fad1-148">Estes exemplos também mostram que você pode ter várias instruções em cada branch condicional, desde que você coloque-as entre `{` e `}`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="3fad1-149">Você também pode usar `||` representar "ou":</span><span class="sxs-lookup"><span data-stu-id="3fad1-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="3fad1-150">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="3fad1-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3fad1-151">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3fad1-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="3fad1-152">Use loops para repetir operações</span><span class="sxs-lookup"><span data-stu-id="3fad1-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="3fad1-153">Outro conceito importante para criar programas maiores são os **loops**.</span><span class="sxs-lookup"><span data-stu-id="3fad1-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="3fad1-154">Você usará loops para repetir as instruções que deseja executar mais de uma vez.</span><span class="sxs-lookup"><span data-stu-id="3fad1-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="3fad1-155">Experimente este código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="3fad1-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="3fad1-156">A instrução `while` verifica uma condição e executa a instrução após `while`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="3fad1-157">Ela repetirá a verificação da condição e executará essas instruções até que a condição seja false.</span><span class="sxs-lookup"><span data-stu-id="3fad1-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="3fad1-158">Há outro operador novo neste exemplo.</span><span class="sxs-lookup"><span data-stu-id="3fad1-158">There's one other new operator in this example.</span></span> <span data-ttu-id="3fad1-159">O `++` após a variável `counter` é o operador **increment**.</span><span class="sxs-lookup"><span data-stu-id="3fad1-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="3fad1-160">Ele adiciona 1 ao valor do contador e armazena esse valor na variável do contador.</span><span class="sxs-lookup"><span data-stu-id="3fad1-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="3fad1-161">Verifique se a condição de loop `while` muda para false quando ao executar o código.</span><span class="sxs-lookup"><span data-stu-id="3fad1-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="3fad1-162">Caso contrário, crie um **loop infinito**, para que seu programa nunca termine.</span><span class="sxs-lookup"><span data-stu-id="3fad1-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="3fad1-163">Não vamos demonstrar isso porque o mecanismo que executa o código ultrapassará o tempo limite, e você não verá uma saída de seu programa.</span><span class="sxs-lookup"><span data-stu-id="3fad1-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="3fad1-164">O loop `while` testa a condição antes de executar o código seguindo `while`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="3fad1-165">O loop `do` ... `while` executa o código primeiro e, em seguida, verifica a condição.</span><span class="sxs-lookup"><span data-stu-id="3fad1-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="3fad1-166">É semelhante ao seguinte:</span><span class="sxs-lookup"><span data-stu-id="3fad1-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="3fad1-167">Esse loop `do` e o loop `while` anterior funcionam da mesma maneira.</span><span class="sxs-lookup"><span data-stu-id="3fad1-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="3fad1-168">Vamos passar para a última instrução de loop.</span><span class="sxs-lookup"><span data-stu-id="3fad1-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="3fad1-169">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="3fad1-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3fad1-170">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3fad1-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="3fad1-171">Trabalhar com o loop for</span><span class="sxs-lookup"><span data-stu-id="3fad1-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="3fad1-172">Outra instrução de loop comum que você verá no código C# é o loop `for`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="3fad1-173">Experimente este código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="3fad1-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="3fad1-174">Ele faz o mesmo trabalho que o loop `while` e o loop `do` que você já usou.</span><span class="sxs-lookup"><span data-stu-id="3fad1-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="3fad1-175">A instrução `for` tem três partes que controlam o modo como ela funciona.</span><span class="sxs-lookup"><span data-stu-id="3fad1-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="3fad1-176">A primeira parte é o **inicializador for**: `for counter = 0;` declara que `counter` é a variável do loop, e define seu valor inicial como `0`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="3fad1-177">A parte central é a **condição for**: `counter < 10` declara que este loop `for` continuará sendo executado desde que o valor do contador seja inferior a 10.</span><span class="sxs-lookup"><span data-stu-id="3fad1-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="3fad1-178">A parte final é o **iterador for**: `counter++` especifica como modificar a variável de loop depois de executar o bloco após a instrução `for`.</span><span class="sxs-lookup"><span data-stu-id="3fad1-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="3fad1-179">Aqui, ela especifica que `counter` deve ser incrementado com 1 sempre que o bloco for executado.</span><span class="sxs-lookup"><span data-stu-id="3fad1-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="3fad1-180">Experimente você mesmo.</span><span class="sxs-lookup"><span data-stu-id="3fad1-180">Experiment with these yourself.</span></span> <span data-ttu-id="3fad1-181">Tente o seguinte:</span><span class="sxs-lookup"><span data-stu-id="3fad1-181">Try each of the following:</span></span>

      - <span data-ttu-id="3fad1-182">Altere o inicializador para iniciar em um valor diferente.</span><span class="sxs-lookup"><span data-stu-id="3fad1-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="3fad1-183">Altere a condição para parar em um valor diferente.</span><span class="sxs-lookup"><span data-stu-id="3fad1-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="3fad1-184">Quando terminar, vamos escrever um código para usar o que você aprendeu.</span><span class="sxs-lookup"><span data-stu-id="3fad1-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="3fad1-185">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="3fad1-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3fad1-186">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3fad1-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="3fad1-187">Combinação de branches e loops</span><span class="sxs-lookup"><span data-stu-id="3fad1-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="3fad1-188">Agora que você viu a instrução `if` e as construções de loop na linguagem C#, verifique se você pode escrever o código C# para encontrar a soma de todos os inteiros de 1 a 20 divisíveis por 3.</span><span class="sxs-lookup"><span data-stu-id="3fad1-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="3fad1-189">Veja algumas dicas:</span><span class="sxs-lookup"><span data-stu-id="3fad1-189">Here are a few hints:</span></span>

      - <span data-ttu-id="3fad1-190">O operador `%` retorna o restante de uma operação de divisão.</span><span class="sxs-lookup"><span data-stu-id="3fad1-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="3fad1-191">A instrução `if` retorna a condição para ver se um número deve ser parte da soma.</span><span class="sxs-lookup"><span data-stu-id="3fad1-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="3fad1-192">O loop `for` pode ajudar você a repetir uma série de etapas para todos os números de 1 a 20.</span><span class="sxs-lookup"><span data-stu-id="3fad1-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="3fad1-193">Tente você mesmo.</span><span class="sxs-lookup"><span data-stu-id="3fad1-193">Try it yourself.</span></span> <span data-ttu-id="3fad1-194">Depois verifique como você fez.</span><span class="sxs-lookup"><span data-stu-id="3fad1-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="3fad1-195">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="3fad1-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="3fad1-196">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="3fad1-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="3fad1-197">Desafio concluído</span><span class="sxs-lookup"><span data-stu-id="3fad1-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="3fad1-198">Você concluiu o tutorial "branches e loops".</span><span class="sxs-lookup"><span data-stu-id="3fad1-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="3fad1-199">Saiba mais sobre esses conceitos nestes tópicos:</span><span class="sxs-lookup"><span data-stu-id="3fad1-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="3fad1-200">[Instrução If e else](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="3fad1-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="3fad1-201">[Instrução while](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="3fad1-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="3fad1-202">[Instrução Do](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="3fad1-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="3fad1-203">Instrução for</span><span class="sxs-lookup"><span data-stu-id="3fad1-203">For statement</span></span>](../language-reference/keywords/for.md)