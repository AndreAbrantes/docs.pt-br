### YamlMime:Tutorial
title: <span data-ttu-id="1297a-101">Loops e branches</span><span class="sxs-lookup"><span data-stu-id="1297a-101">Branches and loops</span></span>
metadata:
  title: "Tutorial interativo sobre loops e branches – guias de início rápido de C#"
  description: "Neste início rápido sobre loops e branches, você usará o navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador."
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.topic: get-started-article
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings
  nextTutorialTitle: <span data-ttu-id="1297a-105">Cadeias de caracteres interpoladas em C#</span><span class="sxs-lookup"><span data-stu-id="1297a-105">Interpolated strings in C#</span></span>
  ms.openlocfilehash: 1fad5d5b205c9a02bbb00d3377e3cae59926faf9
  ms.sourcegitcommit: d2da0142247ef42a219a5d2907f153e62dc6ea0d
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 02/01/2018
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"1297a-106\">Este início rápido ensina a escrever códigos que examinam variáveis e mudam o caminho de execução com base nessas variáveis.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-106\">This quickstart teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id=\"1297a-107\">Você usará seu navegador para escrever em C# interativamente e ver os resultados da compilação e da execução de seu código.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-107\">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"1297a-108\">Este início rápido contém uma série de lições que exploram construções de branch e loop em C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-108\">This quickstart contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id=\"1297a-109\">Estas lições ensinam os princípios básicos da linguagem C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-109\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
- title: "<span data-ttu-id=\"1297a-110\">Tomar decisões usando a instrução if</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-110\">Make decisions using the if statement</span></span>"
  durationInMinutes: 4
  content: "<span data-ttu-id=\"1297a-111\">Execute o seguinte código na janela interativa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"1297a-112\">Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-112\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\n<span data-ttu-id=\"1297a-113\">Modifique a declaração de `b` para que a soma seja inferior a 10:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-113\">Modify the declaration of `b` so that the sum is less than 10:</span></span> \n\n```csharp\nint b = 3;\n```\n\n<span data-ttu-id=\"1297a-114\">Clique no botão **Executar** novamente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-114\">Click the **Run** button again.</span></span> <span data-ttu-id=\"1297a-115\">Como a resposta é inferior a 10, nada é impresso.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-115\">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id=\"1297a-116\">A **condição** que você está testando é falsa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-116\">The **condition** you're testing is false.</span></span> <span data-ttu-id=\"1297a-117\">Não há qualquer código para execução, porque você escreveu apenas uma das ramificações possíveis para uma instrução `if`: a ramificação verdadeira.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-117\">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"1297a-118\">À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-118\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"1297a-119\">O **compilador** encontrará esses erros e os reportará a você.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-119\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"1297a-120\">Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-120\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"1297a-121\">Esse exercício ajudará você a conhecer a estrutura do código C#.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-121\">That exercise will help you learn the structure of C# code.</span></span>     \n\n<span data-ttu-id=\"1297a-122\">Este primeiro exemplo mostra o poder do `if` e dos tipos boolianos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-122\">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id=\"1297a-123\">Um *booliano* é uma variável que pode ter um dos dois valores: `true` ou `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-123\">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id=\"1297a-124\">C# define um tipo especial, `bool` para variáveis boolianas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-124\">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id=\"1297a-125\">A instrução `if` verifica o valor de um `bool`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-125\">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id=\"1297a-126\">Quando o valor é `true`, a instrução após `if` é executada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-126\">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id=\"1297a-127\">Caso contrário, é ignorada.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-127\">Otherwise, it is skipped.</span></span> \n\n<span data-ttu-id=\"1297a-128\">Esse processo de verificação de condições e execução de instruções com base nessas condições é muito eficiente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-128\">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id=\"1297a-129\">Vamos explorar mais.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-129\">Let's explore more.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"1297a-130\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-130\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"1297a-131\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-131\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"1297a-132\">Faça if e else funcionam juntas</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-132\">Make if and else work together</span></span>"
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"1297a-133\">Para executar um código diferente nos branches true e false, crie um branch `else` que será executado quando a condição for false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"1297a-134\">Experimente isto:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"1297a-135\">A instrução após a palavra-chave `else` é executada somente quando a condição que estiver sendo testada for `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"1297a-136\">A combinação de `if` e `else` com condições boolianas fornece todos os recursos que você precisa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"1297a-137\">O recuo sob as instruções `if` e `else` é para leitores humanos.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"1297a-138\">A linguagem C# não considera recuo ou espaço em branco como significativo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-138\">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id=\"1297a-139\">A instrução após a palavra-chave `if` ou `else` será executada com base na condição.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"1297a-140\">Todos os exemplos neste início rápido seguem uma prática comum para recuar linhas com base no fluxo de controle de instruções.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-140\">All the samples in this quickstart follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"1297a-141\">Como o recuo não é significativo, você precisa usar `{` e `}` para indicar quando você quer que mais de uma instrução faça parte do bloco executado condicionalmente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"1297a-142\">Os programadores em C# normalmente usam essas chaves em todas as cláusulas `if` e `else`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"1297a-143\">O exemplo a seguir é igual ao que você acabou de criar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"1297a-144\">Experimente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"1297a-145\">No restante deste início rápido, todos os exemplos de código incluem as chaves, seguindo as práticas aceitas.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-145\">Through the rest of this quickstart, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"1297a-146\">Você pode testar condições mais complicadas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n<span data-ttu-id=\"1297a-147\">O `&&` representa \"e\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-147\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"1297a-148\">Isso significa que as duas condições devem ser verdadeiras para executar a instrução no branch verdadeiro.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-148\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"1297a-149\">Estes exemplos também mostram que você pode ter várias instruções em cada branch condicional, desde que você coloque-as entre `{` e `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-149\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"1297a-150\">Você também pode usar `||` representar \"ou\":</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-150\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"1297a-151\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-151\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"1297a-152\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-152\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"1297a-153\">Use loops para repetir operações</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-153\">Use loops to repeat operations</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"1297a-154\">Outro conceito importante para criar programas maiores são os **loops**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-154\">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id=\"1297a-155\">Você usará loops para repetir as instruções que deseja executar mais de uma vez.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-155\">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id=\"1297a-156\">Experimente este código na janela interativa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-156\">Try this code in the interactive window:</span></span>\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n<span data-ttu-id=\"1297a-157\">A instrução `while` verifica uma condição e executa a instrução após `while`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-157\">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id=\"1297a-158\">Ela repetirá a verificação da condição e executará essas instruções até que a condição seja false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-158\">It will repeat checking the condition and executing those statements until the condition is false.</span></span>\n\n<span data-ttu-id=\"1297a-159\">Há outro operador novo neste exemplo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-159\">There's one other new operator in this example.</span></span> <span data-ttu-id=\"1297a-160\">O `++` após a variável `counter` é o operador **increment**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-160\">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id=\"1297a-161\">Ele adiciona 1 ao valor do contador e armazena esse valor na variável do contador.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-161\">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"1297a-162\">Verifique se a condição de loop `while` muda para false quando ao executar o código.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-162\">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id=\"1297a-163\">Caso contrário, crie um **loop infinito**, para que seu programa nunca termine.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-163\">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id=\"1297a-164\">Não vamos demonstrar isso porque o mecanismo que executa o código ultrapassará o tempo limite, e você não verá uma saída de seu programa.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-164\">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>\n\n<span data-ttu-id=\"1297a-165\">O loop `while` testa a condição antes de executar o código seguindo `while`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-165\">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id=\"1297a-166\">O loop `do` ... `while` executa o código primeiro e, em seguida, verifica a condição.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-166\">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id=\"1297a-167\">É semelhante ao seguinte:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-167\">It looks like this:</span></span>\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\n<span data-ttu-id=\"1297a-168\">Esse loop `do` e o loop `while` anterior funcionam da mesma maneira.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-168\">This `do` loop and the earlier `while` loop work the same.</span></span> \n\n<span data-ttu-id=\"1297a-169\">Vamos passar para a última instrução de loop.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-169\">Let's move on to one last loop statement.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"1297a-170\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-170\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"1297a-171\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-171\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="1297a-172">Trabalhar com o loop for</span><span class="sxs-lookup"><span data-stu-id="1297a-172">Work with the for loop</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"1297a-173\">Outra instrução de loop comum que você verá no código C# é o loop `for`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-173\">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id=\"1297a-174\">Experimente este código na janela interativa:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-174\">Try this code in the interactive window:</span></span>\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\n<span data-ttu-id=\"1297a-175\">Ele faz o mesmo trabalho que o loop `while` e o loop `do` que você já usou.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-175\">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id=\"1297a-176\">A instrução `for` tem três partes que controlam o modo como ela funciona.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-176\">The `for` statement has three parts that control how it works.</span></span> \n\n<span data-ttu-id=\"1297a-177\">A primeira parte é o **inicializador for**: `for counter = 0;` declara que `counter` é a variável do loop, e define seu valor inicial como `0`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-177\">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>\n\n<span data-ttu-id=\"1297a-178\">A parte central é a **condição for**: `counter < 10` declara que este loop `for` continuará sendo executado desde que o valor do contador seja inferior a 10.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-178\">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>\n\n<span data-ttu-id=\"1297a-179\">A parte final é o **iterador for**: `counter++` especifica como modificar a variável de loop depois de executar o bloco após a instrução `for`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-179\">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id=\"1297a-180\">Aqui, ela especifica que `counter` deve ser incrementado com 1 sempre que o bloco for executado.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-180\">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>\n\n<span data-ttu-id=\"1297a-181\">Experimente você mesmo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-181\">Experiment with these yourself.</span></span> <span data-ttu-id=\"1297a-182\">Tente o seguinte:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-182\">Try each of the following:</span></span>\n\n- <span data-ttu-id=\"1297a-183\">Altere o inicializador para iniciar em um valor diferente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-183\">Change the initializer to start at a different value.</span></span>\n- <span data-ttu-id=\"1297a-184\">Altere a condição para parar em um valor diferente.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-184\">Change the condition to stop at a different value.</span></span>\n\n<span data-ttu-id=\"1297a-185\">Quando terminar, vamos escrever um código para usar o que você aprendeu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-185\">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"1297a-186\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-186\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"1297a-187\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-187\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="1297a-188">Combinar branches e loops</span><span class="sxs-lookup"><span data-stu-id="1297a-188">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: "<span data-ttu-id=\"1297a-189\">Agora que você viu a instrução `if` e as construções de loop na linguagem C#, verifique se você pode escrever o código C# para encontrar a soma de todos os inteiros de 1 a 20 divisíveis por 3.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-189\">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id=\"1297a-190\">Veja algumas dicas:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-190\">Here are a few hints:</span></span>\n\n- <span data-ttu-id=\"1297a-191\">O operador `%` retorna o restante de uma operação de divisão.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-191\">The `%` operator gives you the remainder of a division operation.</span></span>\n- <span data-ttu-id=\"1297a-192\">A instrução `if` retorna a condição para ver se um número deve ser parte da soma.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-192\">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>\n- <span data-ttu-id=\"1297a-193\">O loop `for` pode ajudar você a repetir uma série de etapas para todos os números de 1 a 20.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-193\">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>\n\n<span data-ttu-id=\"1297a-194\">Tente você mesmo.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-194\">Try it yourself.</span></span> <span data-ttu-id=\"1297a-195\">Depois verifique como você fez.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-195\">Then check how you did.</span></span> <span data-ttu-id=\"1297a-196\">Como dica, você deve obter 63 como resposta.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-196\">As a hint, you should get 63 for an answer.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"1297a-197\">Esta experiência de codificação online está em versão prévia.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-197\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"1297a-198\">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-198\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"1297a-199\">Desafio concluído</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-199\">Complete challenge</span></span>"
  durationInMinutes: 1
  content: "<span data-ttu-id=\"1297a-200\">Você concluiu o início rápido \"branches e loops\".</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-200\">You've completed the \"branches and loops\" quickstart.</span></span> \n\n<span data-ttu-id=\"1297a-201\">Você pode continuar esses inícios rápidos em seu próprio ambiente de desenvolvimento.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-201\">You can continue these quickstarts on your own development environment.</span></span> <span data-ttu-id=\"1297a-202\">Conheça os fundamentos do [desenvolvimento local](local-environment.md) e selecione um início rápido.</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-202\">Learn the basics of [local development](local-environment.md) and then pick a quickstart.</span></span> <span data-ttu-id=\"1297a-203\">Você pode experimentar este exercício, ir diretamente ao próximo início rápido ou começar novamente no início rápido de [números em C#](numbers-in-csharp-local.md).</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-203\">You can try this same exercise, move directly to the next quickstart, or start again at with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"1297a-204\">Saiba mais sobre esses conceitos nestes tópicos:</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-204\">You can learn more about these concepts in these topics:</span></span>\n\n<span data-ttu-id=\"1297a-205\">[Instrução If e else](../language-reference/keywords/if-else.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-205\">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  \n<span data-ttu-id=\"1297a-206\">[Instrução while](../language-reference/keywords/while.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-206\">[While statement](../language-reference/keywords/while.md) </span></span>  \n<span data-ttu-id=\"1297a-207\">[Instrução Do](../language-reference/keywords/do.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-207\">[Do statement](../language-reference/keywords/do.md) </span></span>  \n[<span data-ttu-id=\"1297a-208\">Instrução for</span><span class=\"sxs-lookup\"><span data-stu-id=\"1297a-208\">For statement</span></span>](../language-reference/keywords/for.md)\0"
