### YamlMime:Tutorial
title: Loops e branches
metadata:
  title: Tutorial interativo sobre loops e branches – guias de início rápido de C#
  description: Neste início rápido sobre loops e branches, você usará o navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  ms.custom: mvc
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings.yml
  nextTutorialTitle: Interpolação de cadeias de caracteres em C#
  ms.openlocfilehash: 787ea7c8eb7724fba82bf40621bde429450b1850
  ms.sourcegitcommit: 15109844229ade1c6449f48f3834db1b26907824
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 05/07/2018
items:
- durationInMinutes: 1
  content: >
    Este início rápido ensina a escrever códigos que examinam variáveis e mudam o caminho de execução com base nessas variáveis. Você usará seu navegador para escrever em C# interativamente e ver os resultados da compilação e da execução de seu código. Este início rápido contém uma série de lições que exploram construções de branch e loop em C#. Estas lições ensinam os princípios básicos da linguagem C#.
- title: Tomar decisões usando a instrução if
  durationInMinutes: 4
  content: "Execute o seguinte código na janela interativa. Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nModifique a declaração de `b` para que a soma seja inferior a 10: \n\n```csharp\nint b = 3;\n```\n\nClique no botão **Executar** novamente. Como a resposta é inferior a 10, nada é impresso. A **condição** que você está testando é falsa. Não há qualquer código para execução, porque você escreveu apenas uma das ramificações possíveis para uma instrução `if`: a ramificação verdadeira.\n\n> [!TIP]\n> À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.\n> Esse exercício ajudará você a conhecer a estrutura do código C#.     \n\nEste primeiro exemplo mostra o poder do `if` e dos tipos boolianos. Um *booliano* é uma variável que pode ter um dos dois valores: `true` ou `false`. C# define um tipo especial, `bool` para variáveis boolianas. A instrução `if` verifica o valor de um `bool`. Quando o valor é `true`, a instrução após `if` é executada. Caso contrário, é ignorada. \n\nEsse processo de verificação de condições e execução de instruções com base nessas condições é muito eficiente. Vamos explorar mais.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Faça if e else funcionam juntas
  durationInMinutes: 10
  content: "\nPara executar um código diferente nos branches true e false, crie um branch `else` que será executado quando a condição for false. Experimente isto:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nA instrução após a palavra-chave `else` é executada somente quando a condição que estiver sendo testada for `false`. A combinação de `if` e `else` com condições boolianas fornece todos os recursos que você precisa.\n\n> [!IMPORTANT]\n> O recuo sob as instruções `if` e `else` é para leitores humanos.\n> A linguagem C# não considera recuos ou espaços em branco como significativos. A instrução após a palavra-chave `if` ou `else` será executada com base na condição. Todos os exemplos neste início rápido seguem uma prática comum para recuar linhas com base no fluxo de controle de instruções.\n\nComo o recuo não é significativo, você precisa usar `{` e `}` para indicar quando você quer que mais de uma instrução faça parte do bloco executado condicionalmente. Os programadores em C# normalmente usam essas chaves em todas as cláusulas `if` e `else`. O exemplo a seguir é igual ao que você acabou de criar. Experimente.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> No restante deste início rápido, todos os exemplos de código incluem as chaves, seguindo as práticas aceitas.\n\nVocê pode testar condições mais complicadas:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\nO `&&` representa \"e\". Isso significa que as duas condições devem ser verdadeiras para executar a instrução no branch verdadeiro.  Estes exemplos também mostram que você pode ter várias instruções em cada branch condicional, desde que você coloque-as entre `{` e `}`.\n\nVocê também pode usar `||` representar \"ou\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Use loops para repetir operações
  durationInMinutes: 6
  content: "Outro conceito importante para criar programas maiores são os **loops**. Você usará loops para repetir as instruções que deseja executar mais de uma vez. Experimente este código na janela interativa:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\nA instrução `while` verifica uma condição e executa a instrução após `while`. Ela repetirá a verificação da condição e executará essas instruções até que a condição seja false.\n\nHá outro operador novo neste exemplo. O `++` após a variável `counter` é o operador **increment**. Ele adiciona 1 ao valor do contador e armazena esse valor na variável do contador.\n\n> [!IMPORTANT]\n> Verifique se a condição de loop `while` muda para false quando ao executar o código. Caso contrário, crie um **loop infinito**, para que seu programa nunca termine. Não vamos demonstrar isso porque o mecanismo que executa o código ultrapassará o tempo limite, e você não verá uma saída de seu programa.\n\nO loop `while` testa a condição antes de executar o código seguindo `while`. O loop `do` ... `while` executa o código primeiro e, em seguida, verifica a condição. É semelhante ao seguinte:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nEsse loop `do` e o loop `while` anterior funcionam da mesma maneira. \n\nVamos passar para a última instrução de loop.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Trabalhar com o loop for
  durationInMinutes: 5
  content: "Outra instrução de loop comum que você verá no código C# é o loop `for`. Experimente este código na janela interativa:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nEle faz o mesmo trabalho que o loop `while` e o loop `do` que você já usou. A instrução `for` tem três partes que controlam o modo como ela funciona. \n\nA primeira parte é o **inicializador for**: `for counter = 0;` declara que `counter` é a variável do loop, e define seu valor inicial como `0`.\n\nA parte central é a **condição for**: `counter < 10` declara que este loop `for` continuará sendo executado desde que o valor do contador seja inferior a 10.\n\nA parte final é o **iterador for**: `counter++` especifica como modificar a variável de loop depois de executar o bloco após a instrução `for`. Aqui, ela especifica que `counter` deve ser incrementado com 1 sempre que o bloco for executado.\n\nExperimente você mesmo. Tente o seguinte:\n\n- Altere o inicializador para iniciar em um valor diferente.\n- Altere a condição para parar em um valor diferente.\n\nQuando terminar, vamos escrever um código para usar o que você aprendeu.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Combinar branches e loops
  durationInMinutes: 12
  content: >
    Agora que você viu a instrução `if` e as construções de loop na linguagem C#, verifique se você pode escrever o código C# para encontrar a soma de todos os inteiros de 1 a 20 divisíveis por 3.  Veja algumas dicas:


    - O operador `%` retorna o restante de uma operação de divisão.

    - A instrução `if` retorna a condição para ver se um número deve ser parte da soma.

    - O loop `for` pode ajudar você a repetir uma série de etapas para todos os números de 1 a 20.


    Tente você mesmo. Depois verifique como você fez. Como dica, você deve obter 63 como resposta.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- title: Desafio concluído
  durationInMinutes: 1
  content: "Você concluiu o início rápido \"branches e loops\". \n\nVocê pode continuar esses inícios rápidos em seu próprio ambiente de desenvolvimento. Conheça os fundamentos do [desenvolvimento local](local-environment.md) e selecione um início rápido. Você pode experimentar este exercício, ir diretamente ao próximo início rápido ou começar novamente no início rápido de [números em C#](numbers-in-csharp-local.md).\n\nSaiba mais sobre esses conceitos nestes tópicos:\n\n[Instrução If e else](../language-reference/keywords/if-else.md)   \n[Instrução while](../language-reference/keywords/while.md)   \n[Instrução Do](../language-reference/keywords/do.md)   \n[Instrução for](../language-reference/keywords/for.md)"
