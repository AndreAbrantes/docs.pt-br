documentType: Tutorial
title: "Olá, C#"
metadata:
  title: "Olá, C#. Primeiro introdução à linguagem C#."
  description: "Neste início rápido, você usará seu navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador."
  audience: Developer
  level: Beginner
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: "Números em C#"
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: "Este início rápido ensina C# de forma interativa, usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código. Ele contém uma série de lições que começam com um programa \"Olá, Mundo\". Estas lições ensinam os princípios básicos da linguagem C#.\n"
  ms.openlocfilehash: ce1791bd7949c89269b1051d15765f5efd273e7c
  ms.sourcegitcommit: 7296449e03f747528f9bc59954c74bf4e359cc1e
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 12/01/2017
- title: Executar seu primeiro programa em C#
  durationInMinutes: 2
  content: "Execute o seguinte código na janela interativa. Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nParabéns! Você executou seu primeiro programa em C#. É um programa simples que imprime a mensagem \"Olá, Mundo!\". Ele usou o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> para imprimir essa mensagem. `Console` é um tipo que representa a janela do console. `WriteLine` é um método do tipo `Console` que imprime uma linha de texto nesse console de texto.\n\nVamos continuar e explorar mais. O restante desta lição explora como trabalhar com o tipo `string`, que representa o texto em C#. Como o tipo `Console`, o tipo `string` tem métodos. Os métodos `string` funcionam com texto. \n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Declarar e usar variáveis"
  durationInMinutes: 3
  content: "Seu primeiro programa imprimiu o `string` \"Olá, Mundo!\" na tela. \n\n> [!TIP]\n> À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.\n> Esse exercício ajudará você a conhecer a estrutura do código C#. \n\nSeu primeiro programa está limitado à impressão de uma mensagem. Você pode escrever programas mais úteis usando **variáveis**. Uma **variável** é um símbolo que você pode usar para executar o mesmo código com valores diferentes. Vamos testar isso! Substitua o código que você escreveu na janela interativa pelo código a seguir:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nA primeira linha declara uma variável, `aFriend`, e atribui a ela um valor, \"Conta\". A segunda linha imprime o nome.\n\nAtribua valores diferentes para qualquer variável declarada. Altere o nome para um dos seus amigos. Adicione estas duas linhas na janela interativa, após o código que você já adicionou:\n\n```csharp\naFriend = \"Maria\";\nConsole.WriteLine(aFriend);\n```\n\nObserve que a mesma linha de código imprime duas mensagens diferentes, com base no valor armazenado na variável `aFriend`.\n\nVocê também deve ter observado que a palavra \"Olá\" estava ausente nas duas últimas mensagens. Vamos corrigir isso agora.  Modifique as linhas que imprime a mensagem para o seguinte:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nClique em **Executar** novamente para ver os resultados.\n\nÀ medida que progredimos, a criação de cadeias de caracteres para imprimir usando o `+` se torna complicada. A interpolação da cadeia de caracteres permite que você una as cadeias de caracteres de uma maneira mais concisa e legível.\n\nSe adicionar um `$` antes da abertura de aspas da cadeia de caracteres, você poderá acrescentar expressões de cadeia de caracteres, como a variável `aFriend`, dentro da cadeia de caracteres em colchetes.\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nClique em **Executar** novamente para ver os resultados.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Trabalhar com cadeias de caracteres
  durationInMinutes: 5
  content: "Sua última edição foi nossa primeira análise do que você pode fazer com cadeias de caracteres. Vamos explorar mais.\n\nO `+` é chamado de operador em C#. Quando aplicado a cadeias de caracteres como `firstString + secondString`, uma nova cadeia de caracteres é criada com o texto da primeira, seguido pelo texto da segunda. Isso é conhecido como *concatenação de cadeia de caracteres*. Você pode combinar várias cadeias de caracteres, incluindo variáveis de cadeia de caracteres.  Experimente isto:\n\n```csharp\nstring firstFriend = \"Maria\";\nstring secondFriend = \"Sage\";\nConsole.WriteLine($\"My friends are {firstFriend} and {secondFriend}\");\n```\n\nConforme você explora mais as cadeias de caracteres, é possível encontrar o comprimento de uma cadeia de caracteres usando `Length`. `Length` é uma **propriedade** de uma cadeia de caracteres e retorna o número de caracteres na cadeia. Adicione o seguinte código na parte inferior da janela interativa:\n\n```csharp\nConsole.WriteLine($\"The name {firstFriend} has {firstFriend.Length} letters.\");\nConsole.WriteLine($\"The name {secondFriend} has {secondFriend.Length} letters.\");\n```\n\n> [!TIP]\n> Este é um bom momento para explorar por conta própria. Você aprendeu que `Console.WriteLine()` escreve um texto na tela. Você aprendeu como declarar variáveis e concatenar cadeias de caracteres. Experimente com a janela interativa. Escreva você mesmo mais algumas mensagens. Compile cadeias de caracteres usando o operador `+`.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Faça mais com as cadeias de caractere"
  durationInMinutes: 5
  content: "Você usou um **método**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, para imprimir mensagens. Um **método** é um bloco de código que implementa alguma ação. Ele tem um nome, portanto você pode acessá-lo. \n\nO tipo `string` tem vários métodos úteis. Vamos explorar o método <xref:System.String.Trim%2A>, e os métodos relacionados <xref:System.String.TrimStart%2A> e <xref:System.String.TrimEnd%2A>. Esses métodos removem espaços à esquerda e à direita:\n\n```csharp\nstring message = \"      Hello World!       \";\nConsole.WriteLine($\"[{message}]\");\n\nstring trimmedMessage = message.TrimStart();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.TrimEnd();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.Trim();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n```\n\nEste exemplo reforça alguns conceitos importantes do trabalho com cadeias de caracteres. Os métodos que manipulam cadeias de caracteres retornam novos objetos de cadeia de caracteres, em vez de fazer modificações no local. Veja que cada chamada para qualquer um dos métodos `Trim` retorna uma nova cadeia de caracteres, mas não altera a mensagem original.\n\nHá outros métodos disponíveis para trabalhar com uma cadeia de caracteres. Por exemplo, você provavelmente usou um comando de pesquisa e substituição em um editor ou processador de textos. O método <xref:System.String.Replace%2A> faz algo semelhante em um `string`. Ele procura uma subcadeia de caracteres e a substitui por outro texto. O método <xref:System.String.Replace%2A> utiliza dois **parâmetros**. Essas são as cadeias de caracteres entre parênteses. A primeira cadeia de caracteres é o texto a ser pesquisado. A segunda cadeia de caracteres é o texto para substituição. Experimente. Adicione este código:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nmessage = message.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(message);\n```\n\nOutros dois métodos úteis colocam uma cadeia de caracteres TODA EM MAIÚSCULAS ou toda em minúsculas. Experimente o código a seguir:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nConsole.WriteLine(message.ToUpper());\nConsole.WriteLine(message.ToLower());\n```\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Pesquisar cadeias de caracteres
  durationInMinutes: 10
  content: "A outra parte de uma operação de *pesquisa e substituição* serve para localizar texto em uma cadeia de caracteres. Use o método <xref:System.String.Contains%2A> para pesquisar. Indica se uma cadeia de caracteres contém uma subcadeia de caracteres dentro dela. Experimente o seguinte código para explorar <xref:System.String.Contains%2A>:\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.Contains(\"goodbye\"));\nConsole.WriteLine(message.Contains(\"greetings\"));\n```\n\nO método <xref:System.String.Contains%2A> retorna um valor **booliano** que indica se a cadeia de caracteres que você estava procurando foi encontrada. Um **booliano** armazena um valor `true` ou `false`. Você saberá mais sobre valores **boolianos** em uma lição posterior.\n\n***Desafio***\n\nHá dois métodos semelhantes, <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> que também procuram subcadeias de caracteres em uma cadeia de caracteres. Eles encontram uma subcadeia de caracteres no início ou no final da cadeia de caracteres. Tente modificar o exemplo anterior para usar <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> em vez de <xref:System.String.Contains%2A>. Procure \"Você\" ou \"adeus\" no início de uma cadeia de caracteres. Procure \"olá\" ou \"adeus\" no final de uma cadeia de caracteres.\n\n> [!Note]\n> Fique atento à pontuação quando testar o texto no final da cadeia de caracteres. Se a cadeia de caracteres terminar com um ponto, verifique se há uma cadeia de caracteres que termina com um ponto.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Desafio concluído"
  durationInMinutes: 3
  content: "Você conseguiu algo semelhante a isto?\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.StartsWith(\"You\"));\nConsole.WriteLine(message.StartsWith(\"goodbye\"));\n\nConsole.WriteLine(message.EndsWith(\"hello\"));\nConsole.WriteLine(message.EndsWith(\"goodbye\"));\n```\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- content: "Você concluiu o início rápido “Olá, C#”.\n\nVocê pode continuar esses inícios rápidos em seu próprio ambiente de desenvolvimento. O tópico do .NET [Familiarize-se em 10 minutos](https://www.microsoft.com/net/core) tem instruções para configurar o ambiente de desenvolvimento local. Depois de ter feito isso, continue com [Números em C#](numbers-in-csharp-local.md) em seu ambiente local.\n\nSaiba mais sobre como trabalhar com o tipo `string` no tópico [Guia de programação em C#](../programming-guide/index.md) em [cadeias de caracteres](../programming-guide/strings/index.md).\0"
