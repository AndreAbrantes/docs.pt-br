### YamlMime:Tutorial
title: Olá, C#
metadata:
  title: Tutorial interativo sobre Hello World – huias de início rápido do C#
  description: Neste início rápido, você usará o navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Números em C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 26aeb125a69b210bee96fe32818304cc72e3da17
  ms.sourcegitcommit: fb78d8abbdb87144a3872cf154930157090dd933
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 10/01/2018
  ms.locfileid: "47421840"
items:
- durationInMinutes: 1
  content: >
    Este início rápido ensina C# de forma interativa, usando o navegador para escrever em C# e ver os resultados da compilação e da execução do código. Ele contém uma série de lições que começam com um programa "Olá, Mundo". Estas lições ensinam os princípios básicos da linguagem C#.
- title: Executar seu primeiro programa em C#
  durationInMinutes: 2
  content: "Execute o seguinte código na janela interativa. Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nParabéns! Você executou seu primeiro programa em C#. É um programa simples que imprime a mensagem \"Olá, Mundo!\". Ele usou o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> para imprimir essa mensagem. `Console` é um tipo que representa a janela do console. `WriteLine` é um método do tipo `Console` que imprime uma linha de texto nesse console de texto.\n\nVamos continuar e explorar mais. O restante desta lição explora como trabalhar com o tipo `string`, que representa o texto em C#. Como o tipo `Console`, o tipo `string` tem métodos. Os métodos `string` funcionam com texto. \n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Declarar e usar variáveis
  durationInMinutes: 3
  content: "Seu primeiro programa imprimiu o `string` \"Olá, Mundo!\" na tela. \n\n> [!TIP]\n> À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.\n> Esse exercício ajudará você a conhecer a estrutura do código C#. \n\nSeu primeiro programa está limitado à impressão de uma mensagem. Você pode escrever programas mais úteis usando **variáveis**. Uma **variável** é um símbolo que você pode usar para executar o mesmo código com valores diferentes. Vamos testar isso! Substitua o código que você escreveu na janela interativa pelo código a seguir:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nA primeira linha declara uma variável, `aFriend`, e atribui a ela um valor, \"Conta\". A segunda linha imprime o nome.\n\nAtribua valores diferentes para qualquer variável declarada. Altere o nome para um dos seus amigos. Adicione estas duas linhas na janela interativa, após o código que você já adicionou:\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\nObserve que a mesma linha de código imprime duas mensagens diferentes, com base no valor armazenado na variável `aFriend`.\n\nVocê também deve ter observado que a palavra \"Olá\" estava ausente nas duas últimas mensagens. Vamos corrigir isso agora.  Modifique as linhas que imprime a mensagem para o seguinte:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nClique em **Executar** novamente para ver os resultados.\n\nVocê usou `+` para criar cadeias de caracteres com base em cadeias de caracteres de **variáveis** e de **constantes**. Há uma maneira melhor.\nVocê pode colocar uma variável entre caracteres `{` e `}` para informar ao C# para substituir esse texto com o valor da variável.\n\nIsso é chamado de [Interpolação de cadeia de caracteres](../language-reference/tokens/interpolated.md).\n\nSe adicionar um `$` antes da abertura de aspas da cadeia de caracteres, você poderá incluir variáveis, tais como `aFriend`, dentro da cadeia de caracteres, entre chaves. Experimente:\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nClique em **Executar** novamente para ver os resultados. Em vez de \"Olá {aFriend}\", a mensagem deve ser \"Olá, Maira\".\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Trabalhar com cadeias de caracteres
  durationInMinutes: 5
  content: >
    Sua última edição foi nossa primeira análise do que você pode fazer com cadeias de caracteres. Vamos explorar mais.


    Você não está limitado a uma única variável entre as chaves. Experimente isto:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Conforme explorar mais as cadeias de caracteres, você descobrirá que cadeias de caracteres são mais do que uma coleção de letras. Você pode encontrar o tamanho de uma cadeia de caracteres usando `Length`. `Length` é uma **propriedade** de uma cadeia de caracteres e retorna o número de caracteres na cadeia. Adicione o seguinte código na parte inferior da janela interativa:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Este é um bom momento para explorar por conta própria. Você aprendeu que `Console.WriteLine()` escreve um texto na tela. Você aprendeu como declarar variáveis e concatenar cadeias de caracteres. Experimente com a janela interativa. A janela tem um recurso chamado **IntelliSense**, que faz sugestões sobre o que você pode fazer. Digite um `.` depois do `d` em `firstFriend`. Você verá uma lista de sugestões para propriedades e métodos que você pode usar.


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- title: Faça mais com as cadeias de caractere
  durationInMinutes: 5
  content: "Você usou um **método**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, para imprimir mensagens. Um **método** é um bloco de código que implementa alguma ação. Ele tem um nome, portanto você pode acessá-lo. \n\nSuponha que suas cadeias de caracteres têm espaços à esquerda ou à direita que você não deseja exibir. Você deseja **cortar** os espaços das cadeias de caracteres.\nO método <xref:System.String.Trim%2A> e os métodos relacionados <xref:System.String.TrimStart%2A> e <xref:System.String.TrimEnd%2A> fazem isso funcionar. Você pode apenas usar esses métodos para remover espaços à esquerda e à direita. Experimente o código a seguir:\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\nEste exemplo reforça alguns conceitos importantes do trabalho com cadeias de caracteres. Os métodos que manipulam cadeias de caracteres retornam novos objetos de cadeia de caracteres, em vez de fazer modificações no local. Veja que cada chamada para qualquer um dos métodos `Trim` retorna uma nova cadeia de caracteres, mas não altera a mensagem original.\n\nHá outros métodos disponíveis para trabalhar com uma cadeia de caracteres. Por exemplo, você provavelmente já usou um comando de pesquisa e substituição em um editor ou processador de textos. O método <xref:System.String.Replace%2A> faz algo semelhante em uma cadeia de caracteres. Ele procura uma subcadeia de caracteres e a substitui por outro texto. O método <xref:System.String.Replace%2A> utiliza dois **parâmetros**. Essas são as cadeias de caracteres entre parênteses. A primeira cadeia de caracteres é o texto a ser pesquisado. A segunda cadeia de caracteres é o texto para substituição. Experimente. Adicione este código. Digite-o para ver as dicas conforme você começa a digitar `.Re` depois da variável `sayHello`:\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\nOutros dois métodos úteis colocam uma cadeia de caracteres TODA EM MAIÚSCULAS ou toda em minúsculas. Experimente o código a seguir. Digite-o para ver como o **IntelliSense** fornece dicas conforme você começa a digitar `To`:\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Pesquisar cadeias de caracteres
  durationInMinutes: 10
  content: "A outra parte de uma operação de *pesquisa e substituição* serve para localizar texto em uma cadeia de caracteres. Use o método <xref:System.String.Contains%2A> para pesquisar. Indica se uma cadeia de caracteres contém uma subcadeia de caracteres dentro dela. Experimente o seguinte código para explorar <xref:System.String.Contains%2A>:\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\nO método <xref:System.String.Contains%2A> retorna um valor **booliano** que indica se a cadeia de caracteres que você estava procurando foi encontrada. Um **booliano** armazena um valor `true` ou `false`. Você saberá mais sobre valores **boolianos** em uma lição posterior.\n\n***Desafio***\n\nHá dois métodos semelhantes, <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> que também procuram subcadeias de caracteres em uma cadeia de caracteres. Eles encontram uma subcadeia de caracteres no início ou no final da cadeia de caracteres. Tente modificar o exemplo anterior para usar <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> em vez de <xref:System.String.Contains%2A>. Procure \"Você\" ou \"adeus\" no início de uma cadeia de caracteres. Procure \"olá\" ou \"adeus\" no final de uma cadeia de caracteres.\n\n> [!Note]\n> Fique atento à pontuação quando testar o texto no final da cadeia de caracteres. Se a cadeia de caracteres terminar com um ponto, verifique se há uma cadeia de caracteres que termina com um ponto.\n\nVocê deve obter `true` para iniciar com \"You\" e terminar com \"hello\" e false para iniciar ou terminar com \"goodbye\". \n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Desafio concluído
  durationInMinutes: 3
  content: >
    Você conseguiu algo semelhante a isto?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).
- content: >-
    Você concluiu o início rápido “Olá, C#”.


    Saiba mais sobre como trabalhar com o tipo `string` no tópico [Guia de programação em C#](../programming-guide/index.md) em [cadeias de caracteres](../programming-guide/strings/index.md).

    [Dicas de como trabalhar com cadeias de caracteres](../how-to/index.md#working-with-strings).
