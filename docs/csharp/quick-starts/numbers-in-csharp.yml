### YamlMime:YamlDocument
documentType: Tutorial
title: '<span data-ttu-id="7688c-101">Números em C#</span><span class="sxs-lookup"><span data-stu-id="7688c-101">Numbers in C#</span></span>'
metadata:
  title: '<span data-ttu-id="7688c-102">Números em C#</span><span class="sxs-lookup"><span data-stu-id="7688c-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="7688c-103">Neste tutorial sobre tipos numéricos, você usará seu navegador para aprender C# interativamente.</span><span class="sxs-lookup"><span data-stu-id="7688c-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="7688c-104">Você escreverá o código em C# e verá os resultados da compilação e execução de seu código diretamente no navegador.</span><span class="sxs-lookup"><span data-stu-id="7688c-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="7688c-105">Este tutorial ensina de forma interativa sobre os tipos numéricos em C#, usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código.</span><span class="sxs-lookup"><span data-stu-id="7688c-105">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="7688c-106">Ele contém uma série de lições que exploram números e operações matemáticas em C#.</span><span class="sxs-lookup"><span data-stu-id="7688c-106">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="7688c-107">Estas lições ensinam os princípios básicos da linguagem C#.</span><span class="sxs-lookup"><span data-stu-id="7688c-107">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="7688c-108">Explorar a matemática de inteiros</span><span class="sxs-lookup"><span data-stu-id="7688c-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="7688c-109">Execute o seguinte código na janela interativa.</span><span class="sxs-lookup"><span data-stu-id="7688c-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="7688c-110">Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:</span><span class="sxs-lookup"><span data-stu-id="7688c-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="7688c-111">Você viu apenas uma das operações matemáticas fundamentais com números inteiros.</span><span class="sxs-lookup"><span data-stu-id="7688c-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="7688c-112">O tipo `int` representa um **inteiro**, um número inteiro positivo ou negativo.</span><span class="sxs-lookup"><span data-stu-id="7688c-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="7688c-113">Você usa o símbolo `+` para adição.</span><span class="sxs-lookup"><span data-stu-id="7688c-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="7688c-114">Outras operações matemáticas comuns para inteiros incluem:</span><span class="sxs-lookup"><span data-stu-id="7688c-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="7688c-115">`-` para subtração</span><span class="sxs-lookup"><span data-stu-id="7688c-115">`-` for subtraction</span></span>
      - <span data-ttu-id="7688c-116">`*` para multiplicação</span><span class="sxs-lookup"><span data-stu-id="7688c-116">`*` for multiplication</span></span>
      - <span data-ttu-id="7688c-117">`/` para divisão</span><span class="sxs-lookup"><span data-stu-id="7688c-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="7688c-118">Explorar por conta própria todo o tutorial, modificando o código que você escreveu na janela interativa.</span><span class="sxs-lookup"><span data-stu-id="7688c-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="7688c-119">Este tutorial fornece exemplos para teste a cada etapa.</span><span class="sxs-lookup"><span data-stu-id="7688c-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="7688c-120">Comece explorando essas diferentes operações.</span><span class="sxs-lookup"><span data-stu-id="7688c-120">Start by exploring those different operations.</span></span> <span data-ttu-id="7688c-121">Modifique a terceira linha para testar cada uma dessas operações.</span><span class="sxs-lookup"><span data-stu-id="7688c-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="7688c-122">Após cada edição, clique no botão **Executar**.</span><span class="sxs-lookup"><span data-stu-id="7688c-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="7688c-123">Subtração:</span><span class="sxs-lookup"><span data-stu-id="7688c-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="7688c-124">Multiplicação:</span><span class="sxs-lookup"><span data-stu-id="7688c-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="7688c-125">Divisão:</span><span class="sxs-lookup"><span data-stu-id="7688c-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="7688c-126">Você também pode experimentar, executando várias operações matemáticas na mesma linha, se quiser.</span><span class="sxs-lookup"><span data-stu-id="7688c-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="7688c-127">À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código.</span><span class="sxs-lookup"><span data-stu-id="7688c-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="7688c-128">O **compilador** encontrará esses erros e os reportará a você.</span><span class="sxs-lookup"><span data-stu-id="7688c-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="7688c-129">Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.</span><span class="sxs-lookup"><span data-stu-id="7688c-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="7688c-130">Esse exercício ajudará você a conhecer a estrutura do código C#.</span><span class="sxs-lookup"><span data-stu-id="7688c-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="7688c-131">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="7688c-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7688c-132">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7688c-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="7688c-133">Explorar a ordem das operações</span><span class="sxs-lookup"><span data-stu-id="7688c-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="7688c-134">A linguagem C# define a precedência de operações matemáticas diferentes com regras consistentes às regras que você aprendeu em matemática.</span><span class="sxs-lookup"><span data-stu-id="7688c-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="7688c-135">Multiplicação e divisão têm precedência sobre adição e subtração.</span><span class="sxs-lookup"><span data-stu-id="7688c-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="7688c-136">Explore executando o seguinte código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="7688c-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="7688c-137">A saída demonstra que a multiplicação é executada antes da adição.</span><span class="sxs-lookup"><span data-stu-id="7688c-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="7688c-138">Você pode forçar uma ordem diferente de operações, adicionando parênteses para delimitar a operação, ou operações, que você quer realizar primeiro:</span><span class="sxs-lookup"><span data-stu-id="7688c-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="7688c-139">Explore mais, combinando várias operações diferentes.</span><span class="sxs-lookup"><span data-stu-id="7688c-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="7688c-140">Substitua a quarta linha acima por algo parecido com isto:</span><span class="sxs-lookup"><span data-stu-id="7688c-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="7688c-141">Talvez você tenha observado um comportamento interessante com relação aos números inteiros.</span><span class="sxs-lookup"><span data-stu-id="7688c-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="7688c-142">A divisão de inteiros sempre produz um resultado inteiro, mesmo quando o resultado matemático incluir uma parte decimal ou fração.</span><span class="sxs-lookup"><span data-stu-id="7688c-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="7688c-143">Se você ainda não viu esse comportamento, tente o seguinte:</span><span class="sxs-lookup"><span data-stu-id="7688c-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="7688c-144">Clique em **Executar** novamente para ver os resultados.</span><span class="sxs-lookup"><span data-stu-id="7688c-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="7688c-145">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="7688c-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7688c-146">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7688c-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="7688c-147">Explorar a precisão de inteiros e limites</span><span class="sxs-lookup"><span data-stu-id="7688c-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="7688c-148">Esse último exemplo mostrou que uma divisão de inteiros trunca o resultado.</span><span class="sxs-lookup"><span data-stu-id="7688c-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="7688c-149">Você pode obter o **restante** usando o operador **module**, o caractere `%`:</span><span class="sxs-lookup"><span data-stu-id="7688c-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="7688c-150">O tipo de inteiro C# difere do inteiros matemáticos de outra forma: o tipo `int` tem limites mínimo e máximo.</span><span class="sxs-lookup"><span data-stu-id="7688c-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="7688c-151">Execute este código na janela interativa para ver esses limites:</span><span class="sxs-lookup"><span data-stu-id="7688c-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="7688c-152">Se um cálculo produzir um valor que excede esses limites, você terá uma condição de **estouro negativo** ou **estouro**.</span><span class="sxs-lookup"><span data-stu-id="7688c-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="7688c-153">A resposta parece quebrar de um limite para o outro.</span><span class="sxs-lookup"><span data-stu-id="7688c-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="7688c-154">Adicione estas duas linhas à janela interativa para ver um exemplo:</span><span class="sxs-lookup"><span data-stu-id="7688c-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="7688c-155">Observe que a resposta é muito próxima do mínimo inteiro (negativo).</span><span class="sxs-lookup"><span data-stu-id="7688c-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="7688c-156">É o mesmo que `min + 2`.</span><span class="sxs-lookup"><span data-stu-id="7688c-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="7688c-157">A operação de adição **estourou** os valores permitidos para números inteiros.</span><span class="sxs-lookup"><span data-stu-id="7688c-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="7688c-158">A resposta é um número negativo muito grande, pois um estouro "envolve" do maior valor de inteiro possível para o menor.</span><span class="sxs-lookup"><span data-stu-id="7688c-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="7688c-159">Há outros tipos numéricos com limites e precisão diferentes que você usaria quando o tipo `int` não atendesse às suas necessidades.</span><span class="sxs-lookup"><span data-stu-id="7688c-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="7688c-160">Vamos explorá-los na sequência.</span><span class="sxs-lookup"><span data-stu-id="7688c-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="7688c-161">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="7688c-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7688c-162">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7688c-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="7688c-163">Trabalhar com o tipo Double</span><span class="sxs-lookup"><span data-stu-id="7688c-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="7688c-164">O tipo numérico `double` representa um número de ponto flutuante de precisão dupla.</span><span class="sxs-lookup"><span data-stu-id="7688c-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="7688c-165">Esses termos podem ser novidade para você.</span><span class="sxs-lookup"><span data-stu-id="7688c-165">Those terms may be new to you.</span></span> <span data-ttu-id="7688c-166">Um número de **ponto flutuante** é útil para representar números não integrais que podem ser muito grandes ou pequenos.</span><span class="sxs-lookup"><span data-stu-id="7688c-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="7688c-167">**Precisão dupla** significa que esses números são armazenados usando uma precisão maior do que a **precisão única**.</span><span class="sxs-lookup"><span data-stu-id="7688c-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="7688c-168">Em computadores modernos, é mais comum usar precisão dupla que números de precisão única.</span><span class="sxs-lookup"><span data-stu-id="7688c-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="7688c-169">Vamos explorar.</span><span class="sxs-lookup"><span data-stu-id="7688c-169">Let's explore.</span></span> <span data-ttu-id="7688c-170">Experimente o seguinte código na janela interativa e veja o resultado:</span><span class="sxs-lookup"><span data-stu-id="7688c-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="7688c-171">Observe que a resposta inclui a parte decimal do quociente.</span><span class="sxs-lookup"><span data-stu-id="7688c-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="7688c-172">Experimente uma expressão ligeiramente mais complicada com duplos:</span><span class="sxs-lookup"><span data-stu-id="7688c-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="7688c-173">O intervalo de um valor duplo é muito maior do que valores inteiros.</span><span class="sxs-lookup"><span data-stu-id="7688c-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="7688c-174">Experimente o seguinte código na janela interativa:</span><span class="sxs-lookup"><span data-stu-id="7688c-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="7688c-175">Esses valores são impressos para representar a notação científica.</span><span class="sxs-lookup"><span data-stu-id="7688c-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="7688c-176">O número à esquerda do `E` é o significativo.</span><span class="sxs-lookup"><span data-stu-id="7688c-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="7688c-177">O número à direita é o expoente, como uma potência de 10.</span><span class="sxs-lookup"><span data-stu-id="7688c-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="7688c-178">Internamente, esses números são representados de maneira semelhante, mas em um formato binário.</span><span class="sxs-lookup"><span data-stu-id="7688c-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="7688c-179">Uma parte representa os dígitos binários do significativo.</span><span class="sxs-lookup"><span data-stu-id="7688c-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="7688c-180">Outra parte representa onde colocar o ponto binário (análogo a uma vírgula decimal) em relação a esses dígitos significativos.</span><span class="sxs-lookup"><span data-stu-id="7688c-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="7688c-181">Assim como os números decimais em matemática, os duplos em C# podem ter erros de arredondamento.</span><span class="sxs-lookup"><span data-stu-id="7688c-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="7688c-182">Experimente esse código:</span><span class="sxs-lookup"><span data-stu-id="7688c-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="7688c-183">Você sabe que a repetição de `0.3` não é exatamente o mesmo que `1/3`.</span><span class="sxs-lookup"><span data-stu-id="7688c-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="7688c-184">***Desafio***</span><span class="sxs-lookup"><span data-stu-id="7688c-184">***Challenge***</span></span>

      <span data-ttu-id="7688c-185">Experimente outros cálculos com números grandes, números pequenos, multiplicação e divisão usando o tipo `double`.</span><span class="sxs-lookup"><span data-stu-id="7688c-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="7688c-186">Experimente cálculos mais complicados.</span><span class="sxs-lookup"><span data-stu-id="7688c-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="7688c-187">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="7688c-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7688c-188">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7688c-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="7688c-189">Trabalhar com tipos de ponto fixo</span><span class="sxs-lookup"><span data-stu-id="7688c-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="7688c-190">Você viu os tipos numéricos básicos em C#: inteiros e duplos.</span><span class="sxs-lookup"><span data-stu-id="7688c-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="7688c-191">Ainda há outro tipo : o tipo `decimal`.</span><span class="sxs-lookup"><span data-stu-id="7688c-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="7688c-192">O tipo `decimal` tem um intervalo menor, mas precisão maior do que `double`.</span><span class="sxs-lookup"><span data-stu-id="7688c-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="7688c-193">O termo **ponto fixo** significa que a virgula decimal (ou ponto binário) não muda.</span><span class="sxs-lookup"><span data-stu-id="7688c-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="7688c-194">Vamos analisar:</span><span class="sxs-lookup"><span data-stu-id="7688c-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="7688c-195">Observe que o intervalo é menor do que o tipo `double`.</span><span class="sxs-lookup"><span data-stu-id="7688c-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="7688c-196">Veja a precisão maior com o tipo decimal experimentando o código a seguir:</span><span class="sxs-lookup"><span data-stu-id="7688c-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="7688c-197">O sufixo `M` nos números é o modo como você indica que uma constante deve usar o tipo `decimal`.</span><span class="sxs-lookup"><span data-stu-id="7688c-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="7688c-198">Observe que o cálculo usando o tipo decimal tem mais dígitos à direita da vírgula decimal.</span><span class="sxs-lookup"><span data-stu-id="7688c-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="7688c-199">***Desafio***</span><span class="sxs-lookup"><span data-stu-id="7688c-199">***Challenge***</span></span>

      <span data-ttu-id="7688c-200">Agora que você viu os diferentes tipos numéricos, escreva um código que calcula a área de um círculo cujo raio é de 2,50 polegadas.</span><span class="sxs-lookup"><span data-stu-id="7688c-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="7688c-201">Lembre-se de que a área de um círculo é o quadrado do raio multiplicado por PI.</span><span class="sxs-lookup"><span data-stu-id="7688c-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="7688c-202">Uma dica: C# contém uma constante para PI: `Math.PI` que você pode usar para esse valor.</span><span class="sxs-lookup"><span data-stu-id="7688c-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="7688c-203">Esta experiência de codificação online está em versão prévia.</span><span class="sxs-lookup"><span data-stu-id="7688c-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="7688c-204">Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="7688c-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="7688c-205">Desafio concluído</span><span class="sxs-lookup"><span data-stu-id="7688c-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="7688c-206">Você concluiu o tutorial "Números em C#".</span><span class="sxs-lookup"><span data-stu-id="7688c-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="7688c-207">Saiba mais sobre os números em C# nos tópicos a seguir:</span><span class="sxs-lookup"><span data-stu-id="7688c-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="7688c-208">[Tabela de Tipos Integrais](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="7688c-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="7688c-209">[Tabela de tipos de ponto flutuante](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="7688c-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="7688c-210">[Tabela de Tipos Internos](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="7688c-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="7688c-211">[Tabela de conversões numéricas implícitas](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="7688c-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="7688c-212">Tabela de conversões numéricas explícitas</span><span class="sxs-lookup"><span data-stu-id="7688c-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)