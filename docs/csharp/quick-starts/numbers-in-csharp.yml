### YamlMime:YamlDocument
documentType: Tutorial
title: "Números em C#"
metadata:
  title: "Números em C#"
  description: "Neste início rápido sobre tipos numéricos, você usará seu navegador para aprender C# interativamente. Você escreverá o código em C# e verá os resultados da compilação e execução de seu código diretamente no navegador."
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: Loops e branches em C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 401c4427a3ec0d1263543033b3084039278509dc
  ms.translationtype: HT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 12/07/2017
items:
- durationInMinutes: 1
  content: "Este início rápido ensina de forma interativa sobre os tipos numéricos em C#, usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código. Ele contém uma série de lições que exploram números e operações matemáticas em C#. Estas lições ensinam os princípios básicos da linguagem C#.\n"
- title: "Explorar a matemática de inteiros"
  durationInMinutes: 4
  content: "Execute o seguinte código na janela interativa. Para fazer isso, digite o bloco de código a seguir na janela interativa e clique no botão **Executar**:\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\nVocê viu apenas uma das operações matemáticas fundamentais com números inteiros. O tipo `int` representa um **inteiro**, um número inteiro positivo ou negativo. Você usa o símbolo `+` para adição. Outras operações matemáticas comuns para inteiros incluem:\n\n- `-` para subtração\n- `*` para multiplicação\n- `/` para divisão\n\n> [!TIP]\n> Explore por conta própria todo o início rápido, modificando o código que você escreveu na janela interativa. Este início rápido fornece exemplos para teste a cada etapa.\n\nComece explorando essas diferentes operações. Modifique a terceira linha para testar cada uma dessas operações. Após cada edição, clique no botão **Executar**.\n\nSubtração:\n\n```csharp\nint c = a - b;\n```\n\nMultiplicação:\n\n```csharp\nint c = a * b;\n```\n\nDivisão: \n\n```csharp\nint c = a / b;\n```\n\nVocê também pode experimentar, executando várias operações matemáticas na mesma linha, se quiser.\n\n> [!TIP]\n> À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.\n> Esse exercício ajudará você a conhecer a estrutura do código C#.     \n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Explorar a ordem das operações"
  durationInMinutes: 7
  content: "A linguagem C# define a precedência de operações matemáticas diferentes com regras consistentes às regras que você aprendeu em matemática.\nMultiplicação e divisão têm precedência sobre adição e subtração.\nExplore executando o seguinte código na janela interativa:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\nA saída demonstra que a multiplicação é executada antes da adição.\n\nVocê pode forçar uma ordem diferente de operações, adicionando parênteses para delimitar a operação, ou operações, que você quer realizar primeiro:\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\nExplore mais, combinando várias operações diferentes. Substitua a quarta linha acima por algo parecido com isto:\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\nTalvez você tenha observado um comportamento interessante com relação aos números inteiros. A divisão de inteiros sempre produz um resultado inteiro, mesmo quando você espera que o resultado inclua uma parte decimal ou fracionária.\n\nSe você ainda não viu esse comportamento, tente o seguinte:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nClique em **Executar** novamente para ver os resultados.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Explorar a precisão de inteiros e limites"
  durationInMinutes: 5
  content: "Esse último exemplo mostrou que uma divisão de inteiros trunca o resultado.\nVocê pode obter o **restante** usando o operador **module**, o caractere `%`:\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nO tipo de inteiro C# difere do inteiros matemáticos de outra forma: o tipo `int` tem limites mínimo e máximo. Execute este código na janela interativa para ver esses limites:\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\nSe um cálculo produzir um valor que excede esses limites, você terá uma condição de **estouro negativo** ou **estouro**. A resposta parece quebrar de um limite para o outro. Adicione estas duas linhas à janela interativa para ver um exemplo:\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\nObserve que a resposta é muito próxima do mínimo inteiro (negativo). É o mesmo que `min + 2`. A operação de adição **estourou** os valores permitidos para números inteiros.\nA resposta é um número negativo muito grande, pois um estouro \"envolve\" do maior valor de inteiro possível para o menor.\n\nHá outros tipos numéricos com limites e precisão diferentes que você usaria quando o tipo `int` não atendesse às suas necessidades. Vamos explorá-los na sequência.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Trabalhar com o tipo Double
  durationInMinutes: 5
  content: "O tipo numérico `double` representa um número de ponto flutuante de precisão dupla. Esses termos podem ser novidade para você. Um número de **ponto flutuante** é útil para representar números não integrais que podem ser muito grandes ou pequenos em magnitude. **Precisão dupla** significa que esses números são armazenados usando uma precisão maior do que a **precisão única**. Em computadores modernos, é mais comum usar precisão dupla que números de precisão única.\nVamos explorar. Experimente o seguinte código na janela interativa e veja o resultado:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nObserve que a resposta inclui a parte decimal do quociente. Experimente uma expressão ligeiramente mais complicada com duplos:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nO intervalo de um valor duplo é muito maior do que valores inteiros. Experimente o seguinte código na janela interativa:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nEsses valores são impressos em notação científica. O número à esquerda do `E` é o significando. O número à direita é o expoente, como uma potência de 10. \n\nAssim como os números decimais em matemática, os duplos em C# podem ter erros de arredondamento. Experimente esse código:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nVocê sabe que a repetição de `0.3` não é exatamente o mesmo que `1/3`.\n\n***Desafio***\n\nExperimente outros cálculos com números grandes, números pequenos, multiplicação e divisão usando o tipo `double`.  Experimente cálculos mais complicados.\n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Trabalhar com tipos de ponto fixo
  durationInMinutes: 8
  content: "Você viu os tipos numéricos básicos em C#: inteiros e duplos.  Ainda há outro tipo : o tipo `decimal`. O tipo `decimal` tem um intervalo menor, mas precisão maior do que `double`. O termo **ponto fixo** significa que a virgula decimal (ou ponto binário) não muda. Vamos analisar:\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\nObserve que o intervalo é menor do que o tipo `double`. Veja a precisão maior com o tipo decimal experimentando o código a seguir:\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\nO sufixo `M` nos números é o modo como você indica que uma constante deve usar o tipo `decimal`.\n\nObserve que o cálculo usando o tipo decimal tem mais dígitos à direita da vírgula decimal. \n\n***Desafio***\n\nAgora que você viu os diferentes tipos numéricos, escreva um código que calcula a área de um círculo cujo raio é de 2,50 polegadas. Lembre-se de que a área de um círculo é o quadrado do raio multiplicado por PI. Uma dica: o C# contém uma constante para PI: <xref:System.Math.PI?displayProperty=nameWithType>, que você pode usar para esse valor. \n\n> [!NOTE]\n> Esta experiência de codificação online está em versão prévia. Se você encontrar problemas, informe-os [no repositório dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: "Desafio concluído"
  durationInMinutes: 1
  content: "Você concluiu o início rápido \"Números em C#\". \n\nVocê pode continuar esses inícios rápidos em seu próprio ambiente de desenvolvimento. O tópico do .NET [Familiarize-se em 10 minutos](https://www.microsoft.com/net/core) tem instruções para configurar o ambiente de desenvolvimento local. Depois de ter feito isso, continue com [Loops e branches](branches-and-loops-local.md) em seu ambiente local.\n\nSaiba mais sobre os números em C# nos tópicos a seguir:\n\n[Tabela de Tipos Integrais](../language-reference/keywords/integral-types-table.md)   \n[Tabela de tipos de ponto flutuante](../language-reference/keywords/floating-point-types-table.md)   \n[Tabela de Tipos Internos](../language-reference/keywords/built-in-types-table.md)   \n[Tabela de conversões numéricas implícitas](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[Tabela de conversões numéricas explícitas](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
